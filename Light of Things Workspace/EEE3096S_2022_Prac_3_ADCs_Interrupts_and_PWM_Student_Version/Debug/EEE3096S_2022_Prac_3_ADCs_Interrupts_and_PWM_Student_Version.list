
EEE3096S_2022_Prac_3_ADCs_Interrupts_and_PWM_Student_Version.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4b4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  0800a578  0800a578  0001a578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa68  0800aa68  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa68  0800aa68  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa68  0800aa68  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa68  0800aa68  0001aa68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa6c  0800aa6c  0001aa6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800aa70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000074  0800aae4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  0800aae4  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9ab  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000220d  00000000  00000000  0002fa47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00031c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  00032a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013816  00000000  00000000  00033760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001020a  00000000  00000000  00046f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00075503  00000000  00000000  00057180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc683  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004690  00000000  00000000  000cc6d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a55c 	.word	0x0800a55c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	0800a55c 	.word	0x0800a55c

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	; 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	; 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <__aeabi_cdrcmple>:
 800041c:	4684      	mov	ip, r0
 800041e:	0010      	movs	r0, r2
 8000420:	4662      	mov	r2, ip
 8000422:	468c      	mov	ip, r1
 8000424:	0019      	movs	r1, r3
 8000426:	4663      	mov	r3, ip
 8000428:	e000      	b.n	800042c <__aeabi_cdcmpeq>
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdcmpeq>:
 800042c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042e:	f001 f885 	bl	800153c <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	d401      	bmi.n	800043a <__aeabi_cdcmpeq+0xe>
 8000436:	2100      	movs	r1, #0
 8000438:	42c8      	cmn	r0, r1
 800043a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800043c <__aeabi_dcmpeq>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 ffd5 	bl	80013ec <__eqdf2>
 8000442:	4240      	negs	r0, r0
 8000444:	3001      	adds	r0, #1
 8000446:	bd10      	pop	{r4, pc}

08000448 <__aeabi_dcmplt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f877 	bl	800153c <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	db01      	blt.n	8000456 <__aeabi_dcmplt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmple>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 f86d 	bl	800153c <__ledf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dd01      	ble.n	800046a <__aeabi_dcmple+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpgt>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f000 fffd 	bl	8001470 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	dc01      	bgt.n	800047e <__aeabi_dcmpgt+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_dcmpge>:
 8000484:	b510      	push	{r4, lr}
 8000486:	f000 fff3 	bl	8001470 <__gedf2>
 800048a:	2800      	cmp	r0, #0
 800048c:	da01      	bge.n	8000492 <__aeabi_dcmpge+0xe>
 800048e:	2000      	movs	r0, #0
 8000490:	bd10      	pop	{r4, pc}
 8000492:	2001      	movs	r0, #1
 8000494:	bd10      	pop	{r4, pc}
 8000496:	46c0      	nop			; (mov r8, r8)

08000498 <__aeabi_d2uiz>:
 8000498:	b570      	push	{r4, r5, r6, lr}
 800049a:	2200      	movs	r2, #0
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <__aeabi_d2uiz+0x38>)
 800049e:	0004      	movs	r4, r0
 80004a0:	000d      	movs	r5, r1
 80004a2:	f7ff ffef 	bl	8000484 <__aeabi_dcmpge>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d104      	bne.n	80004b4 <__aeabi_d2uiz+0x1c>
 80004aa:	0020      	movs	r0, r4
 80004ac:	0029      	movs	r1, r5
 80004ae:	f001 fec5 	bl	800223c <__aeabi_d2iz>
 80004b2:	bd70      	pop	{r4, r5, r6, pc}
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <__aeabi_d2uiz+0x38>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	0020      	movs	r0, r4
 80004ba:	0029      	movs	r1, r5
 80004bc:	f001 fb0e 	bl	8001adc <__aeabi_dsub>
 80004c0:	f001 febc 	bl	800223c <__aeabi_d2iz>
 80004c4:	2380      	movs	r3, #128	; 0x80
 80004c6:	061b      	lsls	r3, r3, #24
 80004c8:	469c      	mov	ip, r3
 80004ca:	4460      	add	r0, ip
 80004cc:	e7f1      	b.n	80004b2 <__aeabi_d2uiz+0x1a>
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	41e00000 	.word	0x41e00000

080004d4 <__aeabi_fdiv>:
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	464f      	mov	r7, r9
 80004d8:	4646      	mov	r6, r8
 80004da:	46d6      	mov	lr, sl
 80004dc:	0245      	lsls	r5, r0, #9
 80004de:	b5c0      	push	{r6, r7, lr}
 80004e0:	0047      	lsls	r7, r0, #1
 80004e2:	1c0c      	adds	r4, r1, #0
 80004e4:	0a6d      	lsrs	r5, r5, #9
 80004e6:	0e3f      	lsrs	r7, r7, #24
 80004e8:	0fc6      	lsrs	r6, r0, #31
 80004ea:	2f00      	cmp	r7, #0
 80004ec:	d100      	bne.n	80004f0 <__aeabi_fdiv+0x1c>
 80004ee:	e070      	b.n	80005d2 <__aeabi_fdiv+0xfe>
 80004f0:	2fff      	cmp	r7, #255	; 0xff
 80004f2:	d100      	bne.n	80004f6 <__aeabi_fdiv+0x22>
 80004f4:	e075      	b.n	80005e2 <__aeabi_fdiv+0x10e>
 80004f6:	00eb      	lsls	r3, r5, #3
 80004f8:	2580      	movs	r5, #128	; 0x80
 80004fa:	04ed      	lsls	r5, r5, #19
 80004fc:	431d      	orrs	r5, r3
 80004fe:	2300      	movs	r3, #0
 8000500:	4699      	mov	r9, r3
 8000502:	469a      	mov	sl, r3
 8000504:	3f7f      	subs	r7, #127	; 0x7f
 8000506:	0260      	lsls	r0, r4, #9
 8000508:	0a43      	lsrs	r3, r0, #9
 800050a:	4698      	mov	r8, r3
 800050c:	0063      	lsls	r3, r4, #1
 800050e:	0e1b      	lsrs	r3, r3, #24
 8000510:	0fe4      	lsrs	r4, r4, #31
 8000512:	2b00      	cmp	r3, #0
 8000514:	d04e      	beq.n	80005b4 <__aeabi_fdiv+0xe0>
 8000516:	2bff      	cmp	r3, #255	; 0xff
 8000518:	d046      	beq.n	80005a8 <__aeabi_fdiv+0xd4>
 800051a:	4642      	mov	r2, r8
 800051c:	00d0      	lsls	r0, r2, #3
 800051e:	2280      	movs	r2, #128	; 0x80
 8000520:	04d2      	lsls	r2, r2, #19
 8000522:	4302      	orrs	r2, r0
 8000524:	4690      	mov	r8, r2
 8000526:	2200      	movs	r2, #0
 8000528:	3b7f      	subs	r3, #127	; 0x7f
 800052a:	0031      	movs	r1, r6
 800052c:	1aff      	subs	r7, r7, r3
 800052e:	464b      	mov	r3, r9
 8000530:	4061      	eors	r1, r4
 8000532:	b2c9      	uxtb	r1, r1
 8000534:	4313      	orrs	r3, r2
 8000536:	2b0f      	cmp	r3, #15
 8000538:	d900      	bls.n	800053c <__aeabi_fdiv+0x68>
 800053a:	e0b5      	b.n	80006a8 <__aeabi_fdiv+0x1d4>
 800053c:	486e      	ldr	r0, [pc, #440]	; (80006f8 <__aeabi_fdiv+0x224>)
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	58c3      	ldr	r3, [r0, r3]
 8000542:	469f      	mov	pc, r3
 8000544:	2300      	movs	r3, #0
 8000546:	4698      	mov	r8, r3
 8000548:	0026      	movs	r6, r4
 800054a:	4645      	mov	r5, r8
 800054c:	4692      	mov	sl, r2
 800054e:	4653      	mov	r3, sl
 8000550:	2b02      	cmp	r3, #2
 8000552:	d100      	bne.n	8000556 <__aeabi_fdiv+0x82>
 8000554:	e089      	b.n	800066a <__aeabi_fdiv+0x196>
 8000556:	2b03      	cmp	r3, #3
 8000558:	d100      	bne.n	800055c <__aeabi_fdiv+0x88>
 800055a:	e09e      	b.n	800069a <__aeabi_fdiv+0x1c6>
 800055c:	2b01      	cmp	r3, #1
 800055e:	d018      	beq.n	8000592 <__aeabi_fdiv+0xbe>
 8000560:	003b      	movs	r3, r7
 8000562:	337f      	adds	r3, #127	; 0x7f
 8000564:	2b00      	cmp	r3, #0
 8000566:	dd69      	ble.n	800063c <__aeabi_fdiv+0x168>
 8000568:	076a      	lsls	r2, r5, #29
 800056a:	d004      	beq.n	8000576 <__aeabi_fdiv+0xa2>
 800056c:	220f      	movs	r2, #15
 800056e:	402a      	ands	r2, r5
 8000570:	2a04      	cmp	r2, #4
 8000572:	d000      	beq.n	8000576 <__aeabi_fdiv+0xa2>
 8000574:	3504      	adds	r5, #4
 8000576:	012a      	lsls	r2, r5, #4
 8000578:	d503      	bpl.n	8000582 <__aeabi_fdiv+0xae>
 800057a:	4b60      	ldr	r3, [pc, #384]	; (80006fc <__aeabi_fdiv+0x228>)
 800057c:	401d      	ands	r5, r3
 800057e:	003b      	movs	r3, r7
 8000580:	3380      	adds	r3, #128	; 0x80
 8000582:	2bfe      	cmp	r3, #254	; 0xfe
 8000584:	dd00      	ble.n	8000588 <__aeabi_fdiv+0xb4>
 8000586:	e070      	b.n	800066a <__aeabi_fdiv+0x196>
 8000588:	01ad      	lsls	r5, r5, #6
 800058a:	0a6d      	lsrs	r5, r5, #9
 800058c:	b2d8      	uxtb	r0, r3
 800058e:	e002      	b.n	8000596 <__aeabi_fdiv+0xc2>
 8000590:	000e      	movs	r6, r1
 8000592:	2000      	movs	r0, #0
 8000594:	2500      	movs	r5, #0
 8000596:	05c0      	lsls	r0, r0, #23
 8000598:	4328      	orrs	r0, r5
 800059a:	07f6      	lsls	r6, r6, #31
 800059c:	4330      	orrs	r0, r6
 800059e:	bce0      	pop	{r5, r6, r7}
 80005a0:	46ba      	mov	sl, r7
 80005a2:	46b1      	mov	r9, r6
 80005a4:	46a8      	mov	r8, r5
 80005a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a8:	4643      	mov	r3, r8
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d13f      	bne.n	800062e <__aeabi_fdiv+0x15a>
 80005ae:	2202      	movs	r2, #2
 80005b0:	3fff      	subs	r7, #255	; 0xff
 80005b2:	e003      	b.n	80005bc <__aeabi_fdiv+0xe8>
 80005b4:	4643      	mov	r3, r8
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d12d      	bne.n	8000616 <__aeabi_fdiv+0x142>
 80005ba:	2201      	movs	r2, #1
 80005bc:	0031      	movs	r1, r6
 80005be:	464b      	mov	r3, r9
 80005c0:	4061      	eors	r1, r4
 80005c2:	b2c9      	uxtb	r1, r1
 80005c4:	4313      	orrs	r3, r2
 80005c6:	2b0f      	cmp	r3, #15
 80005c8:	d834      	bhi.n	8000634 <__aeabi_fdiv+0x160>
 80005ca:	484d      	ldr	r0, [pc, #308]	; (8000700 <__aeabi_fdiv+0x22c>)
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	58c3      	ldr	r3, [r0, r3]
 80005d0:	469f      	mov	pc, r3
 80005d2:	2d00      	cmp	r5, #0
 80005d4:	d113      	bne.n	80005fe <__aeabi_fdiv+0x12a>
 80005d6:	2304      	movs	r3, #4
 80005d8:	4699      	mov	r9, r3
 80005da:	3b03      	subs	r3, #3
 80005dc:	2700      	movs	r7, #0
 80005de:	469a      	mov	sl, r3
 80005e0:	e791      	b.n	8000506 <__aeabi_fdiv+0x32>
 80005e2:	2d00      	cmp	r5, #0
 80005e4:	d105      	bne.n	80005f2 <__aeabi_fdiv+0x11e>
 80005e6:	2308      	movs	r3, #8
 80005e8:	4699      	mov	r9, r3
 80005ea:	3b06      	subs	r3, #6
 80005ec:	27ff      	movs	r7, #255	; 0xff
 80005ee:	469a      	mov	sl, r3
 80005f0:	e789      	b.n	8000506 <__aeabi_fdiv+0x32>
 80005f2:	230c      	movs	r3, #12
 80005f4:	4699      	mov	r9, r3
 80005f6:	3b09      	subs	r3, #9
 80005f8:	27ff      	movs	r7, #255	; 0xff
 80005fa:	469a      	mov	sl, r3
 80005fc:	e783      	b.n	8000506 <__aeabi_fdiv+0x32>
 80005fe:	0028      	movs	r0, r5
 8000600:	f001 fef0 	bl	80023e4 <__clzsi2>
 8000604:	2776      	movs	r7, #118	; 0x76
 8000606:	1f43      	subs	r3, r0, #5
 8000608:	409d      	lsls	r5, r3
 800060a:	2300      	movs	r3, #0
 800060c:	427f      	negs	r7, r7
 800060e:	4699      	mov	r9, r3
 8000610:	469a      	mov	sl, r3
 8000612:	1a3f      	subs	r7, r7, r0
 8000614:	e777      	b.n	8000506 <__aeabi_fdiv+0x32>
 8000616:	4640      	mov	r0, r8
 8000618:	f001 fee4 	bl	80023e4 <__clzsi2>
 800061c:	4642      	mov	r2, r8
 800061e:	1f43      	subs	r3, r0, #5
 8000620:	409a      	lsls	r2, r3
 8000622:	2376      	movs	r3, #118	; 0x76
 8000624:	425b      	negs	r3, r3
 8000626:	4690      	mov	r8, r2
 8000628:	1a1b      	subs	r3, r3, r0
 800062a:	2200      	movs	r2, #0
 800062c:	e77d      	b.n	800052a <__aeabi_fdiv+0x56>
 800062e:	23ff      	movs	r3, #255	; 0xff
 8000630:	2203      	movs	r2, #3
 8000632:	e77a      	b.n	800052a <__aeabi_fdiv+0x56>
 8000634:	000e      	movs	r6, r1
 8000636:	20ff      	movs	r0, #255	; 0xff
 8000638:	2500      	movs	r5, #0
 800063a:	e7ac      	b.n	8000596 <__aeabi_fdiv+0xc2>
 800063c:	2001      	movs	r0, #1
 800063e:	1ac0      	subs	r0, r0, r3
 8000640:	281b      	cmp	r0, #27
 8000642:	dca6      	bgt.n	8000592 <__aeabi_fdiv+0xbe>
 8000644:	379e      	adds	r7, #158	; 0x9e
 8000646:	002a      	movs	r2, r5
 8000648:	40bd      	lsls	r5, r7
 800064a:	40c2      	lsrs	r2, r0
 800064c:	1e6b      	subs	r3, r5, #1
 800064e:	419d      	sbcs	r5, r3
 8000650:	4315      	orrs	r5, r2
 8000652:	076b      	lsls	r3, r5, #29
 8000654:	d004      	beq.n	8000660 <__aeabi_fdiv+0x18c>
 8000656:	230f      	movs	r3, #15
 8000658:	402b      	ands	r3, r5
 800065a:	2b04      	cmp	r3, #4
 800065c:	d000      	beq.n	8000660 <__aeabi_fdiv+0x18c>
 800065e:	3504      	adds	r5, #4
 8000660:	016b      	lsls	r3, r5, #5
 8000662:	d544      	bpl.n	80006ee <__aeabi_fdiv+0x21a>
 8000664:	2001      	movs	r0, #1
 8000666:	2500      	movs	r5, #0
 8000668:	e795      	b.n	8000596 <__aeabi_fdiv+0xc2>
 800066a:	20ff      	movs	r0, #255	; 0xff
 800066c:	2500      	movs	r5, #0
 800066e:	e792      	b.n	8000596 <__aeabi_fdiv+0xc2>
 8000670:	2580      	movs	r5, #128	; 0x80
 8000672:	2600      	movs	r6, #0
 8000674:	20ff      	movs	r0, #255	; 0xff
 8000676:	03ed      	lsls	r5, r5, #15
 8000678:	e78d      	b.n	8000596 <__aeabi_fdiv+0xc2>
 800067a:	2300      	movs	r3, #0
 800067c:	4698      	mov	r8, r3
 800067e:	2080      	movs	r0, #128	; 0x80
 8000680:	03c0      	lsls	r0, r0, #15
 8000682:	4205      	tst	r5, r0
 8000684:	d009      	beq.n	800069a <__aeabi_fdiv+0x1c6>
 8000686:	4643      	mov	r3, r8
 8000688:	4203      	tst	r3, r0
 800068a:	d106      	bne.n	800069a <__aeabi_fdiv+0x1c6>
 800068c:	4645      	mov	r5, r8
 800068e:	4305      	orrs	r5, r0
 8000690:	026d      	lsls	r5, r5, #9
 8000692:	0026      	movs	r6, r4
 8000694:	20ff      	movs	r0, #255	; 0xff
 8000696:	0a6d      	lsrs	r5, r5, #9
 8000698:	e77d      	b.n	8000596 <__aeabi_fdiv+0xc2>
 800069a:	2080      	movs	r0, #128	; 0x80
 800069c:	03c0      	lsls	r0, r0, #15
 800069e:	4305      	orrs	r5, r0
 80006a0:	026d      	lsls	r5, r5, #9
 80006a2:	20ff      	movs	r0, #255	; 0xff
 80006a4:	0a6d      	lsrs	r5, r5, #9
 80006a6:	e776      	b.n	8000596 <__aeabi_fdiv+0xc2>
 80006a8:	4642      	mov	r2, r8
 80006aa:	016b      	lsls	r3, r5, #5
 80006ac:	0150      	lsls	r0, r2, #5
 80006ae:	4283      	cmp	r3, r0
 80006b0:	d219      	bcs.n	80006e6 <__aeabi_fdiv+0x212>
 80006b2:	221b      	movs	r2, #27
 80006b4:	2500      	movs	r5, #0
 80006b6:	3f01      	subs	r7, #1
 80006b8:	2601      	movs	r6, #1
 80006ba:	001c      	movs	r4, r3
 80006bc:	006d      	lsls	r5, r5, #1
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	2c00      	cmp	r4, #0
 80006c2:	db01      	blt.n	80006c8 <__aeabi_fdiv+0x1f4>
 80006c4:	4298      	cmp	r0, r3
 80006c6:	d801      	bhi.n	80006cc <__aeabi_fdiv+0x1f8>
 80006c8:	1a1b      	subs	r3, r3, r0
 80006ca:	4335      	orrs	r5, r6
 80006cc:	3a01      	subs	r2, #1
 80006ce:	2a00      	cmp	r2, #0
 80006d0:	d1f3      	bne.n	80006ba <__aeabi_fdiv+0x1e6>
 80006d2:	1e5a      	subs	r2, r3, #1
 80006d4:	4193      	sbcs	r3, r2
 80006d6:	431d      	orrs	r5, r3
 80006d8:	003b      	movs	r3, r7
 80006da:	337f      	adds	r3, #127	; 0x7f
 80006dc:	000e      	movs	r6, r1
 80006de:	2b00      	cmp	r3, #0
 80006e0:	dd00      	ble.n	80006e4 <__aeabi_fdiv+0x210>
 80006e2:	e741      	b.n	8000568 <__aeabi_fdiv+0x94>
 80006e4:	e7aa      	b.n	800063c <__aeabi_fdiv+0x168>
 80006e6:	221a      	movs	r2, #26
 80006e8:	2501      	movs	r5, #1
 80006ea:	1a1b      	subs	r3, r3, r0
 80006ec:	e7e4      	b.n	80006b8 <__aeabi_fdiv+0x1e4>
 80006ee:	01ad      	lsls	r5, r5, #6
 80006f0:	2000      	movs	r0, #0
 80006f2:	0a6d      	lsrs	r5, r5, #9
 80006f4:	e74f      	b.n	8000596 <__aeabi_fdiv+0xc2>
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	0800a660 	.word	0x0800a660
 80006fc:	f7ffffff 	.word	0xf7ffffff
 8000700:	0800a6a0 	.word	0x0800a6a0

08000704 <__aeabi_ui2f>:
 8000704:	b570      	push	{r4, r5, r6, lr}
 8000706:	1e05      	subs	r5, r0, #0
 8000708:	d00e      	beq.n	8000728 <__aeabi_ui2f+0x24>
 800070a:	f001 fe6b 	bl	80023e4 <__clzsi2>
 800070e:	239e      	movs	r3, #158	; 0x9e
 8000710:	0004      	movs	r4, r0
 8000712:	1a1b      	subs	r3, r3, r0
 8000714:	2b96      	cmp	r3, #150	; 0x96
 8000716:	dc0c      	bgt.n	8000732 <__aeabi_ui2f+0x2e>
 8000718:	2808      	cmp	r0, #8
 800071a:	dd01      	ble.n	8000720 <__aeabi_ui2f+0x1c>
 800071c:	3c08      	subs	r4, #8
 800071e:	40a5      	lsls	r5, r4
 8000720:	026d      	lsls	r5, r5, #9
 8000722:	0a6d      	lsrs	r5, r5, #9
 8000724:	b2d8      	uxtb	r0, r3
 8000726:	e001      	b.n	800072c <__aeabi_ui2f+0x28>
 8000728:	2000      	movs	r0, #0
 800072a:	2500      	movs	r5, #0
 800072c:	05c0      	lsls	r0, r0, #23
 800072e:	4328      	orrs	r0, r5
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	2b99      	cmp	r3, #153	; 0x99
 8000734:	dd09      	ble.n	800074a <__aeabi_ui2f+0x46>
 8000736:	0002      	movs	r2, r0
 8000738:	0029      	movs	r1, r5
 800073a:	321b      	adds	r2, #27
 800073c:	4091      	lsls	r1, r2
 800073e:	1e4a      	subs	r2, r1, #1
 8000740:	4191      	sbcs	r1, r2
 8000742:	2205      	movs	r2, #5
 8000744:	1a12      	subs	r2, r2, r0
 8000746:	40d5      	lsrs	r5, r2
 8000748:	430d      	orrs	r5, r1
 800074a:	2c05      	cmp	r4, #5
 800074c:	dc12      	bgt.n	8000774 <__aeabi_ui2f+0x70>
 800074e:	0029      	movs	r1, r5
 8000750:	4e0c      	ldr	r6, [pc, #48]	; (8000784 <__aeabi_ui2f+0x80>)
 8000752:	4031      	ands	r1, r6
 8000754:	076a      	lsls	r2, r5, #29
 8000756:	d009      	beq.n	800076c <__aeabi_ui2f+0x68>
 8000758:	200f      	movs	r0, #15
 800075a:	4028      	ands	r0, r5
 800075c:	2804      	cmp	r0, #4
 800075e:	d005      	beq.n	800076c <__aeabi_ui2f+0x68>
 8000760:	3104      	adds	r1, #4
 8000762:	014a      	lsls	r2, r1, #5
 8000764:	d502      	bpl.n	800076c <__aeabi_ui2f+0x68>
 8000766:	239f      	movs	r3, #159	; 0x9f
 8000768:	4031      	ands	r1, r6
 800076a:	1b1b      	subs	r3, r3, r4
 800076c:	0189      	lsls	r1, r1, #6
 800076e:	0a4d      	lsrs	r5, r1, #9
 8000770:	b2d8      	uxtb	r0, r3
 8000772:	e7db      	b.n	800072c <__aeabi_ui2f+0x28>
 8000774:	1f62      	subs	r2, r4, #5
 8000776:	4095      	lsls	r5, r2
 8000778:	0029      	movs	r1, r5
 800077a:	4e02      	ldr	r6, [pc, #8]	; (8000784 <__aeabi_ui2f+0x80>)
 800077c:	4031      	ands	r1, r6
 800077e:	076a      	lsls	r2, r5, #29
 8000780:	d0f4      	beq.n	800076c <__aeabi_ui2f+0x68>
 8000782:	e7e9      	b.n	8000758 <__aeabi_ui2f+0x54>
 8000784:	fbffffff 	.word	0xfbffffff

08000788 <__aeabi_dadd>:
 8000788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800078a:	464f      	mov	r7, r9
 800078c:	4646      	mov	r6, r8
 800078e:	46d6      	mov	lr, sl
 8000790:	000d      	movs	r5, r1
 8000792:	0004      	movs	r4, r0
 8000794:	b5c0      	push	{r6, r7, lr}
 8000796:	001f      	movs	r7, r3
 8000798:	0011      	movs	r1, r2
 800079a:	0328      	lsls	r0, r5, #12
 800079c:	0f62      	lsrs	r2, r4, #29
 800079e:	0a40      	lsrs	r0, r0, #9
 80007a0:	4310      	orrs	r0, r2
 80007a2:	007a      	lsls	r2, r7, #1
 80007a4:	0d52      	lsrs	r2, r2, #21
 80007a6:	00e3      	lsls	r3, r4, #3
 80007a8:	033c      	lsls	r4, r7, #12
 80007aa:	4691      	mov	r9, r2
 80007ac:	0a64      	lsrs	r4, r4, #9
 80007ae:	0ffa      	lsrs	r2, r7, #31
 80007b0:	0f4f      	lsrs	r7, r1, #29
 80007b2:	006e      	lsls	r6, r5, #1
 80007b4:	4327      	orrs	r7, r4
 80007b6:	4692      	mov	sl, r2
 80007b8:	46b8      	mov	r8, r7
 80007ba:	0d76      	lsrs	r6, r6, #21
 80007bc:	0fed      	lsrs	r5, r5, #31
 80007be:	00c9      	lsls	r1, r1, #3
 80007c0:	4295      	cmp	r5, r2
 80007c2:	d100      	bne.n	80007c6 <__aeabi_dadd+0x3e>
 80007c4:	e099      	b.n	80008fa <__aeabi_dadd+0x172>
 80007c6:	464c      	mov	r4, r9
 80007c8:	1b34      	subs	r4, r6, r4
 80007ca:	46a4      	mov	ip, r4
 80007cc:	2c00      	cmp	r4, #0
 80007ce:	dc00      	bgt.n	80007d2 <__aeabi_dadd+0x4a>
 80007d0:	e07c      	b.n	80008cc <__aeabi_dadd+0x144>
 80007d2:	464a      	mov	r2, r9
 80007d4:	2a00      	cmp	r2, #0
 80007d6:	d100      	bne.n	80007da <__aeabi_dadd+0x52>
 80007d8:	e0b8      	b.n	800094c <__aeabi_dadd+0x1c4>
 80007da:	4ac5      	ldr	r2, [pc, #788]	; (8000af0 <__aeabi_dadd+0x368>)
 80007dc:	4296      	cmp	r6, r2
 80007de:	d100      	bne.n	80007e2 <__aeabi_dadd+0x5a>
 80007e0:	e11c      	b.n	8000a1c <__aeabi_dadd+0x294>
 80007e2:	2280      	movs	r2, #128	; 0x80
 80007e4:	003c      	movs	r4, r7
 80007e6:	0412      	lsls	r2, r2, #16
 80007e8:	4314      	orrs	r4, r2
 80007ea:	46a0      	mov	r8, r4
 80007ec:	4662      	mov	r2, ip
 80007ee:	2a38      	cmp	r2, #56	; 0x38
 80007f0:	dd00      	ble.n	80007f4 <__aeabi_dadd+0x6c>
 80007f2:	e161      	b.n	8000ab8 <__aeabi_dadd+0x330>
 80007f4:	2a1f      	cmp	r2, #31
 80007f6:	dd00      	ble.n	80007fa <__aeabi_dadd+0x72>
 80007f8:	e1cc      	b.n	8000b94 <__aeabi_dadd+0x40c>
 80007fa:	4664      	mov	r4, ip
 80007fc:	2220      	movs	r2, #32
 80007fe:	1b12      	subs	r2, r2, r4
 8000800:	4644      	mov	r4, r8
 8000802:	4094      	lsls	r4, r2
 8000804:	000f      	movs	r7, r1
 8000806:	46a1      	mov	r9, r4
 8000808:	4664      	mov	r4, ip
 800080a:	4091      	lsls	r1, r2
 800080c:	40e7      	lsrs	r7, r4
 800080e:	464c      	mov	r4, r9
 8000810:	1e4a      	subs	r2, r1, #1
 8000812:	4191      	sbcs	r1, r2
 8000814:	433c      	orrs	r4, r7
 8000816:	4642      	mov	r2, r8
 8000818:	4321      	orrs	r1, r4
 800081a:	4664      	mov	r4, ip
 800081c:	40e2      	lsrs	r2, r4
 800081e:	1a80      	subs	r0, r0, r2
 8000820:	1a5c      	subs	r4, r3, r1
 8000822:	42a3      	cmp	r3, r4
 8000824:	419b      	sbcs	r3, r3
 8000826:	425f      	negs	r7, r3
 8000828:	1bc7      	subs	r7, r0, r7
 800082a:	023b      	lsls	r3, r7, #8
 800082c:	d400      	bmi.n	8000830 <__aeabi_dadd+0xa8>
 800082e:	e0d0      	b.n	80009d2 <__aeabi_dadd+0x24a>
 8000830:	027f      	lsls	r7, r7, #9
 8000832:	0a7f      	lsrs	r7, r7, #9
 8000834:	2f00      	cmp	r7, #0
 8000836:	d100      	bne.n	800083a <__aeabi_dadd+0xb2>
 8000838:	e0ff      	b.n	8000a3a <__aeabi_dadd+0x2b2>
 800083a:	0038      	movs	r0, r7
 800083c:	f001 fdd2 	bl	80023e4 <__clzsi2>
 8000840:	0001      	movs	r1, r0
 8000842:	3908      	subs	r1, #8
 8000844:	2320      	movs	r3, #32
 8000846:	0022      	movs	r2, r4
 8000848:	1a5b      	subs	r3, r3, r1
 800084a:	408f      	lsls	r7, r1
 800084c:	40da      	lsrs	r2, r3
 800084e:	408c      	lsls	r4, r1
 8000850:	4317      	orrs	r7, r2
 8000852:	42b1      	cmp	r1, r6
 8000854:	da00      	bge.n	8000858 <__aeabi_dadd+0xd0>
 8000856:	e0ff      	b.n	8000a58 <__aeabi_dadd+0x2d0>
 8000858:	1b89      	subs	r1, r1, r6
 800085a:	1c4b      	adds	r3, r1, #1
 800085c:	2b1f      	cmp	r3, #31
 800085e:	dd00      	ble.n	8000862 <__aeabi_dadd+0xda>
 8000860:	e0a8      	b.n	80009b4 <__aeabi_dadd+0x22c>
 8000862:	2220      	movs	r2, #32
 8000864:	0039      	movs	r1, r7
 8000866:	1ad2      	subs	r2, r2, r3
 8000868:	0020      	movs	r0, r4
 800086a:	4094      	lsls	r4, r2
 800086c:	4091      	lsls	r1, r2
 800086e:	40d8      	lsrs	r0, r3
 8000870:	1e62      	subs	r2, r4, #1
 8000872:	4194      	sbcs	r4, r2
 8000874:	40df      	lsrs	r7, r3
 8000876:	2600      	movs	r6, #0
 8000878:	4301      	orrs	r1, r0
 800087a:	430c      	orrs	r4, r1
 800087c:	0763      	lsls	r3, r4, #29
 800087e:	d009      	beq.n	8000894 <__aeabi_dadd+0x10c>
 8000880:	230f      	movs	r3, #15
 8000882:	4023      	ands	r3, r4
 8000884:	2b04      	cmp	r3, #4
 8000886:	d005      	beq.n	8000894 <__aeabi_dadd+0x10c>
 8000888:	1d23      	adds	r3, r4, #4
 800088a:	42a3      	cmp	r3, r4
 800088c:	41a4      	sbcs	r4, r4
 800088e:	4264      	negs	r4, r4
 8000890:	193f      	adds	r7, r7, r4
 8000892:	001c      	movs	r4, r3
 8000894:	023b      	lsls	r3, r7, #8
 8000896:	d400      	bmi.n	800089a <__aeabi_dadd+0x112>
 8000898:	e09e      	b.n	80009d8 <__aeabi_dadd+0x250>
 800089a:	4b95      	ldr	r3, [pc, #596]	; (8000af0 <__aeabi_dadd+0x368>)
 800089c:	3601      	adds	r6, #1
 800089e:	429e      	cmp	r6, r3
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x11c>
 80008a2:	e0b7      	b.n	8000a14 <__aeabi_dadd+0x28c>
 80008a4:	4a93      	ldr	r2, [pc, #588]	; (8000af4 <__aeabi_dadd+0x36c>)
 80008a6:	08e4      	lsrs	r4, r4, #3
 80008a8:	4017      	ands	r7, r2
 80008aa:	077b      	lsls	r3, r7, #29
 80008ac:	0571      	lsls	r1, r6, #21
 80008ae:	027f      	lsls	r7, r7, #9
 80008b0:	4323      	orrs	r3, r4
 80008b2:	0b3f      	lsrs	r7, r7, #12
 80008b4:	0d4a      	lsrs	r2, r1, #21
 80008b6:	0512      	lsls	r2, r2, #20
 80008b8:	433a      	orrs	r2, r7
 80008ba:	07ed      	lsls	r5, r5, #31
 80008bc:	432a      	orrs	r2, r5
 80008be:	0018      	movs	r0, r3
 80008c0:	0011      	movs	r1, r2
 80008c2:	bce0      	pop	{r5, r6, r7}
 80008c4:	46ba      	mov	sl, r7
 80008c6:	46b1      	mov	r9, r6
 80008c8:	46a8      	mov	r8, r5
 80008ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008cc:	2c00      	cmp	r4, #0
 80008ce:	d04b      	beq.n	8000968 <__aeabi_dadd+0x1e0>
 80008d0:	464c      	mov	r4, r9
 80008d2:	1ba4      	subs	r4, r4, r6
 80008d4:	46a4      	mov	ip, r4
 80008d6:	2e00      	cmp	r6, #0
 80008d8:	d000      	beq.n	80008dc <__aeabi_dadd+0x154>
 80008da:	e123      	b.n	8000b24 <__aeabi_dadd+0x39c>
 80008dc:	0004      	movs	r4, r0
 80008de:	431c      	orrs	r4, r3
 80008e0:	d100      	bne.n	80008e4 <__aeabi_dadd+0x15c>
 80008e2:	e1af      	b.n	8000c44 <__aeabi_dadd+0x4bc>
 80008e4:	4662      	mov	r2, ip
 80008e6:	1e54      	subs	r4, r2, #1
 80008e8:	2a01      	cmp	r2, #1
 80008ea:	d100      	bne.n	80008ee <__aeabi_dadd+0x166>
 80008ec:	e215      	b.n	8000d1a <__aeabi_dadd+0x592>
 80008ee:	4d80      	ldr	r5, [pc, #512]	; (8000af0 <__aeabi_dadd+0x368>)
 80008f0:	45ac      	cmp	ip, r5
 80008f2:	d100      	bne.n	80008f6 <__aeabi_dadd+0x16e>
 80008f4:	e1c8      	b.n	8000c88 <__aeabi_dadd+0x500>
 80008f6:	46a4      	mov	ip, r4
 80008f8:	e11b      	b.n	8000b32 <__aeabi_dadd+0x3aa>
 80008fa:	464a      	mov	r2, r9
 80008fc:	1ab2      	subs	r2, r6, r2
 80008fe:	4694      	mov	ip, r2
 8000900:	2a00      	cmp	r2, #0
 8000902:	dc00      	bgt.n	8000906 <__aeabi_dadd+0x17e>
 8000904:	e0ac      	b.n	8000a60 <__aeabi_dadd+0x2d8>
 8000906:	464a      	mov	r2, r9
 8000908:	2a00      	cmp	r2, #0
 800090a:	d043      	beq.n	8000994 <__aeabi_dadd+0x20c>
 800090c:	4a78      	ldr	r2, [pc, #480]	; (8000af0 <__aeabi_dadd+0x368>)
 800090e:	4296      	cmp	r6, r2
 8000910:	d100      	bne.n	8000914 <__aeabi_dadd+0x18c>
 8000912:	e1af      	b.n	8000c74 <__aeabi_dadd+0x4ec>
 8000914:	2280      	movs	r2, #128	; 0x80
 8000916:	003c      	movs	r4, r7
 8000918:	0412      	lsls	r2, r2, #16
 800091a:	4314      	orrs	r4, r2
 800091c:	46a0      	mov	r8, r4
 800091e:	4662      	mov	r2, ip
 8000920:	2a38      	cmp	r2, #56	; 0x38
 8000922:	dc67      	bgt.n	80009f4 <__aeabi_dadd+0x26c>
 8000924:	2a1f      	cmp	r2, #31
 8000926:	dc00      	bgt.n	800092a <__aeabi_dadd+0x1a2>
 8000928:	e15f      	b.n	8000bea <__aeabi_dadd+0x462>
 800092a:	4647      	mov	r7, r8
 800092c:	3a20      	subs	r2, #32
 800092e:	40d7      	lsrs	r7, r2
 8000930:	4662      	mov	r2, ip
 8000932:	2a20      	cmp	r2, #32
 8000934:	d005      	beq.n	8000942 <__aeabi_dadd+0x1ba>
 8000936:	4664      	mov	r4, ip
 8000938:	2240      	movs	r2, #64	; 0x40
 800093a:	1b12      	subs	r2, r2, r4
 800093c:	4644      	mov	r4, r8
 800093e:	4094      	lsls	r4, r2
 8000940:	4321      	orrs	r1, r4
 8000942:	1e4a      	subs	r2, r1, #1
 8000944:	4191      	sbcs	r1, r2
 8000946:	000c      	movs	r4, r1
 8000948:	433c      	orrs	r4, r7
 800094a:	e057      	b.n	80009fc <__aeabi_dadd+0x274>
 800094c:	003a      	movs	r2, r7
 800094e:	430a      	orrs	r2, r1
 8000950:	d100      	bne.n	8000954 <__aeabi_dadd+0x1cc>
 8000952:	e105      	b.n	8000b60 <__aeabi_dadd+0x3d8>
 8000954:	0022      	movs	r2, r4
 8000956:	3a01      	subs	r2, #1
 8000958:	2c01      	cmp	r4, #1
 800095a:	d100      	bne.n	800095e <__aeabi_dadd+0x1d6>
 800095c:	e182      	b.n	8000c64 <__aeabi_dadd+0x4dc>
 800095e:	4c64      	ldr	r4, [pc, #400]	; (8000af0 <__aeabi_dadd+0x368>)
 8000960:	45a4      	cmp	ip, r4
 8000962:	d05b      	beq.n	8000a1c <__aeabi_dadd+0x294>
 8000964:	4694      	mov	ip, r2
 8000966:	e741      	b.n	80007ec <__aeabi_dadd+0x64>
 8000968:	4c63      	ldr	r4, [pc, #396]	; (8000af8 <__aeabi_dadd+0x370>)
 800096a:	1c77      	adds	r7, r6, #1
 800096c:	4227      	tst	r7, r4
 800096e:	d000      	beq.n	8000972 <__aeabi_dadd+0x1ea>
 8000970:	e0c4      	b.n	8000afc <__aeabi_dadd+0x374>
 8000972:	0004      	movs	r4, r0
 8000974:	431c      	orrs	r4, r3
 8000976:	2e00      	cmp	r6, #0
 8000978:	d000      	beq.n	800097c <__aeabi_dadd+0x1f4>
 800097a:	e169      	b.n	8000c50 <__aeabi_dadd+0x4c8>
 800097c:	2c00      	cmp	r4, #0
 800097e:	d100      	bne.n	8000982 <__aeabi_dadd+0x1fa>
 8000980:	e1bf      	b.n	8000d02 <__aeabi_dadd+0x57a>
 8000982:	4644      	mov	r4, r8
 8000984:	430c      	orrs	r4, r1
 8000986:	d000      	beq.n	800098a <__aeabi_dadd+0x202>
 8000988:	e1d0      	b.n	8000d2c <__aeabi_dadd+0x5a4>
 800098a:	0742      	lsls	r2, r0, #29
 800098c:	08db      	lsrs	r3, r3, #3
 800098e:	4313      	orrs	r3, r2
 8000990:	08c0      	lsrs	r0, r0, #3
 8000992:	e029      	b.n	80009e8 <__aeabi_dadd+0x260>
 8000994:	003a      	movs	r2, r7
 8000996:	430a      	orrs	r2, r1
 8000998:	d100      	bne.n	800099c <__aeabi_dadd+0x214>
 800099a:	e170      	b.n	8000c7e <__aeabi_dadd+0x4f6>
 800099c:	4662      	mov	r2, ip
 800099e:	4664      	mov	r4, ip
 80009a0:	3a01      	subs	r2, #1
 80009a2:	2c01      	cmp	r4, #1
 80009a4:	d100      	bne.n	80009a8 <__aeabi_dadd+0x220>
 80009a6:	e0e0      	b.n	8000b6a <__aeabi_dadd+0x3e2>
 80009a8:	4c51      	ldr	r4, [pc, #324]	; (8000af0 <__aeabi_dadd+0x368>)
 80009aa:	45a4      	cmp	ip, r4
 80009ac:	d100      	bne.n	80009b0 <__aeabi_dadd+0x228>
 80009ae:	e161      	b.n	8000c74 <__aeabi_dadd+0x4ec>
 80009b0:	4694      	mov	ip, r2
 80009b2:	e7b4      	b.n	800091e <__aeabi_dadd+0x196>
 80009b4:	003a      	movs	r2, r7
 80009b6:	391f      	subs	r1, #31
 80009b8:	40ca      	lsrs	r2, r1
 80009ba:	0011      	movs	r1, r2
 80009bc:	2b20      	cmp	r3, #32
 80009be:	d003      	beq.n	80009c8 <__aeabi_dadd+0x240>
 80009c0:	2240      	movs	r2, #64	; 0x40
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	409f      	lsls	r7, r3
 80009c6:	433c      	orrs	r4, r7
 80009c8:	1e63      	subs	r3, r4, #1
 80009ca:	419c      	sbcs	r4, r3
 80009cc:	2700      	movs	r7, #0
 80009ce:	2600      	movs	r6, #0
 80009d0:	430c      	orrs	r4, r1
 80009d2:	0763      	lsls	r3, r4, #29
 80009d4:	d000      	beq.n	80009d8 <__aeabi_dadd+0x250>
 80009d6:	e753      	b.n	8000880 <__aeabi_dadd+0xf8>
 80009d8:	46b4      	mov	ip, r6
 80009da:	08e4      	lsrs	r4, r4, #3
 80009dc:	077b      	lsls	r3, r7, #29
 80009de:	4323      	orrs	r3, r4
 80009e0:	08f8      	lsrs	r0, r7, #3
 80009e2:	4a43      	ldr	r2, [pc, #268]	; (8000af0 <__aeabi_dadd+0x368>)
 80009e4:	4594      	cmp	ip, r2
 80009e6:	d01d      	beq.n	8000a24 <__aeabi_dadd+0x29c>
 80009e8:	4662      	mov	r2, ip
 80009ea:	0307      	lsls	r7, r0, #12
 80009ec:	0552      	lsls	r2, r2, #21
 80009ee:	0b3f      	lsrs	r7, r7, #12
 80009f0:	0d52      	lsrs	r2, r2, #21
 80009f2:	e760      	b.n	80008b6 <__aeabi_dadd+0x12e>
 80009f4:	4644      	mov	r4, r8
 80009f6:	430c      	orrs	r4, r1
 80009f8:	1e62      	subs	r2, r4, #1
 80009fa:	4194      	sbcs	r4, r2
 80009fc:	18e4      	adds	r4, r4, r3
 80009fe:	429c      	cmp	r4, r3
 8000a00:	419b      	sbcs	r3, r3
 8000a02:	425f      	negs	r7, r3
 8000a04:	183f      	adds	r7, r7, r0
 8000a06:	023b      	lsls	r3, r7, #8
 8000a08:	d5e3      	bpl.n	80009d2 <__aeabi_dadd+0x24a>
 8000a0a:	4b39      	ldr	r3, [pc, #228]	; (8000af0 <__aeabi_dadd+0x368>)
 8000a0c:	3601      	adds	r6, #1
 8000a0e:	429e      	cmp	r6, r3
 8000a10:	d000      	beq.n	8000a14 <__aeabi_dadd+0x28c>
 8000a12:	e0b5      	b.n	8000b80 <__aeabi_dadd+0x3f8>
 8000a14:	0032      	movs	r2, r6
 8000a16:	2700      	movs	r7, #0
 8000a18:	2300      	movs	r3, #0
 8000a1a:	e74c      	b.n	80008b6 <__aeabi_dadd+0x12e>
 8000a1c:	0742      	lsls	r2, r0, #29
 8000a1e:	08db      	lsrs	r3, r3, #3
 8000a20:	4313      	orrs	r3, r2
 8000a22:	08c0      	lsrs	r0, r0, #3
 8000a24:	001a      	movs	r2, r3
 8000a26:	4302      	orrs	r2, r0
 8000a28:	d100      	bne.n	8000a2c <__aeabi_dadd+0x2a4>
 8000a2a:	e1e1      	b.n	8000df0 <__aeabi_dadd+0x668>
 8000a2c:	2780      	movs	r7, #128	; 0x80
 8000a2e:	033f      	lsls	r7, r7, #12
 8000a30:	4307      	orrs	r7, r0
 8000a32:	033f      	lsls	r7, r7, #12
 8000a34:	4a2e      	ldr	r2, [pc, #184]	; (8000af0 <__aeabi_dadd+0x368>)
 8000a36:	0b3f      	lsrs	r7, r7, #12
 8000a38:	e73d      	b.n	80008b6 <__aeabi_dadd+0x12e>
 8000a3a:	0020      	movs	r0, r4
 8000a3c:	f001 fcd2 	bl	80023e4 <__clzsi2>
 8000a40:	0001      	movs	r1, r0
 8000a42:	3118      	adds	r1, #24
 8000a44:	291f      	cmp	r1, #31
 8000a46:	dc00      	bgt.n	8000a4a <__aeabi_dadd+0x2c2>
 8000a48:	e6fc      	b.n	8000844 <__aeabi_dadd+0xbc>
 8000a4a:	3808      	subs	r0, #8
 8000a4c:	4084      	lsls	r4, r0
 8000a4e:	0027      	movs	r7, r4
 8000a50:	2400      	movs	r4, #0
 8000a52:	42b1      	cmp	r1, r6
 8000a54:	db00      	blt.n	8000a58 <__aeabi_dadd+0x2d0>
 8000a56:	e6ff      	b.n	8000858 <__aeabi_dadd+0xd0>
 8000a58:	4a26      	ldr	r2, [pc, #152]	; (8000af4 <__aeabi_dadd+0x36c>)
 8000a5a:	1a76      	subs	r6, r6, r1
 8000a5c:	4017      	ands	r7, r2
 8000a5e:	e70d      	b.n	800087c <__aeabi_dadd+0xf4>
 8000a60:	2a00      	cmp	r2, #0
 8000a62:	d02f      	beq.n	8000ac4 <__aeabi_dadd+0x33c>
 8000a64:	464a      	mov	r2, r9
 8000a66:	1b92      	subs	r2, r2, r6
 8000a68:	4694      	mov	ip, r2
 8000a6a:	2e00      	cmp	r6, #0
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_dadd+0x2e8>
 8000a6e:	e0ad      	b.n	8000bcc <__aeabi_dadd+0x444>
 8000a70:	4a1f      	ldr	r2, [pc, #124]	; (8000af0 <__aeabi_dadd+0x368>)
 8000a72:	4591      	cmp	r9, r2
 8000a74:	d100      	bne.n	8000a78 <__aeabi_dadd+0x2f0>
 8000a76:	e10f      	b.n	8000c98 <__aeabi_dadd+0x510>
 8000a78:	2280      	movs	r2, #128	; 0x80
 8000a7a:	0412      	lsls	r2, r2, #16
 8000a7c:	4310      	orrs	r0, r2
 8000a7e:	4662      	mov	r2, ip
 8000a80:	2a38      	cmp	r2, #56	; 0x38
 8000a82:	dd00      	ble.n	8000a86 <__aeabi_dadd+0x2fe>
 8000a84:	e10f      	b.n	8000ca6 <__aeabi_dadd+0x51e>
 8000a86:	2a1f      	cmp	r2, #31
 8000a88:	dd00      	ble.n	8000a8c <__aeabi_dadd+0x304>
 8000a8a:	e180      	b.n	8000d8e <__aeabi_dadd+0x606>
 8000a8c:	4664      	mov	r4, ip
 8000a8e:	2220      	movs	r2, #32
 8000a90:	001e      	movs	r6, r3
 8000a92:	1b12      	subs	r2, r2, r4
 8000a94:	4667      	mov	r7, ip
 8000a96:	0004      	movs	r4, r0
 8000a98:	4093      	lsls	r3, r2
 8000a9a:	4094      	lsls	r4, r2
 8000a9c:	40fe      	lsrs	r6, r7
 8000a9e:	1e5a      	subs	r2, r3, #1
 8000aa0:	4193      	sbcs	r3, r2
 8000aa2:	40f8      	lsrs	r0, r7
 8000aa4:	4334      	orrs	r4, r6
 8000aa6:	431c      	orrs	r4, r3
 8000aa8:	4480      	add	r8, r0
 8000aaa:	1864      	adds	r4, r4, r1
 8000aac:	428c      	cmp	r4, r1
 8000aae:	41bf      	sbcs	r7, r7
 8000ab0:	427f      	negs	r7, r7
 8000ab2:	464e      	mov	r6, r9
 8000ab4:	4447      	add	r7, r8
 8000ab6:	e7a6      	b.n	8000a06 <__aeabi_dadd+0x27e>
 8000ab8:	4642      	mov	r2, r8
 8000aba:	430a      	orrs	r2, r1
 8000abc:	0011      	movs	r1, r2
 8000abe:	1e4a      	subs	r2, r1, #1
 8000ac0:	4191      	sbcs	r1, r2
 8000ac2:	e6ad      	b.n	8000820 <__aeabi_dadd+0x98>
 8000ac4:	4c0c      	ldr	r4, [pc, #48]	; (8000af8 <__aeabi_dadd+0x370>)
 8000ac6:	1c72      	adds	r2, r6, #1
 8000ac8:	4222      	tst	r2, r4
 8000aca:	d000      	beq.n	8000ace <__aeabi_dadd+0x346>
 8000acc:	e0a1      	b.n	8000c12 <__aeabi_dadd+0x48a>
 8000ace:	0002      	movs	r2, r0
 8000ad0:	431a      	orrs	r2, r3
 8000ad2:	2e00      	cmp	r6, #0
 8000ad4:	d000      	beq.n	8000ad8 <__aeabi_dadd+0x350>
 8000ad6:	e0fa      	b.n	8000cce <__aeabi_dadd+0x546>
 8000ad8:	2a00      	cmp	r2, #0
 8000ada:	d100      	bne.n	8000ade <__aeabi_dadd+0x356>
 8000adc:	e145      	b.n	8000d6a <__aeabi_dadd+0x5e2>
 8000ade:	003a      	movs	r2, r7
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	d000      	beq.n	8000ae6 <__aeabi_dadd+0x35e>
 8000ae4:	e146      	b.n	8000d74 <__aeabi_dadd+0x5ec>
 8000ae6:	0742      	lsls	r2, r0, #29
 8000ae8:	08db      	lsrs	r3, r3, #3
 8000aea:	4313      	orrs	r3, r2
 8000aec:	08c0      	lsrs	r0, r0, #3
 8000aee:	e77b      	b.n	80009e8 <__aeabi_dadd+0x260>
 8000af0:	000007ff 	.word	0x000007ff
 8000af4:	ff7fffff 	.word	0xff7fffff
 8000af8:	000007fe 	.word	0x000007fe
 8000afc:	4647      	mov	r7, r8
 8000afe:	1a5c      	subs	r4, r3, r1
 8000b00:	1bc2      	subs	r2, r0, r7
 8000b02:	42a3      	cmp	r3, r4
 8000b04:	41bf      	sbcs	r7, r7
 8000b06:	427f      	negs	r7, r7
 8000b08:	46b9      	mov	r9, r7
 8000b0a:	0017      	movs	r7, r2
 8000b0c:	464a      	mov	r2, r9
 8000b0e:	1abf      	subs	r7, r7, r2
 8000b10:	023a      	lsls	r2, r7, #8
 8000b12:	d500      	bpl.n	8000b16 <__aeabi_dadd+0x38e>
 8000b14:	e08d      	b.n	8000c32 <__aeabi_dadd+0x4aa>
 8000b16:	0023      	movs	r3, r4
 8000b18:	433b      	orrs	r3, r7
 8000b1a:	d000      	beq.n	8000b1e <__aeabi_dadd+0x396>
 8000b1c:	e68a      	b.n	8000834 <__aeabi_dadd+0xac>
 8000b1e:	2000      	movs	r0, #0
 8000b20:	2500      	movs	r5, #0
 8000b22:	e761      	b.n	80009e8 <__aeabi_dadd+0x260>
 8000b24:	4cb4      	ldr	r4, [pc, #720]	; (8000df8 <__aeabi_dadd+0x670>)
 8000b26:	45a1      	cmp	r9, r4
 8000b28:	d100      	bne.n	8000b2c <__aeabi_dadd+0x3a4>
 8000b2a:	e0ad      	b.n	8000c88 <__aeabi_dadd+0x500>
 8000b2c:	2480      	movs	r4, #128	; 0x80
 8000b2e:	0424      	lsls	r4, r4, #16
 8000b30:	4320      	orrs	r0, r4
 8000b32:	4664      	mov	r4, ip
 8000b34:	2c38      	cmp	r4, #56	; 0x38
 8000b36:	dc3d      	bgt.n	8000bb4 <__aeabi_dadd+0x42c>
 8000b38:	4662      	mov	r2, ip
 8000b3a:	2c1f      	cmp	r4, #31
 8000b3c:	dd00      	ble.n	8000b40 <__aeabi_dadd+0x3b8>
 8000b3e:	e0b7      	b.n	8000cb0 <__aeabi_dadd+0x528>
 8000b40:	2520      	movs	r5, #32
 8000b42:	001e      	movs	r6, r3
 8000b44:	1b2d      	subs	r5, r5, r4
 8000b46:	0004      	movs	r4, r0
 8000b48:	40ab      	lsls	r3, r5
 8000b4a:	40ac      	lsls	r4, r5
 8000b4c:	40d6      	lsrs	r6, r2
 8000b4e:	40d0      	lsrs	r0, r2
 8000b50:	4642      	mov	r2, r8
 8000b52:	1e5d      	subs	r5, r3, #1
 8000b54:	41ab      	sbcs	r3, r5
 8000b56:	4334      	orrs	r4, r6
 8000b58:	1a12      	subs	r2, r2, r0
 8000b5a:	4690      	mov	r8, r2
 8000b5c:	4323      	orrs	r3, r4
 8000b5e:	e02c      	b.n	8000bba <__aeabi_dadd+0x432>
 8000b60:	0742      	lsls	r2, r0, #29
 8000b62:	08db      	lsrs	r3, r3, #3
 8000b64:	4313      	orrs	r3, r2
 8000b66:	08c0      	lsrs	r0, r0, #3
 8000b68:	e73b      	b.n	80009e2 <__aeabi_dadd+0x25a>
 8000b6a:	185c      	adds	r4, r3, r1
 8000b6c:	429c      	cmp	r4, r3
 8000b6e:	419b      	sbcs	r3, r3
 8000b70:	4440      	add	r0, r8
 8000b72:	425b      	negs	r3, r3
 8000b74:	18c7      	adds	r7, r0, r3
 8000b76:	2601      	movs	r6, #1
 8000b78:	023b      	lsls	r3, r7, #8
 8000b7a:	d400      	bmi.n	8000b7e <__aeabi_dadd+0x3f6>
 8000b7c:	e729      	b.n	80009d2 <__aeabi_dadd+0x24a>
 8000b7e:	2602      	movs	r6, #2
 8000b80:	4a9e      	ldr	r2, [pc, #632]	; (8000dfc <__aeabi_dadd+0x674>)
 8000b82:	0863      	lsrs	r3, r4, #1
 8000b84:	4017      	ands	r7, r2
 8000b86:	2201      	movs	r2, #1
 8000b88:	4014      	ands	r4, r2
 8000b8a:	431c      	orrs	r4, r3
 8000b8c:	07fb      	lsls	r3, r7, #31
 8000b8e:	431c      	orrs	r4, r3
 8000b90:	087f      	lsrs	r7, r7, #1
 8000b92:	e673      	b.n	800087c <__aeabi_dadd+0xf4>
 8000b94:	4644      	mov	r4, r8
 8000b96:	3a20      	subs	r2, #32
 8000b98:	40d4      	lsrs	r4, r2
 8000b9a:	4662      	mov	r2, ip
 8000b9c:	2a20      	cmp	r2, #32
 8000b9e:	d005      	beq.n	8000bac <__aeabi_dadd+0x424>
 8000ba0:	4667      	mov	r7, ip
 8000ba2:	2240      	movs	r2, #64	; 0x40
 8000ba4:	1bd2      	subs	r2, r2, r7
 8000ba6:	4647      	mov	r7, r8
 8000ba8:	4097      	lsls	r7, r2
 8000baa:	4339      	orrs	r1, r7
 8000bac:	1e4a      	subs	r2, r1, #1
 8000bae:	4191      	sbcs	r1, r2
 8000bb0:	4321      	orrs	r1, r4
 8000bb2:	e635      	b.n	8000820 <__aeabi_dadd+0x98>
 8000bb4:	4303      	orrs	r3, r0
 8000bb6:	1e58      	subs	r0, r3, #1
 8000bb8:	4183      	sbcs	r3, r0
 8000bba:	1acc      	subs	r4, r1, r3
 8000bbc:	42a1      	cmp	r1, r4
 8000bbe:	41bf      	sbcs	r7, r7
 8000bc0:	4643      	mov	r3, r8
 8000bc2:	427f      	negs	r7, r7
 8000bc4:	4655      	mov	r5, sl
 8000bc6:	464e      	mov	r6, r9
 8000bc8:	1bdf      	subs	r7, r3, r7
 8000bca:	e62e      	b.n	800082a <__aeabi_dadd+0xa2>
 8000bcc:	0002      	movs	r2, r0
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_dadd+0x44c>
 8000bd2:	e0bd      	b.n	8000d50 <__aeabi_dadd+0x5c8>
 8000bd4:	4662      	mov	r2, ip
 8000bd6:	4664      	mov	r4, ip
 8000bd8:	3a01      	subs	r2, #1
 8000bda:	2c01      	cmp	r4, #1
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_dadd+0x458>
 8000bde:	e0e5      	b.n	8000dac <__aeabi_dadd+0x624>
 8000be0:	4c85      	ldr	r4, [pc, #532]	; (8000df8 <__aeabi_dadd+0x670>)
 8000be2:	45a4      	cmp	ip, r4
 8000be4:	d058      	beq.n	8000c98 <__aeabi_dadd+0x510>
 8000be6:	4694      	mov	ip, r2
 8000be8:	e749      	b.n	8000a7e <__aeabi_dadd+0x2f6>
 8000bea:	4664      	mov	r4, ip
 8000bec:	2220      	movs	r2, #32
 8000bee:	1b12      	subs	r2, r2, r4
 8000bf0:	4644      	mov	r4, r8
 8000bf2:	4094      	lsls	r4, r2
 8000bf4:	000f      	movs	r7, r1
 8000bf6:	46a1      	mov	r9, r4
 8000bf8:	4664      	mov	r4, ip
 8000bfa:	4091      	lsls	r1, r2
 8000bfc:	40e7      	lsrs	r7, r4
 8000bfe:	464c      	mov	r4, r9
 8000c00:	1e4a      	subs	r2, r1, #1
 8000c02:	4191      	sbcs	r1, r2
 8000c04:	433c      	orrs	r4, r7
 8000c06:	4642      	mov	r2, r8
 8000c08:	430c      	orrs	r4, r1
 8000c0a:	4661      	mov	r1, ip
 8000c0c:	40ca      	lsrs	r2, r1
 8000c0e:	1880      	adds	r0, r0, r2
 8000c10:	e6f4      	b.n	80009fc <__aeabi_dadd+0x274>
 8000c12:	4c79      	ldr	r4, [pc, #484]	; (8000df8 <__aeabi_dadd+0x670>)
 8000c14:	42a2      	cmp	r2, r4
 8000c16:	d100      	bne.n	8000c1a <__aeabi_dadd+0x492>
 8000c18:	e6fd      	b.n	8000a16 <__aeabi_dadd+0x28e>
 8000c1a:	1859      	adds	r1, r3, r1
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	419b      	sbcs	r3, r3
 8000c20:	4440      	add	r0, r8
 8000c22:	425f      	negs	r7, r3
 8000c24:	19c7      	adds	r7, r0, r7
 8000c26:	07fc      	lsls	r4, r7, #31
 8000c28:	0849      	lsrs	r1, r1, #1
 8000c2a:	0016      	movs	r6, r2
 8000c2c:	430c      	orrs	r4, r1
 8000c2e:	087f      	lsrs	r7, r7, #1
 8000c30:	e6cf      	b.n	80009d2 <__aeabi_dadd+0x24a>
 8000c32:	1acc      	subs	r4, r1, r3
 8000c34:	42a1      	cmp	r1, r4
 8000c36:	41bf      	sbcs	r7, r7
 8000c38:	4643      	mov	r3, r8
 8000c3a:	427f      	negs	r7, r7
 8000c3c:	1a18      	subs	r0, r3, r0
 8000c3e:	4655      	mov	r5, sl
 8000c40:	1bc7      	subs	r7, r0, r7
 8000c42:	e5f7      	b.n	8000834 <__aeabi_dadd+0xac>
 8000c44:	08c9      	lsrs	r1, r1, #3
 8000c46:	077b      	lsls	r3, r7, #29
 8000c48:	4655      	mov	r5, sl
 8000c4a:	430b      	orrs	r3, r1
 8000c4c:	08f8      	lsrs	r0, r7, #3
 8000c4e:	e6c8      	b.n	80009e2 <__aeabi_dadd+0x25a>
 8000c50:	2c00      	cmp	r4, #0
 8000c52:	d000      	beq.n	8000c56 <__aeabi_dadd+0x4ce>
 8000c54:	e081      	b.n	8000d5a <__aeabi_dadd+0x5d2>
 8000c56:	4643      	mov	r3, r8
 8000c58:	430b      	orrs	r3, r1
 8000c5a:	d115      	bne.n	8000c88 <__aeabi_dadd+0x500>
 8000c5c:	2080      	movs	r0, #128	; 0x80
 8000c5e:	2500      	movs	r5, #0
 8000c60:	0300      	lsls	r0, r0, #12
 8000c62:	e6e3      	b.n	8000a2c <__aeabi_dadd+0x2a4>
 8000c64:	1a5c      	subs	r4, r3, r1
 8000c66:	42a3      	cmp	r3, r4
 8000c68:	419b      	sbcs	r3, r3
 8000c6a:	1bc7      	subs	r7, r0, r7
 8000c6c:	425b      	negs	r3, r3
 8000c6e:	2601      	movs	r6, #1
 8000c70:	1aff      	subs	r7, r7, r3
 8000c72:	e5da      	b.n	800082a <__aeabi_dadd+0xa2>
 8000c74:	0742      	lsls	r2, r0, #29
 8000c76:	08db      	lsrs	r3, r3, #3
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	08c0      	lsrs	r0, r0, #3
 8000c7c:	e6d2      	b.n	8000a24 <__aeabi_dadd+0x29c>
 8000c7e:	0742      	lsls	r2, r0, #29
 8000c80:	08db      	lsrs	r3, r3, #3
 8000c82:	4313      	orrs	r3, r2
 8000c84:	08c0      	lsrs	r0, r0, #3
 8000c86:	e6ac      	b.n	80009e2 <__aeabi_dadd+0x25a>
 8000c88:	4643      	mov	r3, r8
 8000c8a:	4642      	mov	r2, r8
 8000c8c:	08c9      	lsrs	r1, r1, #3
 8000c8e:	075b      	lsls	r3, r3, #29
 8000c90:	4655      	mov	r5, sl
 8000c92:	430b      	orrs	r3, r1
 8000c94:	08d0      	lsrs	r0, r2, #3
 8000c96:	e6c5      	b.n	8000a24 <__aeabi_dadd+0x29c>
 8000c98:	4643      	mov	r3, r8
 8000c9a:	4642      	mov	r2, r8
 8000c9c:	075b      	lsls	r3, r3, #29
 8000c9e:	08c9      	lsrs	r1, r1, #3
 8000ca0:	430b      	orrs	r3, r1
 8000ca2:	08d0      	lsrs	r0, r2, #3
 8000ca4:	e6be      	b.n	8000a24 <__aeabi_dadd+0x29c>
 8000ca6:	4303      	orrs	r3, r0
 8000ca8:	001c      	movs	r4, r3
 8000caa:	1e63      	subs	r3, r4, #1
 8000cac:	419c      	sbcs	r4, r3
 8000cae:	e6fc      	b.n	8000aaa <__aeabi_dadd+0x322>
 8000cb0:	0002      	movs	r2, r0
 8000cb2:	3c20      	subs	r4, #32
 8000cb4:	40e2      	lsrs	r2, r4
 8000cb6:	0014      	movs	r4, r2
 8000cb8:	4662      	mov	r2, ip
 8000cba:	2a20      	cmp	r2, #32
 8000cbc:	d003      	beq.n	8000cc6 <__aeabi_dadd+0x53e>
 8000cbe:	2540      	movs	r5, #64	; 0x40
 8000cc0:	1aad      	subs	r5, r5, r2
 8000cc2:	40a8      	lsls	r0, r5
 8000cc4:	4303      	orrs	r3, r0
 8000cc6:	1e58      	subs	r0, r3, #1
 8000cc8:	4183      	sbcs	r3, r0
 8000cca:	4323      	orrs	r3, r4
 8000ccc:	e775      	b.n	8000bba <__aeabi_dadd+0x432>
 8000cce:	2a00      	cmp	r2, #0
 8000cd0:	d0e2      	beq.n	8000c98 <__aeabi_dadd+0x510>
 8000cd2:	003a      	movs	r2, r7
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	d0cd      	beq.n	8000c74 <__aeabi_dadd+0x4ec>
 8000cd8:	0742      	lsls	r2, r0, #29
 8000cda:	08db      	lsrs	r3, r3, #3
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	2280      	movs	r2, #128	; 0x80
 8000ce0:	08c0      	lsrs	r0, r0, #3
 8000ce2:	0312      	lsls	r2, r2, #12
 8000ce4:	4210      	tst	r0, r2
 8000ce6:	d006      	beq.n	8000cf6 <__aeabi_dadd+0x56e>
 8000ce8:	08fc      	lsrs	r4, r7, #3
 8000cea:	4214      	tst	r4, r2
 8000cec:	d103      	bne.n	8000cf6 <__aeabi_dadd+0x56e>
 8000cee:	0020      	movs	r0, r4
 8000cf0:	08cb      	lsrs	r3, r1, #3
 8000cf2:	077a      	lsls	r2, r7, #29
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	0f5a      	lsrs	r2, r3, #29
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	0752      	lsls	r2, r2, #29
 8000cfc:	08db      	lsrs	r3, r3, #3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	e690      	b.n	8000a24 <__aeabi_dadd+0x29c>
 8000d02:	4643      	mov	r3, r8
 8000d04:	430b      	orrs	r3, r1
 8000d06:	d100      	bne.n	8000d0a <__aeabi_dadd+0x582>
 8000d08:	e709      	b.n	8000b1e <__aeabi_dadd+0x396>
 8000d0a:	4643      	mov	r3, r8
 8000d0c:	4642      	mov	r2, r8
 8000d0e:	08c9      	lsrs	r1, r1, #3
 8000d10:	075b      	lsls	r3, r3, #29
 8000d12:	4655      	mov	r5, sl
 8000d14:	430b      	orrs	r3, r1
 8000d16:	08d0      	lsrs	r0, r2, #3
 8000d18:	e666      	b.n	80009e8 <__aeabi_dadd+0x260>
 8000d1a:	1acc      	subs	r4, r1, r3
 8000d1c:	42a1      	cmp	r1, r4
 8000d1e:	4189      	sbcs	r1, r1
 8000d20:	1a3f      	subs	r7, r7, r0
 8000d22:	4249      	negs	r1, r1
 8000d24:	4655      	mov	r5, sl
 8000d26:	2601      	movs	r6, #1
 8000d28:	1a7f      	subs	r7, r7, r1
 8000d2a:	e57e      	b.n	800082a <__aeabi_dadd+0xa2>
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	1a5c      	subs	r4, r3, r1
 8000d30:	1a87      	subs	r7, r0, r2
 8000d32:	42a3      	cmp	r3, r4
 8000d34:	4192      	sbcs	r2, r2
 8000d36:	4252      	negs	r2, r2
 8000d38:	1abf      	subs	r7, r7, r2
 8000d3a:	023a      	lsls	r2, r7, #8
 8000d3c:	d53d      	bpl.n	8000dba <__aeabi_dadd+0x632>
 8000d3e:	1acc      	subs	r4, r1, r3
 8000d40:	42a1      	cmp	r1, r4
 8000d42:	4189      	sbcs	r1, r1
 8000d44:	4643      	mov	r3, r8
 8000d46:	4249      	negs	r1, r1
 8000d48:	1a1f      	subs	r7, r3, r0
 8000d4a:	4655      	mov	r5, sl
 8000d4c:	1a7f      	subs	r7, r7, r1
 8000d4e:	e595      	b.n	800087c <__aeabi_dadd+0xf4>
 8000d50:	077b      	lsls	r3, r7, #29
 8000d52:	08c9      	lsrs	r1, r1, #3
 8000d54:	430b      	orrs	r3, r1
 8000d56:	08f8      	lsrs	r0, r7, #3
 8000d58:	e643      	b.n	80009e2 <__aeabi_dadd+0x25a>
 8000d5a:	4644      	mov	r4, r8
 8000d5c:	08db      	lsrs	r3, r3, #3
 8000d5e:	430c      	orrs	r4, r1
 8000d60:	d130      	bne.n	8000dc4 <__aeabi_dadd+0x63c>
 8000d62:	0742      	lsls	r2, r0, #29
 8000d64:	4313      	orrs	r3, r2
 8000d66:	08c0      	lsrs	r0, r0, #3
 8000d68:	e65c      	b.n	8000a24 <__aeabi_dadd+0x29c>
 8000d6a:	077b      	lsls	r3, r7, #29
 8000d6c:	08c9      	lsrs	r1, r1, #3
 8000d6e:	430b      	orrs	r3, r1
 8000d70:	08f8      	lsrs	r0, r7, #3
 8000d72:	e639      	b.n	80009e8 <__aeabi_dadd+0x260>
 8000d74:	185c      	adds	r4, r3, r1
 8000d76:	429c      	cmp	r4, r3
 8000d78:	419b      	sbcs	r3, r3
 8000d7a:	4440      	add	r0, r8
 8000d7c:	425b      	negs	r3, r3
 8000d7e:	18c7      	adds	r7, r0, r3
 8000d80:	023b      	lsls	r3, r7, #8
 8000d82:	d400      	bmi.n	8000d86 <__aeabi_dadd+0x5fe>
 8000d84:	e625      	b.n	80009d2 <__aeabi_dadd+0x24a>
 8000d86:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <__aeabi_dadd+0x674>)
 8000d88:	2601      	movs	r6, #1
 8000d8a:	401f      	ands	r7, r3
 8000d8c:	e621      	b.n	80009d2 <__aeabi_dadd+0x24a>
 8000d8e:	0004      	movs	r4, r0
 8000d90:	3a20      	subs	r2, #32
 8000d92:	40d4      	lsrs	r4, r2
 8000d94:	4662      	mov	r2, ip
 8000d96:	2a20      	cmp	r2, #32
 8000d98:	d004      	beq.n	8000da4 <__aeabi_dadd+0x61c>
 8000d9a:	2240      	movs	r2, #64	; 0x40
 8000d9c:	4666      	mov	r6, ip
 8000d9e:	1b92      	subs	r2, r2, r6
 8000da0:	4090      	lsls	r0, r2
 8000da2:	4303      	orrs	r3, r0
 8000da4:	1e5a      	subs	r2, r3, #1
 8000da6:	4193      	sbcs	r3, r2
 8000da8:	431c      	orrs	r4, r3
 8000daa:	e67e      	b.n	8000aaa <__aeabi_dadd+0x322>
 8000dac:	185c      	adds	r4, r3, r1
 8000dae:	428c      	cmp	r4, r1
 8000db0:	4189      	sbcs	r1, r1
 8000db2:	4440      	add	r0, r8
 8000db4:	4249      	negs	r1, r1
 8000db6:	1847      	adds	r7, r0, r1
 8000db8:	e6dd      	b.n	8000b76 <__aeabi_dadd+0x3ee>
 8000dba:	0023      	movs	r3, r4
 8000dbc:	433b      	orrs	r3, r7
 8000dbe:	d100      	bne.n	8000dc2 <__aeabi_dadd+0x63a>
 8000dc0:	e6ad      	b.n	8000b1e <__aeabi_dadd+0x396>
 8000dc2:	e606      	b.n	80009d2 <__aeabi_dadd+0x24a>
 8000dc4:	0744      	lsls	r4, r0, #29
 8000dc6:	4323      	orrs	r3, r4
 8000dc8:	2480      	movs	r4, #128	; 0x80
 8000dca:	08c0      	lsrs	r0, r0, #3
 8000dcc:	0324      	lsls	r4, r4, #12
 8000dce:	4220      	tst	r0, r4
 8000dd0:	d008      	beq.n	8000de4 <__aeabi_dadd+0x65c>
 8000dd2:	4642      	mov	r2, r8
 8000dd4:	08d6      	lsrs	r6, r2, #3
 8000dd6:	4226      	tst	r6, r4
 8000dd8:	d104      	bne.n	8000de4 <__aeabi_dadd+0x65c>
 8000dda:	4655      	mov	r5, sl
 8000ddc:	0030      	movs	r0, r6
 8000dde:	08cb      	lsrs	r3, r1, #3
 8000de0:	0751      	lsls	r1, r2, #29
 8000de2:	430b      	orrs	r3, r1
 8000de4:	0f5a      	lsrs	r2, r3, #29
 8000de6:	00db      	lsls	r3, r3, #3
 8000de8:	08db      	lsrs	r3, r3, #3
 8000dea:	0752      	lsls	r2, r2, #29
 8000dec:	4313      	orrs	r3, r2
 8000dee:	e619      	b.n	8000a24 <__aeabi_dadd+0x29c>
 8000df0:	2300      	movs	r3, #0
 8000df2:	4a01      	ldr	r2, [pc, #4]	; (8000df8 <__aeabi_dadd+0x670>)
 8000df4:	001f      	movs	r7, r3
 8000df6:	e55e      	b.n	80008b6 <__aeabi_dadd+0x12e>
 8000df8:	000007ff 	.word	0x000007ff
 8000dfc:	ff7fffff 	.word	0xff7fffff

08000e00 <__aeabi_ddiv>:
 8000e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e02:	4657      	mov	r7, sl
 8000e04:	464e      	mov	r6, r9
 8000e06:	4645      	mov	r5, r8
 8000e08:	46de      	mov	lr, fp
 8000e0a:	b5e0      	push	{r5, r6, r7, lr}
 8000e0c:	4681      	mov	r9, r0
 8000e0e:	0005      	movs	r5, r0
 8000e10:	030c      	lsls	r4, r1, #12
 8000e12:	0048      	lsls	r0, r1, #1
 8000e14:	4692      	mov	sl, r2
 8000e16:	001f      	movs	r7, r3
 8000e18:	b085      	sub	sp, #20
 8000e1a:	0b24      	lsrs	r4, r4, #12
 8000e1c:	0d40      	lsrs	r0, r0, #21
 8000e1e:	0fce      	lsrs	r6, r1, #31
 8000e20:	2800      	cmp	r0, #0
 8000e22:	d100      	bne.n	8000e26 <__aeabi_ddiv+0x26>
 8000e24:	e156      	b.n	80010d4 <__aeabi_ddiv+0x2d4>
 8000e26:	4bd4      	ldr	r3, [pc, #848]	; (8001178 <__aeabi_ddiv+0x378>)
 8000e28:	4298      	cmp	r0, r3
 8000e2a:	d100      	bne.n	8000e2e <__aeabi_ddiv+0x2e>
 8000e2c:	e172      	b.n	8001114 <__aeabi_ddiv+0x314>
 8000e2e:	0f6b      	lsrs	r3, r5, #29
 8000e30:	00e4      	lsls	r4, r4, #3
 8000e32:	431c      	orrs	r4, r3
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	041b      	lsls	r3, r3, #16
 8000e38:	4323      	orrs	r3, r4
 8000e3a:	4698      	mov	r8, r3
 8000e3c:	4bcf      	ldr	r3, [pc, #828]	; (800117c <__aeabi_ddiv+0x37c>)
 8000e3e:	00ed      	lsls	r5, r5, #3
 8000e40:	469b      	mov	fp, r3
 8000e42:	2300      	movs	r3, #0
 8000e44:	4699      	mov	r9, r3
 8000e46:	4483      	add	fp, r0
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	033c      	lsls	r4, r7, #12
 8000e4c:	007b      	lsls	r3, r7, #1
 8000e4e:	4650      	mov	r0, sl
 8000e50:	0b24      	lsrs	r4, r4, #12
 8000e52:	0d5b      	lsrs	r3, r3, #21
 8000e54:	0fff      	lsrs	r7, r7, #31
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d100      	bne.n	8000e5c <__aeabi_ddiv+0x5c>
 8000e5a:	e11f      	b.n	800109c <__aeabi_ddiv+0x29c>
 8000e5c:	4ac6      	ldr	r2, [pc, #792]	; (8001178 <__aeabi_ddiv+0x378>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d100      	bne.n	8000e64 <__aeabi_ddiv+0x64>
 8000e62:	e162      	b.n	800112a <__aeabi_ddiv+0x32a>
 8000e64:	49c5      	ldr	r1, [pc, #788]	; (800117c <__aeabi_ddiv+0x37c>)
 8000e66:	0f42      	lsrs	r2, r0, #29
 8000e68:	468c      	mov	ip, r1
 8000e6a:	00e4      	lsls	r4, r4, #3
 8000e6c:	4659      	mov	r1, fp
 8000e6e:	4314      	orrs	r4, r2
 8000e70:	2280      	movs	r2, #128	; 0x80
 8000e72:	4463      	add	r3, ip
 8000e74:	0412      	lsls	r2, r2, #16
 8000e76:	1acb      	subs	r3, r1, r3
 8000e78:	4314      	orrs	r4, r2
 8000e7a:	469b      	mov	fp, r3
 8000e7c:	00c2      	lsls	r2, r0, #3
 8000e7e:	2000      	movs	r0, #0
 8000e80:	0033      	movs	r3, r6
 8000e82:	407b      	eors	r3, r7
 8000e84:	469a      	mov	sl, r3
 8000e86:	464b      	mov	r3, r9
 8000e88:	2b0f      	cmp	r3, #15
 8000e8a:	d827      	bhi.n	8000edc <__aeabi_ddiv+0xdc>
 8000e8c:	49bc      	ldr	r1, [pc, #752]	; (8001180 <__aeabi_ddiv+0x380>)
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	58cb      	ldr	r3, [r1, r3]
 8000e92:	469f      	mov	pc, r3
 8000e94:	46b2      	mov	sl, r6
 8000e96:	9b00      	ldr	r3, [sp, #0]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d016      	beq.n	8000eca <__aeabi_ddiv+0xca>
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_ddiv+0xa2>
 8000ea0:	e28e      	b.n	80013c0 <__aeabi_ddiv+0x5c0>
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d000      	beq.n	8000ea8 <__aeabi_ddiv+0xa8>
 8000ea6:	e0d9      	b.n	800105c <__aeabi_ddiv+0x25c>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	2400      	movs	r4, #0
 8000eac:	2500      	movs	r5, #0
 8000eae:	4652      	mov	r2, sl
 8000eb0:	051b      	lsls	r3, r3, #20
 8000eb2:	4323      	orrs	r3, r4
 8000eb4:	07d2      	lsls	r2, r2, #31
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	0028      	movs	r0, r5
 8000eba:	0019      	movs	r1, r3
 8000ebc:	b005      	add	sp, #20
 8000ebe:	bcf0      	pop	{r4, r5, r6, r7}
 8000ec0:	46bb      	mov	fp, r7
 8000ec2:	46b2      	mov	sl, r6
 8000ec4:	46a9      	mov	r9, r5
 8000ec6:	46a0      	mov	r8, r4
 8000ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eca:	2400      	movs	r4, #0
 8000ecc:	2500      	movs	r5, #0
 8000ece:	4baa      	ldr	r3, [pc, #680]	; (8001178 <__aeabi_ddiv+0x378>)
 8000ed0:	e7ed      	b.n	8000eae <__aeabi_ddiv+0xae>
 8000ed2:	46ba      	mov	sl, r7
 8000ed4:	46a0      	mov	r8, r4
 8000ed6:	0015      	movs	r5, r2
 8000ed8:	9000      	str	r0, [sp, #0]
 8000eda:	e7dc      	b.n	8000e96 <__aeabi_ddiv+0x96>
 8000edc:	4544      	cmp	r4, r8
 8000ede:	d200      	bcs.n	8000ee2 <__aeabi_ddiv+0xe2>
 8000ee0:	e1c7      	b.n	8001272 <__aeabi_ddiv+0x472>
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_ddiv+0xe6>
 8000ee4:	e1c2      	b.n	800126c <__aeabi_ddiv+0x46c>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	425b      	negs	r3, r3
 8000eea:	469c      	mov	ip, r3
 8000eec:	002e      	movs	r6, r5
 8000eee:	4640      	mov	r0, r8
 8000ef0:	2500      	movs	r5, #0
 8000ef2:	44e3      	add	fp, ip
 8000ef4:	0223      	lsls	r3, r4, #8
 8000ef6:	0e14      	lsrs	r4, r2, #24
 8000ef8:	431c      	orrs	r4, r3
 8000efa:	0c1b      	lsrs	r3, r3, #16
 8000efc:	4699      	mov	r9, r3
 8000efe:	0423      	lsls	r3, r4, #16
 8000f00:	0c1f      	lsrs	r7, r3, #16
 8000f02:	0212      	lsls	r2, r2, #8
 8000f04:	4649      	mov	r1, r9
 8000f06:	9200      	str	r2, [sp, #0]
 8000f08:	9701      	str	r7, [sp, #4]
 8000f0a:	f7ff f997 	bl	800023c <__aeabi_uidivmod>
 8000f0e:	0002      	movs	r2, r0
 8000f10:	437a      	muls	r2, r7
 8000f12:	040b      	lsls	r3, r1, #16
 8000f14:	0c31      	lsrs	r1, r6, #16
 8000f16:	4680      	mov	r8, r0
 8000f18:	4319      	orrs	r1, r3
 8000f1a:	428a      	cmp	r2, r1
 8000f1c:	d907      	bls.n	8000f2e <__aeabi_ddiv+0x12e>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	425b      	negs	r3, r3
 8000f22:	469c      	mov	ip, r3
 8000f24:	1909      	adds	r1, r1, r4
 8000f26:	44e0      	add	r8, ip
 8000f28:	428c      	cmp	r4, r1
 8000f2a:	d800      	bhi.n	8000f2e <__aeabi_ddiv+0x12e>
 8000f2c:	e207      	b.n	800133e <__aeabi_ddiv+0x53e>
 8000f2e:	1a88      	subs	r0, r1, r2
 8000f30:	4649      	mov	r1, r9
 8000f32:	f7ff f983 	bl	800023c <__aeabi_uidivmod>
 8000f36:	0409      	lsls	r1, r1, #16
 8000f38:	468c      	mov	ip, r1
 8000f3a:	0431      	lsls	r1, r6, #16
 8000f3c:	4666      	mov	r6, ip
 8000f3e:	9a01      	ldr	r2, [sp, #4]
 8000f40:	0c09      	lsrs	r1, r1, #16
 8000f42:	4342      	muls	r2, r0
 8000f44:	0003      	movs	r3, r0
 8000f46:	4331      	orrs	r1, r6
 8000f48:	428a      	cmp	r2, r1
 8000f4a:	d904      	bls.n	8000f56 <__aeabi_ddiv+0x156>
 8000f4c:	1909      	adds	r1, r1, r4
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	428c      	cmp	r4, r1
 8000f52:	d800      	bhi.n	8000f56 <__aeabi_ddiv+0x156>
 8000f54:	e1ed      	b.n	8001332 <__aeabi_ddiv+0x532>
 8000f56:	1a88      	subs	r0, r1, r2
 8000f58:	4642      	mov	r2, r8
 8000f5a:	0412      	lsls	r2, r2, #16
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	4690      	mov	r8, r2
 8000f60:	4641      	mov	r1, r8
 8000f62:	9b00      	ldr	r3, [sp, #0]
 8000f64:	040e      	lsls	r6, r1, #16
 8000f66:	0c1b      	lsrs	r3, r3, #16
 8000f68:	001f      	movs	r7, r3
 8000f6a:	9302      	str	r3, [sp, #8]
 8000f6c:	9b00      	ldr	r3, [sp, #0]
 8000f6e:	0c36      	lsrs	r6, r6, #16
 8000f70:	041b      	lsls	r3, r3, #16
 8000f72:	0c19      	lsrs	r1, r3, #16
 8000f74:	000b      	movs	r3, r1
 8000f76:	4373      	muls	r3, r6
 8000f78:	0c12      	lsrs	r2, r2, #16
 8000f7a:	437e      	muls	r6, r7
 8000f7c:	9103      	str	r1, [sp, #12]
 8000f7e:	4351      	muls	r1, r2
 8000f80:	437a      	muls	r2, r7
 8000f82:	0c1f      	lsrs	r7, r3, #16
 8000f84:	46bc      	mov	ip, r7
 8000f86:	1876      	adds	r6, r6, r1
 8000f88:	4466      	add	r6, ip
 8000f8a:	42b1      	cmp	r1, r6
 8000f8c:	d903      	bls.n	8000f96 <__aeabi_ddiv+0x196>
 8000f8e:	2180      	movs	r1, #128	; 0x80
 8000f90:	0249      	lsls	r1, r1, #9
 8000f92:	468c      	mov	ip, r1
 8000f94:	4462      	add	r2, ip
 8000f96:	0c31      	lsrs	r1, r6, #16
 8000f98:	188a      	adds	r2, r1, r2
 8000f9a:	0431      	lsls	r1, r6, #16
 8000f9c:	041e      	lsls	r6, r3, #16
 8000f9e:	0c36      	lsrs	r6, r6, #16
 8000fa0:	198e      	adds	r6, r1, r6
 8000fa2:	4290      	cmp	r0, r2
 8000fa4:	d302      	bcc.n	8000fac <__aeabi_ddiv+0x1ac>
 8000fa6:	d112      	bne.n	8000fce <__aeabi_ddiv+0x1ce>
 8000fa8:	42b5      	cmp	r5, r6
 8000faa:	d210      	bcs.n	8000fce <__aeabi_ddiv+0x1ce>
 8000fac:	4643      	mov	r3, r8
 8000fae:	1e59      	subs	r1, r3, #1
 8000fb0:	9b00      	ldr	r3, [sp, #0]
 8000fb2:	469c      	mov	ip, r3
 8000fb4:	4465      	add	r5, ip
 8000fb6:	001f      	movs	r7, r3
 8000fb8:	429d      	cmp	r5, r3
 8000fba:	419b      	sbcs	r3, r3
 8000fbc:	425b      	negs	r3, r3
 8000fbe:	191b      	adds	r3, r3, r4
 8000fc0:	18c0      	adds	r0, r0, r3
 8000fc2:	4284      	cmp	r4, r0
 8000fc4:	d200      	bcs.n	8000fc8 <__aeabi_ddiv+0x1c8>
 8000fc6:	e1a0      	b.n	800130a <__aeabi_ddiv+0x50a>
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_ddiv+0x1cc>
 8000fca:	e19b      	b.n	8001304 <__aeabi_ddiv+0x504>
 8000fcc:	4688      	mov	r8, r1
 8000fce:	1bae      	subs	r6, r5, r6
 8000fd0:	42b5      	cmp	r5, r6
 8000fd2:	41ad      	sbcs	r5, r5
 8000fd4:	1a80      	subs	r0, r0, r2
 8000fd6:	426d      	negs	r5, r5
 8000fd8:	1b40      	subs	r0, r0, r5
 8000fda:	4284      	cmp	r4, r0
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_ddiv+0x1e0>
 8000fde:	e1d5      	b.n	800138c <__aeabi_ddiv+0x58c>
 8000fe0:	4649      	mov	r1, r9
 8000fe2:	f7ff f92b 	bl	800023c <__aeabi_uidivmod>
 8000fe6:	9a01      	ldr	r2, [sp, #4]
 8000fe8:	040b      	lsls	r3, r1, #16
 8000fea:	4342      	muls	r2, r0
 8000fec:	0c31      	lsrs	r1, r6, #16
 8000fee:	0005      	movs	r5, r0
 8000ff0:	4319      	orrs	r1, r3
 8000ff2:	428a      	cmp	r2, r1
 8000ff4:	d900      	bls.n	8000ff8 <__aeabi_ddiv+0x1f8>
 8000ff6:	e16c      	b.n	80012d2 <__aeabi_ddiv+0x4d2>
 8000ff8:	1a88      	subs	r0, r1, r2
 8000ffa:	4649      	mov	r1, r9
 8000ffc:	f7ff f91e 	bl	800023c <__aeabi_uidivmod>
 8001000:	9a01      	ldr	r2, [sp, #4]
 8001002:	0436      	lsls	r6, r6, #16
 8001004:	4342      	muls	r2, r0
 8001006:	0409      	lsls	r1, r1, #16
 8001008:	0c36      	lsrs	r6, r6, #16
 800100a:	0003      	movs	r3, r0
 800100c:	430e      	orrs	r6, r1
 800100e:	42b2      	cmp	r2, r6
 8001010:	d900      	bls.n	8001014 <__aeabi_ddiv+0x214>
 8001012:	e153      	b.n	80012bc <__aeabi_ddiv+0x4bc>
 8001014:	9803      	ldr	r0, [sp, #12]
 8001016:	1ab6      	subs	r6, r6, r2
 8001018:	0002      	movs	r2, r0
 800101a:	042d      	lsls	r5, r5, #16
 800101c:	431d      	orrs	r5, r3
 800101e:	9f02      	ldr	r7, [sp, #8]
 8001020:	042b      	lsls	r3, r5, #16
 8001022:	0c1b      	lsrs	r3, r3, #16
 8001024:	435a      	muls	r2, r3
 8001026:	437b      	muls	r3, r7
 8001028:	469c      	mov	ip, r3
 800102a:	0c29      	lsrs	r1, r5, #16
 800102c:	4348      	muls	r0, r1
 800102e:	0c13      	lsrs	r3, r2, #16
 8001030:	4484      	add	ip, r0
 8001032:	4463      	add	r3, ip
 8001034:	4379      	muls	r1, r7
 8001036:	4298      	cmp	r0, r3
 8001038:	d903      	bls.n	8001042 <__aeabi_ddiv+0x242>
 800103a:	2080      	movs	r0, #128	; 0x80
 800103c:	0240      	lsls	r0, r0, #9
 800103e:	4684      	mov	ip, r0
 8001040:	4461      	add	r1, ip
 8001042:	0c18      	lsrs	r0, r3, #16
 8001044:	0412      	lsls	r2, r2, #16
 8001046:	041b      	lsls	r3, r3, #16
 8001048:	0c12      	lsrs	r2, r2, #16
 800104a:	1841      	adds	r1, r0, r1
 800104c:	189b      	adds	r3, r3, r2
 800104e:	428e      	cmp	r6, r1
 8001050:	d200      	bcs.n	8001054 <__aeabi_ddiv+0x254>
 8001052:	e0ff      	b.n	8001254 <__aeabi_ddiv+0x454>
 8001054:	d100      	bne.n	8001058 <__aeabi_ddiv+0x258>
 8001056:	e0fa      	b.n	800124e <__aeabi_ddiv+0x44e>
 8001058:	2301      	movs	r3, #1
 800105a:	431d      	orrs	r5, r3
 800105c:	4a49      	ldr	r2, [pc, #292]	; (8001184 <__aeabi_ddiv+0x384>)
 800105e:	445a      	add	r2, fp
 8001060:	2a00      	cmp	r2, #0
 8001062:	dc00      	bgt.n	8001066 <__aeabi_ddiv+0x266>
 8001064:	e0aa      	b.n	80011bc <__aeabi_ddiv+0x3bc>
 8001066:	076b      	lsls	r3, r5, #29
 8001068:	d000      	beq.n	800106c <__aeabi_ddiv+0x26c>
 800106a:	e13d      	b.n	80012e8 <__aeabi_ddiv+0x4e8>
 800106c:	08ed      	lsrs	r5, r5, #3
 800106e:	4643      	mov	r3, r8
 8001070:	01db      	lsls	r3, r3, #7
 8001072:	d506      	bpl.n	8001082 <__aeabi_ddiv+0x282>
 8001074:	4642      	mov	r2, r8
 8001076:	4b44      	ldr	r3, [pc, #272]	; (8001188 <__aeabi_ddiv+0x388>)
 8001078:	401a      	ands	r2, r3
 800107a:	4690      	mov	r8, r2
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	00d2      	lsls	r2, r2, #3
 8001080:	445a      	add	r2, fp
 8001082:	4b42      	ldr	r3, [pc, #264]	; (800118c <__aeabi_ddiv+0x38c>)
 8001084:	429a      	cmp	r2, r3
 8001086:	dd00      	ble.n	800108a <__aeabi_ddiv+0x28a>
 8001088:	e71f      	b.n	8000eca <__aeabi_ddiv+0xca>
 800108a:	4643      	mov	r3, r8
 800108c:	075b      	lsls	r3, r3, #29
 800108e:	431d      	orrs	r5, r3
 8001090:	4643      	mov	r3, r8
 8001092:	0552      	lsls	r2, r2, #21
 8001094:	025c      	lsls	r4, r3, #9
 8001096:	0b24      	lsrs	r4, r4, #12
 8001098:	0d53      	lsrs	r3, r2, #21
 800109a:	e708      	b.n	8000eae <__aeabi_ddiv+0xae>
 800109c:	4652      	mov	r2, sl
 800109e:	4322      	orrs	r2, r4
 80010a0:	d100      	bne.n	80010a4 <__aeabi_ddiv+0x2a4>
 80010a2:	e07b      	b.n	800119c <__aeabi_ddiv+0x39c>
 80010a4:	2c00      	cmp	r4, #0
 80010a6:	d100      	bne.n	80010aa <__aeabi_ddiv+0x2aa>
 80010a8:	e0fa      	b.n	80012a0 <__aeabi_ddiv+0x4a0>
 80010aa:	0020      	movs	r0, r4
 80010ac:	f001 f99a 	bl	80023e4 <__clzsi2>
 80010b0:	0002      	movs	r2, r0
 80010b2:	3a0b      	subs	r2, #11
 80010b4:	231d      	movs	r3, #29
 80010b6:	0001      	movs	r1, r0
 80010b8:	1a9b      	subs	r3, r3, r2
 80010ba:	4652      	mov	r2, sl
 80010bc:	3908      	subs	r1, #8
 80010be:	40da      	lsrs	r2, r3
 80010c0:	408c      	lsls	r4, r1
 80010c2:	4314      	orrs	r4, r2
 80010c4:	4652      	mov	r2, sl
 80010c6:	408a      	lsls	r2, r1
 80010c8:	4b31      	ldr	r3, [pc, #196]	; (8001190 <__aeabi_ddiv+0x390>)
 80010ca:	4458      	add	r0, fp
 80010cc:	469b      	mov	fp, r3
 80010ce:	4483      	add	fp, r0
 80010d0:	2000      	movs	r0, #0
 80010d2:	e6d5      	b.n	8000e80 <__aeabi_ddiv+0x80>
 80010d4:	464b      	mov	r3, r9
 80010d6:	4323      	orrs	r3, r4
 80010d8:	4698      	mov	r8, r3
 80010da:	d044      	beq.n	8001166 <__aeabi_ddiv+0x366>
 80010dc:	2c00      	cmp	r4, #0
 80010de:	d100      	bne.n	80010e2 <__aeabi_ddiv+0x2e2>
 80010e0:	e0ce      	b.n	8001280 <__aeabi_ddiv+0x480>
 80010e2:	0020      	movs	r0, r4
 80010e4:	f001 f97e 	bl	80023e4 <__clzsi2>
 80010e8:	0001      	movs	r1, r0
 80010ea:	0002      	movs	r2, r0
 80010ec:	390b      	subs	r1, #11
 80010ee:	231d      	movs	r3, #29
 80010f0:	1a5b      	subs	r3, r3, r1
 80010f2:	4649      	mov	r1, r9
 80010f4:	0010      	movs	r0, r2
 80010f6:	40d9      	lsrs	r1, r3
 80010f8:	3808      	subs	r0, #8
 80010fa:	4084      	lsls	r4, r0
 80010fc:	000b      	movs	r3, r1
 80010fe:	464d      	mov	r5, r9
 8001100:	4323      	orrs	r3, r4
 8001102:	4698      	mov	r8, r3
 8001104:	4085      	lsls	r5, r0
 8001106:	4823      	ldr	r0, [pc, #140]	; (8001194 <__aeabi_ddiv+0x394>)
 8001108:	1a83      	subs	r3, r0, r2
 800110a:	469b      	mov	fp, r3
 800110c:	2300      	movs	r3, #0
 800110e:	4699      	mov	r9, r3
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	e69a      	b.n	8000e4a <__aeabi_ddiv+0x4a>
 8001114:	464b      	mov	r3, r9
 8001116:	4323      	orrs	r3, r4
 8001118:	4698      	mov	r8, r3
 800111a:	d11d      	bne.n	8001158 <__aeabi_ddiv+0x358>
 800111c:	2308      	movs	r3, #8
 800111e:	4699      	mov	r9, r3
 8001120:	3b06      	subs	r3, #6
 8001122:	2500      	movs	r5, #0
 8001124:	4683      	mov	fp, r0
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	e68f      	b.n	8000e4a <__aeabi_ddiv+0x4a>
 800112a:	4652      	mov	r2, sl
 800112c:	4322      	orrs	r2, r4
 800112e:	d109      	bne.n	8001144 <__aeabi_ddiv+0x344>
 8001130:	2302      	movs	r3, #2
 8001132:	4649      	mov	r1, r9
 8001134:	4319      	orrs	r1, r3
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <__aeabi_ddiv+0x398>)
 8001138:	4689      	mov	r9, r1
 800113a:	469c      	mov	ip, r3
 800113c:	2400      	movs	r4, #0
 800113e:	2002      	movs	r0, #2
 8001140:	44e3      	add	fp, ip
 8001142:	e69d      	b.n	8000e80 <__aeabi_ddiv+0x80>
 8001144:	2303      	movs	r3, #3
 8001146:	464a      	mov	r2, r9
 8001148:	431a      	orrs	r2, r3
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <__aeabi_ddiv+0x398>)
 800114c:	4691      	mov	r9, r2
 800114e:	469c      	mov	ip, r3
 8001150:	4652      	mov	r2, sl
 8001152:	2003      	movs	r0, #3
 8001154:	44e3      	add	fp, ip
 8001156:	e693      	b.n	8000e80 <__aeabi_ddiv+0x80>
 8001158:	230c      	movs	r3, #12
 800115a:	4699      	mov	r9, r3
 800115c:	3b09      	subs	r3, #9
 800115e:	46a0      	mov	r8, r4
 8001160:	4683      	mov	fp, r0
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	e671      	b.n	8000e4a <__aeabi_ddiv+0x4a>
 8001166:	2304      	movs	r3, #4
 8001168:	4699      	mov	r9, r3
 800116a:	2300      	movs	r3, #0
 800116c:	469b      	mov	fp, r3
 800116e:	3301      	adds	r3, #1
 8001170:	2500      	movs	r5, #0
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	e669      	b.n	8000e4a <__aeabi_ddiv+0x4a>
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	000007ff 	.word	0x000007ff
 800117c:	fffffc01 	.word	0xfffffc01
 8001180:	0800a6e0 	.word	0x0800a6e0
 8001184:	000003ff 	.word	0x000003ff
 8001188:	feffffff 	.word	0xfeffffff
 800118c:	000007fe 	.word	0x000007fe
 8001190:	000003f3 	.word	0x000003f3
 8001194:	fffffc0d 	.word	0xfffffc0d
 8001198:	fffff801 	.word	0xfffff801
 800119c:	4649      	mov	r1, r9
 800119e:	2301      	movs	r3, #1
 80011a0:	4319      	orrs	r1, r3
 80011a2:	4689      	mov	r9, r1
 80011a4:	2400      	movs	r4, #0
 80011a6:	2001      	movs	r0, #1
 80011a8:	e66a      	b.n	8000e80 <__aeabi_ddiv+0x80>
 80011aa:	2300      	movs	r3, #0
 80011ac:	2480      	movs	r4, #128	; 0x80
 80011ae:	469a      	mov	sl, r3
 80011b0:	2500      	movs	r5, #0
 80011b2:	4b8a      	ldr	r3, [pc, #552]	; (80013dc <__aeabi_ddiv+0x5dc>)
 80011b4:	0324      	lsls	r4, r4, #12
 80011b6:	e67a      	b.n	8000eae <__aeabi_ddiv+0xae>
 80011b8:	2501      	movs	r5, #1
 80011ba:	426d      	negs	r5, r5
 80011bc:	2301      	movs	r3, #1
 80011be:	1a9b      	subs	r3, r3, r2
 80011c0:	2b38      	cmp	r3, #56	; 0x38
 80011c2:	dd00      	ble.n	80011c6 <__aeabi_ddiv+0x3c6>
 80011c4:	e670      	b.n	8000ea8 <__aeabi_ddiv+0xa8>
 80011c6:	2b1f      	cmp	r3, #31
 80011c8:	dc00      	bgt.n	80011cc <__aeabi_ddiv+0x3cc>
 80011ca:	e0bf      	b.n	800134c <__aeabi_ddiv+0x54c>
 80011cc:	211f      	movs	r1, #31
 80011ce:	4249      	negs	r1, r1
 80011d0:	1a8a      	subs	r2, r1, r2
 80011d2:	4641      	mov	r1, r8
 80011d4:	40d1      	lsrs	r1, r2
 80011d6:	000a      	movs	r2, r1
 80011d8:	2b20      	cmp	r3, #32
 80011da:	d004      	beq.n	80011e6 <__aeabi_ddiv+0x3e6>
 80011dc:	4641      	mov	r1, r8
 80011de:	4b80      	ldr	r3, [pc, #512]	; (80013e0 <__aeabi_ddiv+0x5e0>)
 80011e0:	445b      	add	r3, fp
 80011e2:	4099      	lsls	r1, r3
 80011e4:	430d      	orrs	r5, r1
 80011e6:	1e6b      	subs	r3, r5, #1
 80011e8:	419d      	sbcs	r5, r3
 80011ea:	2307      	movs	r3, #7
 80011ec:	432a      	orrs	r2, r5
 80011ee:	001d      	movs	r5, r3
 80011f0:	2400      	movs	r4, #0
 80011f2:	4015      	ands	r5, r2
 80011f4:	4213      	tst	r3, r2
 80011f6:	d100      	bne.n	80011fa <__aeabi_ddiv+0x3fa>
 80011f8:	e0d4      	b.n	80013a4 <__aeabi_ddiv+0x5a4>
 80011fa:	210f      	movs	r1, #15
 80011fc:	2300      	movs	r3, #0
 80011fe:	4011      	ands	r1, r2
 8001200:	2904      	cmp	r1, #4
 8001202:	d100      	bne.n	8001206 <__aeabi_ddiv+0x406>
 8001204:	e0cb      	b.n	800139e <__aeabi_ddiv+0x59e>
 8001206:	1d11      	adds	r1, r2, #4
 8001208:	4291      	cmp	r1, r2
 800120a:	4192      	sbcs	r2, r2
 800120c:	4252      	negs	r2, r2
 800120e:	189b      	adds	r3, r3, r2
 8001210:	000a      	movs	r2, r1
 8001212:	0219      	lsls	r1, r3, #8
 8001214:	d400      	bmi.n	8001218 <__aeabi_ddiv+0x418>
 8001216:	e0c2      	b.n	800139e <__aeabi_ddiv+0x59e>
 8001218:	2301      	movs	r3, #1
 800121a:	2400      	movs	r4, #0
 800121c:	2500      	movs	r5, #0
 800121e:	e646      	b.n	8000eae <__aeabi_ddiv+0xae>
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	4641      	mov	r1, r8
 8001224:	031b      	lsls	r3, r3, #12
 8001226:	4219      	tst	r1, r3
 8001228:	d008      	beq.n	800123c <__aeabi_ddiv+0x43c>
 800122a:	421c      	tst	r4, r3
 800122c:	d106      	bne.n	800123c <__aeabi_ddiv+0x43c>
 800122e:	431c      	orrs	r4, r3
 8001230:	0324      	lsls	r4, r4, #12
 8001232:	46ba      	mov	sl, r7
 8001234:	0015      	movs	r5, r2
 8001236:	4b69      	ldr	r3, [pc, #420]	; (80013dc <__aeabi_ddiv+0x5dc>)
 8001238:	0b24      	lsrs	r4, r4, #12
 800123a:	e638      	b.n	8000eae <__aeabi_ddiv+0xae>
 800123c:	2480      	movs	r4, #128	; 0x80
 800123e:	4643      	mov	r3, r8
 8001240:	0324      	lsls	r4, r4, #12
 8001242:	431c      	orrs	r4, r3
 8001244:	0324      	lsls	r4, r4, #12
 8001246:	46b2      	mov	sl, r6
 8001248:	4b64      	ldr	r3, [pc, #400]	; (80013dc <__aeabi_ddiv+0x5dc>)
 800124a:	0b24      	lsrs	r4, r4, #12
 800124c:	e62f      	b.n	8000eae <__aeabi_ddiv+0xae>
 800124e:	2b00      	cmp	r3, #0
 8001250:	d100      	bne.n	8001254 <__aeabi_ddiv+0x454>
 8001252:	e703      	b.n	800105c <__aeabi_ddiv+0x25c>
 8001254:	19a6      	adds	r6, r4, r6
 8001256:	1e68      	subs	r0, r5, #1
 8001258:	42a6      	cmp	r6, r4
 800125a:	d200      	bcs.n	800125e <__aeabi_ddiv+0x45e>
 800125c:	e08d      	b.n	800137a <__aeabi_ddiv+0x57a>
 800125e:	428e      	cmp	r6, r1
 8001260:	d200      	bcs.n	8001264 <__aeabi_ddiv+0x464>
 8001262:	e0a3      	b.n	80013ac <__aeabi_ddiv+0x5ac>
 8001264:	d100      	bne.n	8001268 <__aeabi_ddiv+0x468>
 8001266:	e0b3      	b.n	80013d0 <__aeabi_ddiv+0x5d0>
 8001268:	0005      	movs	r5, r0
 800126a:	e6f5      	b.n	8001058 <__aeabi_ddiv+0x258>
 800126c:	42aa      	cmp	r2, r5
 800126e:	d900      	bls.n	8001272 <__aeabi_ddiv+0x472>
 8001270:	e639      	b.n	8000ee6 <__aeabi_ddiv+0xe6>
 8001272:	4643      	mov	r3, r8
 8001274:	07de      	lsls	r6, r3, #31
 8001276:	0858      	lsrs	r0, r3, #1
 8001278:	086b      	lsrs	r3, r5, #1
 800127a:	431e      	orrs	r6, r3
 800127c:	07ed      	lsls	r5, r5, #31
 800127e:	e639      	b.n	8000ef4 <__aeabi_ddiv+0xf4>
 8001280:	4648      	mov	r0, r9
 8001282:	f001 f8af 	bl	80023e4 <__clzsi2>
 8001286:	0001      	movs	r1, r0
 8001288:	0002      	movs	r2, r0
 800128a:	3115      	adds	r1, #21
 800128c:	3220      	adds	r2, #32
 800128e:	291c      	cmp	r1, #28
 8001290:	dc00      	bgt.n	8001294 <__aeabi_ddiv+0x494>
 8001292:	e72c      	b.n	80010ee <__aeabi_ddiv+0x2ee>
 8001294:	464b      	mov	r3, r9
 8001296:	3808      	subs	r0, #8
 8001298:	4083      	lsls	r3, r0
 800129a:	2500      	movs	r5, #0
 800129c:	4698      	mov	r8, r3
 800129e:	e732      	b.n	8001106 <__aeabi_ddiv+0x306>
 80012a0:	f001 f8a0 	bl	80023e4 <__clzsi2>
 80012a4:	0003      	movs	r3, r0
 80012a6:	001a      	movs	r2, r3
 80012a8:	3215      	adds	r2, #21
 80012aa:	3020      	adds	r0, #32
 80012ac:	2a1c      	cmp	r2, #28
 80012ae:	dc00      	bgt.n	80012b2 <__aeabi_ddiv+0x4b2>
 80012b0:	e700      	b.n	80010b4 <__aeabi_ddiv+0x2b4>
 80012b2:	4654      	mov	r4, sl
 80012b4:	3b08      	subs	r3, #8
 80012b6:	2200      	movs	r2, #0
 80012b8:	409c      	lsls	r4, r3
 80012ba:	e705      	b.n	80010c8 <__aeabi_ddiv+0x2c8>
 80012bc:	1936      	adds	r6, r6, r4
 80012be:	3b01      	subs	r3, #1
 80012c0:	42b4      	cmp	r4, r6
 80012c2:	d900      	bls.n	80012c6 <__aeabi_ddiv+0x4c6>
 80012c4:	e6a6      	b.n	8001014 <__aeabi_ddiv+0x214>
 80012c6:	42b2      	cmp	r2, r6
 80012c8:	d800      	bhi.n	80012cc <__aeabi_ddiv+0x4cc>
 80012ca:	e6a3      	b.n	8001014 <__aeabi_ddiv+0x214>
 80012cc:	1e83      	subs	r3, r0, #2
 80012ce:	1936      	adds	r6, r6, r4
 80012d0:	e6a0      	b.n	8001014 <__aeabi_ddiv+0x214>
 80012d2:	1909      	adds	r1, r1, r4
 80012d4:	3d01      	subs	r5, #1
 80012d6:	428c      	cmp	r4, r1
 80012d8:	d900      	bls.n	80012dc <__aeabi_ddiv+0x4dc>
 80012da:	e68d      	b.n	8000ff8 <__aeabi_ddiv+0x1f8>
 80012dc:	428a      	cmp	r2, r1
 80012de:	d800      	bhi.n	80012e2 <__aeabi_ddiv+0x4e2>
 80012e0:	e68a      	b.n	8000ff8 <__aeabi_ddiv+0x1f8>
 80012e2:	1e85      	subs	r5, r0, #2
 80012e4:	1909      	adds	r1, r1, r4
 80012e6:	e687      	b.n	8000ff8 <__aeabi_ddiv+0x1f8>
 80012e8:	230f      	movs	r3, #15
 80012ea:	402b      	ands	r3, r5
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	d100      	bne.n	80012f2 <__aeabi_ddiv+0x4f2>
 80012f0:	e6bc      	b.n	800106c <__aeabi_ddiv+0x26c>
 80012f2:	2305      	movs	r3, #5
 80012f4:	425b      	negs	r3, r3
 80012f6:	42ab      	cmp	r3, r5
 80012f8:	419b      	sbcs	r3, r3
 80012fa:	3504      	adds	r5, #4
 80012fc:	425b      	negs	r3, r3
 80012fe:	08ed      	lsrs	r5, r5, #3
 8001300:	4498      	add	r8, r3
 8001302:	e6b4      	b.n	800106e <__aeabi_ddiv+0x26e>
 8001304:	42af      	cmp	r7, r5
 8001306:	d900      	bls.n	800130a <__aeabi_ddiv+0x50a>
 8001308:	e660      	b.n	8000fcc <__aeabi_ddiv+0x1cc>
 800130a:	4282      	cmp	r2, r0
 800130c:	d804      	bhi.n	8001318 <__aeabi_ddiv+0x518>
 800130e:	d000      	beq.n	8001312 <__aeabi_ddiv+0x512>
 8001310:	e65c      	b.n	8000fcc <__aeabi_ddiv+0x1cc>
 8001312:	42ae      	cmp	r6, r5
 8001314:	d800      	bhi.n	8001318 <__aeabi_ddiv+0x518>
 8001316:	e659      	b.n	8000fcc <__aeabi_ddiv+0x1cc>
 8001318:	2302      	movs	r3, #2
 800131a:	425b      	negs	r3, r3
 800131c:	469c      	mov	ip, r3
 800131e:	9b00      	ldr	r3, [sp, #0]
 8001320:	44e0      	add	r8, ip
 8001322:	469c      	mov	ip, r3
 8001324:	4465      	add	r5, ip
 8001326:	429d      	cmp	r5, r3
 8001328:	419b      	sbcs	r3, r3
 800132a:	425b      	negs	r3, r3
 800132c:	191b      	adds	r3, r3, r4
 800132e:	18c0      	adds	r0, r0, r3
 8001330:	e64d      	b.n	8000fce <__aeabi_ddiv+0x1ce>
 8001332:	428a      	cmp	r2, r1
 8001334:	d800      	bhi.n	8001338 <__aeabi_ddiv+0x538>
 8001336:	e60e      	b.n	8000f56 <__aeabi_ddiv+0x156>
 8001338:	1e83      	subs	r3, r0, #2
 800133a:	1909      	adds	r1, r1, r4
 800133c:	e60b      	b.n	8000f56 <__aeabi_ddiv+0x156>
 800133e:	428a      	cmp	r2, r1
 8001340:	d800      	bhi.n	8001344 <__aeabi_ddiv+0x544>
 8001342:	e5f4      	b.n	8000f2e <__aeabi_ddiv+0x12e>
 8001344:	1e83      	subs	r3, r0, #2
 8001346:	4698      	mov	r8, r3
 8001348:	1909      	adds	r1, r1, r4
 800134a:	e5f0      	b.n	8000f2e <__aeabi_ddiv+0x12e>
 800134c:	4925      	ldr	r1, [pc, #148]	; (80013e4 <__aeabi_ddiv+0x5e4>)
 800134e:	0028      	movs	r0, r5
 8001350:	4459      	add	r1, fp
 8001352:	408d      	lsls	r5, r1
 8001354:	4642      	mov	r2, r8
 8001356:	408a      	lsls	r2, r1
 8001358:	1e69      	subs	r1, r5, #1
 800135a:	418d      	sbcs	r5, r1
 800135c:	4641      	mov	r1, r8
 800135e:	40d8      	lsrs	r0, r3
 8001360:	40d9      	lsrs	r1, r3
 8001362:	4302      	orrs	r2, r0
 8001364:	432a      	orrs	r2, r5
 8001366:	000b      	movs	r3, r1
 8001368:	0751      	lsls	r1, r2, #29
 800136a:	d100      	bne.n	800136e <__aeabi_ddiv+0x56e>
 800136c:	e751      	b.n	8001212 <__aeabi_ddiv+0x412>
 800136e:	210f      	movs	r1, #15
 8001370:	4011      	ands	r1, r2
 8001372:	2904      	cmp	r1, #4
 8001374:	d000      	beq.n	8001378 <__aeabi_ddiv+0x578>
 8001376:	e746      	b.n	8001206 <__aeabi_ddiv+0x406>
 8001378:	e74b      	b.n	8001212 <__aeabi_ddiv+0x412>
 800137a:	0005      	movs	r5, r0
 800137c:	428e      	cmp	r6, r1
 800137e:	d000      	beq.n	8001382 <__aeabi_ddiv+0x582>
 8001380:	e66a      	b.n	8001058 <__aeabi_ddiv+0x258>
 8001382:	9a00      	ldr	r2, [sp, #0]
 8001384:	4293      	cmp	r3, r2
 8001386:	d000      	beq.n	800138a <__aeabi_ddiv+0x58a>
 8001388:	e666      	b.n	8001058 <__aeabi_ddiv+0x258>
 800138a:	e667      	b.n	800105c <__aeabi_ddiv+0x25c>
 800138c:	4a16      	ldr	r2, [pc, #88]	; (80013e8 <__aeabi_ddiv+0x5e8>)
 800138e:	445a      	add	r2, fp
 8001390:	2a00      	cmp	r2, #0
 8001392:	dc00      	bgt.n	8001396 <__aeabi_ddiv+0x596>
 8001394:	e710      	b.n	80011b8 <__aeabi_ddiv+0x3b8>
 8001396:	2301      	movs	r3, #1
 8001398:	2500      	movs	r5, #0
 800139a:	4498      	add	r8, r3
 800139c:	e667      	b.n	800106e <__aeabi_ddiv+0x26e>
 800139e:	075d      	lsls	r5, r3, #29
 80013a0:	025b      	lsls	r3, r3, #9
 80013a2:	0b1c      	lsrs	r4, r3, #12
 80013a4:	08d2      	lsrs	r2, r2, #3
 80013a6:	2300      	movs	r3, #0
 80013a8:	4315      	orrs	r5, r2
 80013aa:	e580      	b.n	8000eae <__aeabi_ddiv+0xae>
 80013ac:	9800      	ldr	r0, [sp, #0]
 80013ae:	3d02      	subs	r5, #2
 80013b0:	0042      	lsls	r2, r0, #1
 80013b2:	4282      	cmp	r2, r0
 80013b4:	41bf      	sbcs	r7, r7
 80013b6:	427f      	negs	r7, r7
 80013b8:	193c      	adds	r4, r7, r4
 80013ba:	1936      	adds	r6, r6, r4
 80013bc:	9200      	str	r2, [sp, #0]
 80013be:	e7dd      	b.n	800137c <__aeabi_ddiv+0x57c>
 80013c0:	2480      	movs	r4, #128	; 0x80
 80013c2:	4643      	mov	r3, r8
 80013c4:	0324      	lsls	r4, r4, #12
 80013c6:	431c      	orrs	r4, r3
 80013c8:	0324      	lsls	r4, r4, #12
 80013ca:	4b04      	ldr	r3, [pc, #16]	; (80013dc <__aeabi_ddiv+0x5dc>)
 80013cc:	0b24      	lsrs	r4, r4, #12
 80013ce:	e56e      	b.n	8000eae <__aeabi_ddiv+0xae>
 80013d0:	9a00      	ldr	r2, [sp, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d3ea      	bcc.n	80013ac <__aeabi_ddiv+0x5ac>
 80013d6:	0005      	movs	r5, r0
 80013d8:	e7d3      	b.n	8001382 <__aeabi_ddiv+0x582>
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	000007ff 	.word	0x000007ff
 80013e0:	0000043e 	.word	0x0000043e
 80013e4:	0000041e 	.word	0x0000041e
 80013e8:	000003ff 	.word	0x000003ff

080013ec <__eqdf2>:
 80013ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ee:	464e      	mov	r6, r9
 80013f0:	4645      	mov	r5, r8
 80013f2:	46de      	mov	lr, fp
 80013f4:	4657      	mov	r7, sl
 80013f6:	4690      	mov	r8, r2
 80013f8:	b5e0      	push	{r5, r6, r7, lr}
 80013fa:	0017      	movs	r7, r2
 80013fc:	031a      	lsls	r2, r3, #12
 80013fe:	0b12      	lsrs	r2, r2, #12
 8001400:	0005      	movs	r5, r0
 8001402:	4684      	mov	ip, r0
 8001404:	4819      	ldr	r0, [pc, #100]	; (800146c <__eqdf2+0x80>)
 8001406:	030e      	lsls	r6, r1, #12
 8001408:	004c      	lsls	r4, r1, #1
 800140a:	4691      	mov	r9, r2
 800140c:	005a      	lsls	r2, r3, #1
 800140e:	0fdb      	lsrs	r3, r3, #31
 8001410:	469b      	mov	fp, r3
 8001412:	0b36      	lsrs	r6, r6, #12
 8001414:	0d64      	lsrs	r4, r4, #21
 8001416:	0fc9      	lsrs	r1, r1, #31
 8001418:	0d52      	lsrs	r2, r2, #21
 800141a:	4284      	cmp	r4, r0
 800141c:	d019      	beq.n	8001452 <__eqdf2+0x66>
 800141e:	4282      	cmp	r2, r0
 8001420:	d010      	beq.n	8001444 <__eqdf2+0x58>
 8001422:	2001      	movs	r0, #1
 8001424:	4294      	cmp	r4, r2
 8001426:	d10e      	bne.n	8001446 <__eqdf2+0x5a>
 8001428:	454e      	cmp	r6, r9
 800142a:	d10c      	bne.n	8001446 <__eqdf2+0x5a>
 800142c:	2001      	movs	r0, #1
 800142e:	45c4      	cmp	ip, r8
 8001430:	d109      	bne.n	8001446 <__eqdf2+0x5a>
 8001432:	4559      	cmp	r1, fp
 8001434:	d017      	beq.n	8001466 <__eqdf2+0x7a>
 8001436:	2c00      	cmp	r4, #0
 8001438:	d105      	bne.n	8001446 <__eqdf2+0x5a>
 800143a:	0030      	movs	r0, r6
 800143c:	4328      	orrs	r0, r5
 800143e:	1e43      	subs	r3, r0, #1
 8001440:	4198      	sbcs	r0, r3
 8001442:	e000      	b.n	8001446 <__eqdf2+0x5a>
 8001444:	2001      	movs	r0, #1
 8001446:	bcf0      	pop	{r4, r5, r6, r7}
 8001448:	46bb      	mov	fp, r7
 800144a:	46b2      	mov	sl, r6
 800144c:	46a9      	mov	r9, r5
 800144e:	46a0      	mov	r8, r4
 8001450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001452:	0033      	movs	r3, r6
 8001454:	2001      	movs	r0, #1
 8001456:	432b      	orrs	r3, r5
 8001458:	d1f5      	bne.n	8001446 <__eqdf2+0x5a>
 800145a:	42a2      	cmp	r2, r4
 800145c:	d1f3      	bne.n	8001446 <__eqdf2+0x5a>
 800145e:	464b      	mov	r3, r9
 8001460:	433b      	orrs	r3, r7
 8001462:	d1f0      	bne.n	8001446 <__eqdf2+0x5a>
 8001464:	e7e2      	b.n	800142c <__eqdf2+0x40>
 8001466:	2000      	movs	r0, #0
 8001468:	e7ed      	b.n	8001446 <__eqdf2+0x5a>
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	000007ff 	.word	0x000007ff

08001470 <__gedf2>:
 8001470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001472:	4647      	mov	r7, r8
 8001474:	46ce      	mov	lr, r9
 8001476:	0004      	movs	r4, r0
 8001478:	0018      	movs	r0, r3
 800147a:	0016      	movs	r6, r2
 800147c:	031b      	lsls	r3, r3, #12
 800147e:	0b1b      	lsrs	r3, r3, #12
 8001480:	4d2d      	ldr	r5, [pc, #180]	; (8001538 <__gedf2+0xc8>)
 8001482:	004a      	lsls	r2, r1, #1
 8001484:	4699      	mov	r9, r3
 8001486:	b580      	push	{r7, lr}
 8001488:	0043      	lsls	r3, r0, #1
 800148a:	030f      	lsls	r7, r1, #12
 800148c:	46a4      	mov	ip, r4
 800148e:	46b0      	mov	r8, r6
 8001490:	0b3f      	lsrs	r7, r7, #12
 8001492:	0d52      	lsrs	r2, r2, #21
 8001494:	0fc9      	lsrs	r1, r1, #31
 8001496:	0d5b      	lsrs	r3, r3, #21
 8001498:	0fc0      	lsrs	r0, r0, #31
 800149a:	42aa      	cmp	r2, r5
 800149c:	d021      	beq.n	80014e2 <__gedf2+0x72>
 800149e:	42ab      	cmp	r3, r5
 80014a0:	d013      	beq.n	80014ca <__gedf2+0x5a>
 80014a2:	2a00      	cmp	r2, #0
 80014a4:	d122      	bne.n	80014ec <__gedf2+0x7c>
 80014a6:	433c      	orrs	r4, r7
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d102      	bne.n	80014b2 <__gedf2+0x42>
 80014ac:	464d      	mov	r5, r9
 80014ae:	432e      	orrs	r6, r5
 80014b0:	d022      	beq.n	80014f8 <__gedf2+0x88>
 80014b2:	2c00      	cmp	r4, #0
 80014b4:	d010      	beq.n	80014d8 <__gedf2+0x68>
 80014b6:	4281      	cmp	r1, r0
 80014b8:	d022      	beq.n	8001500 <__gedf2+0x90>
 80014ba:	2002      	movs	r0, #2
 80014bc:	3901      	subs	r1, #1
 80014be:	4008      	ands	r0, r1
 80014c0:	3801      	subs	r0, #1
 80014c2:	bcc0      	pop	{r6, r7}
 80014c4:	46b9      	mov	r9, r7
 80014c6:	46b0      	mov	r8, r6
 80014c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ca:	464d      	mov	r5, r9
 80014cc:	432e      	orrs	r6, r5
 80014ce:	d129      	bne.n	8001524 <__gedf2+0xb4>
 80014d0:	2a00      	cmp	r2, #0
 80014d2:	d1f0      	bne.n	80014b6 <__gedf2+0x46>
 80014d4:	433c      	orrs	r4, r7
 80014d6:	d1ee      	bne.n	80014b6 <__gedf2+0x46>
 80014d8:	2800      	cmp	r0, #0
 80014da:	d1f2      	bne.n	80014c2 <__gedf2+0x52>
 80014dc:	2001      	movs	r0, #1
 80014de:	4240      	negs	r0, r0
 80014e0:	e7ef      	b.n	80014c2 <__gedf2+0x52>
 80014e2:	003d      	movs	r5, r7
 80014e4:	4325      	orrs	r5, r4
 80014e6:	d11d      	bne.n	8001524 <__gedf2+0xb4>
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d0ee      	beq.n	80014ca <__gedf2+0x5a>
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1e2      	bne.n	80014b6 <__gedf2+0x46>
 80014f0:	464c      	mov	r4, r9
 80014f2:	4326      	orrs	r6, r4
 80014f4:	d1df      	bne.n	80014b6 <__gedf2+0x46>
 80014f6:	e7e0      	b.n	80014ba <__gedf2+0x4a>
 80014f8:	2000      	movs	r0, #0
 80014fa:	2c00      	cmp	r4, #0
 80014fc:	d0e1      	beq.n	80014c2 <__gedf2+0x52>
 80014fe:	e7dc      	b.n	80014ba <__gedf2+0x4a>
 8001500:	429a      	cmp	r2, r3
 8001502:	dc0a      	bgt.n	800151a <__gedf2+0xaa>
 8001504:	dbe8      	blt.n	80014d8 <__gedf2+0x68>
 8001506:	454f      	cmp	r7, r9
 8001508:	d8d7      	bhi.n	80014ba <__gedf2+0x4a>
 800150a:	d00e      	beq.n	800152a <__gedf2+0xba>
 800150c:	2000      	movs	r0, #0
 800150e:	454f      	cmp	r7, r9
 8001510:	d2d7      	bcs.n	80014c2 <__gedf2+0x52>
 8001512:	2900      	cmp	r1, #0
 8001514:	d0e2      	beq.n	80014dc <__gedf2+0x6c>
 8001516:	0008      	movs	r0, r1
 8001518:	e7d3      	b.n	80014c2 <__gedf2+0x52>
 800151a:	4243      	negs	r3, r0
 800151c:	4158      	adcs	r0, r3
 800151e:	0040      	lsls	r0, r0, #1
 8001520:	3801      	subs	r0, #1
 8001522:	e7ce      	b.n	80014c2 <__gedf2+0x52>
 8001524:	2002      	movs	r0, #2
 8001526:	4240      	negs	r0, r0
 8001528:	e7cb      	b.n	80014c2 <__gedf2+0x52>
 800152a:	45c4      	cmp	ip, r8
 800152c:	d8c5      	bhi.n	80014ba <__gedf2+0x4a>
 800152e:	2000      	movs	r0, #0
 8001530:	45c4      	cmp	ip, r8
 8001532:	d2c6      	bcs.n	80014c2 <__gedf2+0x52>
 8001534:	e7ed      	b.n	8001512 <__gedf2+0xa2>
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	000007ff 	.word	0x000007ff

0800153c <__ledf2>:
 800153c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153e:	4647      	mov	r7, r8
 8001540:	46ce      	mov	lr, r9
 8001542:	0004      	movs	r4, r0
 8001544:	0018      	movs	r0, r3
 8001546:	0016      	movs	r6, r2
 8001548:	031b      	lsls	r3, r3, #12
 800154a:	0b1b      	lsrs	r3, r3, #12
 800154c:	4d2c      	ldr	r5, [pc, #176]	; (8001600 <__ledf2+0xc4>)
 800154e:	004a      	lsls	r2, r1, #1
 8001550:	4699      	mov	r9, r3
 8001552:	b580      	push	{r7, lr}
 8001554:	0043      	lsls	r3, r0, #1
 8001556:	030f      	lsls	r7, r1, #12
 8001558:	46a4      	mov	ip, r4
 800155a:	46b0      	mov	r8, r6
 800155c:	0b3f      	lsrs	r7, r7, #12
 800155e:	0d52      	lsrs	r2, r2, #21
 8001560:	0fc9      	lsrs	r1, r1, #31
 8001562:	0d5b      	lsrs	r3, r3, #21
 8001564:	0fc0      	lsrs	r0, r0, #31
 8001566:	42aa      	cmp	r2, r5
 8001568:	d00d      	beq.n	8001586 <__ledf2+0x4a>
 800156a:	42ab      	cmp	r3, r5
 800156c:	d010      	beq.n	8001590 <__ledf2+0x54>
 800156e:	2a00      	cmp	r2, #0
 8001570:	d127      	bne.n	80015c2 <__ledf2+0x86>
 8001572:	433c      	orrs	r4, r7
 8001574:	2b00      	cmp	r3, #0
 8001576:	d111      	bne.n	800159c <__ledf2+0x60>
 8001578:	464d      	mov	r5, r9
 800157a:	432e      	orrs	r6, r5
 800157c:	d10e      	bne.n	800159c <__ledf2+0x60>
 800157e:	2000      	movs	r0, #0
 8001580:	2c00      	cmp	r4, #0
 8001582:	d015      	beq.n	80015b0 <__ledf2+0x74>
 8001584:	e00e      	b.n	80015a4 <__ledf2+0x68>
 8001586:	003d      	movs	r5, r7
 8001588:	4325      	orrs	r5, r4
 800158a:	d110      	bne.n	80015ae <__ledf2+0x72>
 800158c:	4293      	cmp	r3, r2
 800158e:	d118      	bne.n	80015c2 <__ledf2+0x86>
 8001590:	464d      	mov	r5, r9
 8001592:	432e      	orrs	r6, r5
 8001594:	d10b      	bne.n	80015ae <__ledf2+0x72>
 8001596:	2a00      	cmp	r2, #0
 8001598:	d102      	bne.n	80015a0 <__ledf2+0x64>
 800159a:	433c      	orrs	r4, r7
 800159c:	2c00      	cmp	r4, #0
 800159e:	d00b      	beq.n	80015b8 <__ledf2+0x7c>
 80015a0:	4281      	cmp	r1, r0
 80015a2:	d014      	beq.n	80015ce <__ledf2+0x92>
 80015a4:	2002      	movs	r0, #2
 80015a6:	3901      	subs	r1, #1
 80015a8:	4008      	ands	r0, r1
 80015aa:	3801      	subs	r0, #1
 80015ac:	e000      	b.n	80015b0 <__ledf2+0x74>
 80015ae:	2002      	movs	r0, #2
 80015b0:	bcc0      	pop	{r6, r7}
 80015b2:	46b9      	mov	r9, r7
 80015b4:	46b0      	mov	r8, r6
 80015b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b8:	2800      	cmp	r0, #0
 80015ba:	d1f9      	bne.n	80015b0 <__ledf2+0x74>
 80015bc:	2001      	movs	r0, #1
 80015be:	4240      	negs	r0, r0
 80015c0:	e7f6      	b.n	80015b0 <__ledf2+0x74>
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1ec      	bne.n	80015a0 <__ledf2+0x64>
 80015c6:	464c      	mov	r4, r9
 80015c8:	4326      	orrs	r6, r4
 80015ca:	d1e9      	bne.n	80015a0 <__ledf2+0x64>
 80015cc:	e7ea      	b.n	80015a4 <__ledf2+0x68>
 80015ce:	429a      	cmp	r2, r3
 80015d0:	dd04      	ble.n	80015dc <__ledf2+0xa0>
 80015d2:	4243      	negs	r3, r0
 80015d4:	4158      	adcs	r0, r3
 80015d6:	0040      	lsls	r0, r0, #1
 80015d8:	3801      	subs	r0, #1
 80015da:	e7e9      	b.n	80015b0 <__ledf2+0x74>
 80015dc:	429a      	cmp	r2, r3
 80015de:	dbeb      	blt.n	80015b8 <__ledf2+0x7c>
 80015e0:	454f      	cmp	r7, r9
 80015e2:	d8df      	bhi.n	80015a4 <__ledf2+0x68>
 80015e4:	d006      	beq.n	80015f4 <__ledf2+0xb8>
 80015e6:	2000      	movs	r0, #0
 80015e8:	454f      	cmp	r7, r9
 80015ea:	d2e1      	bcs.n	80015b0 <__ledf2+0x74>
 80015ec:	2900      	cmp	r1, #0
 80015ee:	d0e5      	beq.n	80015bc <__ledf2+0x80>
 80015f0:	0008      	movs	r0, r1
 80015f2:	e7dd      	b.n	80015b0 <__ledf2+0x74>
 80015f4:	45c4      	cmp	ip, r8
 80015f6:	d8d5      	bhi.n	80015a4 <__ledf2+0x68>
 80015f8:	2000      	movs	r0, #0
 80015fa:	45c4      	cmp	ip, r8
 80015fc:	d2d8      	bcs.n	80015b0 <__ledf2+0x74>
 80015fe:	e7f5      	b.n	80015ec <__ledf2+0xb0>
 8001600:	000007ff 	.word	0x000007ff

08001604 <__aeabi_dmul>:
 8001604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001606:	4657      	mov	r7, sl
 8001608:	464e      	mov	r6, r9
 800160a:	4645      	mov	r5, r8
 800160c:	46de      	mov	lr, fp
 800160e:	b5e0      	push	{r5, r6, r7, lr}
 8001610:	4698      	mov	r8, r3
 8001612:	030c      	lsls	r4, r1, #12
 8001614:	004b      	lsls	r3, r1, #1
 8001616:	0006      	movs	r6, r0
 8001618:	4692      	mov	sl, r2
 800161a:	b087      	sub	sp, #28
 800161c:	0b24      	lsrs	r4, r4, #12
 800161e:	0d5b      	lsrs	r3, r3, #21
 8001620:	0fcf      	lsrs	r7, r1, #31
 8001622:	2b00      	cmp	r3, #0
 8001624:	d100      	bne.n	8001628 <__aeabi_dmul+0x24>
 8001626:	e15c      	b.n	80018e2 <__aeabi_dmul+0x2de>
 8001628:	4ad9      	ldr	r2, [pc, #868]	; (8001990 <__aeabi_dmul+0x38c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d100      	bne.n	8001630 <__aeabi_dmul+0x2c>
 800162e:	e175      	b.n	800191c <__aeabi_dmul+0x318>
 8001630:	0f42      	lsrs	r2, r0, #29
 8001632:	00e4      	lsls	r4, r4, #3
 8001634:	4314      	orrs	r4, r2
 8001636:	2280      	movs	r2, #128	; 0x80
 8001638:	0412      	lsls	r2, r2, #16
 800163a:	4314      	orrs	r4, r2
 800163c:	4ad5      	ldr	r2, [pc, #852]	; (8001994 <__aeabi_dmul+0x390>)
 800163e:	00c5      	lsls	r5, r0, #3
 8001640:	4694      	mov	ip, r2
 8001642:	4463      	add	r3, ip
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2300      	movs	r3, #0
 8001648:	4699      	mov	r9, r3
 800164a:	469b      	mov	fp, r3
 800164c:	4643      	mov	r3, r8
 800164e:	4642      	mov	r2, r8
 8001650:	031e      	lsls	r6, r3, #12
 8001652:	0fd2      	lsrs	r2, r2, #31
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4650      	mov	r0, sl
 8001658:	4690      	mov	r8, r2
 800165a:	0b36      	lsrs	r6, r6, #12
 800165c:	0d5b      	lsrs	r3, r3, #21
 800165e:	d100      	bne.n	8001662 <__aeabi_dmul+0x5e>
 8001660:	e120      	b.n	80018a4 <__aeabi_dmul+0x2a0>
 8001662:	4acb      	ldr	r2, [pc, #812]	; (8001990 <__aeabi_dmul+0x38c>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d100      	bne.n	800166a <__aeabi_dmul+0x66>
 8001668:	e162      	b.n	8001930 <__aeabi_dmul+0x32c>
 800166a:	49ca      	ldr	r1, [pc, #808]	; (8001994 <__aeabi_dmul+0x390>)
 800166c:	0f42      	lsrs	r2, r0, #29
 800166e:	468c      	mov	ip, r1
 8001670:	9900      	ldr	r1, [sp, #0]
 8001672:	4463      	add	r3, ip
 8001674:	00f6      	lsls	r6, r6, #3
 8001676:	468c      	mov	ip, r1
 8001678:	4316      	orrs	r6, r2
 800167a:	2280      	movs	r2, #128	; 0x80
 800167c:	449c      	add	ip, r3
 800167e:	0412      	lsls	r2, r2, #16
 8001680:	4663      	mov	r3, ip
 8001682:	4316      	orrs	r6, r2
 8001684:	00c2      	lsls	r2, r0, #3
 8001686:	2000      	movs	r0, #0
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	9900      	ldr	r1, [sp, #0]
 800168c:	4643      	mov	r3, r8
 800168e:	3101      	adds	r1, #1
 8001690:	468c      	mov	ip, r1
 8001692:	4649      	mov	r1, r9
 8001694:	407b      	eors	r3, r7
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	290f      	cmp	r1, #15
 800169a:	d826      	bhi.n	80016ea <__aeabi_dmul+0xe6>
 800169c:	4bbe      	ldr	r3, [pc, #760]	; (8001998 <__aeabi_dmul+0x394>)
 800169e:	0089      	lsls	r1, r1, #2
 80016a0:	5859      	ldr	r1, [r3, r1]
 80016a2:	468f      	mov	pc, r1
 80016a4:	4643      	mov	r3, r8
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	0034      	movs	r4, r6
 80016aa:	0015      	movs	r5, r2
 80016ac:	4683      	mov	fp, r0
 80016ae:	465b      	mov	r3, fp
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d016      	beq.n	80016e2 <__aeabi_dmul+0xde>
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d100      	bne.n	80016ba <__aeabi_dmul+0xb6>
 80016b8:	e203      	b.n	8001ac2 <__aeabi_dmul+0x4be>
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d000      	beq.n	80016c0 <__aeabi_dmul+0xbc>
 80016be:	e0cd      	b.n	800185c <__aeabi_dmul+0x258>
 80016c0:	2200      	movs	r2, #0
 80016c2:	2400      	movs	r4, #0
 80016c4:	2500      	movs	r5, #0
 80016c6:	9b01      	ldr	r3, [sp, #4]
 80016c8:	0512      	lsls	r2, r2, #20
 80016ca:	4322      	orrs	r2, r4
 80016cc:	07db      	lsls	r3, r3, #31
 80016ce:	431a      	orrs	r2, r3
 80016d0:	0028      	movs	r0, r5
 80016d2:	0011      	movs	r1, r2
 80016d4:	b007      	add	sp, #28
 80016d6:	bcf0      	pop	{r4, r5, r6, r7}
 80016d8:	46bb      	mov	fp, r7
 80016da:	46b2      	mov	sl, r6
 80016dc:	46a9      	mov	r9, r5
 80016de:	46a0      	mov	r8, r4
 80016e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016e2:	2400      	movs	r4, #0
 80016e4:	2500      	movs	r5, #0
 80016e6:	4aaa      	ldr	r2, [pc, #680]	; (8001990 <__aeabi_dmul+0x38c>)
 80016e8:	e7ed      	b.n	80016c6 <__aeabi_dmul+0xc2>
 80016ea:	0c28      	lsrs	r0, r5, #16
 80016ec:	042d      	lsls	r5, r5, #16
 80016ee:	0c2d      	lsrs	r5, r5, #16
 80016f0:	002b      	movs	r3, r5
 80016f2:	0c11      	lsrs	r1, r2, #16
 80016f4:	0412      	lsls	r2, r2, #16
 80016f6:	0c12      	lsrs	r2, r2, #16
 80016f8:	4353      	muls	r3, r2
 80016fa:	4698      	mov	r8, r3
 80016fc:	0013      	movs	r3, r2
 80016fe:	002f      	movs	r7, r5
 8001700:	4343      	muls	r3, r0
 8001702:	4699      	mov	r9, r3
 8001704:	434f      	muls	r7, r1
 8001706:	444f      	add	r7, r9
 8001708:	46bb      	mov	fp, r7
 800170a:	4647      	mov	r7, r8
 800170c:	000b      	movs	r3, r1
 800170e:	0c3f      	lsrs	r7, r7, #16
 8001710:	46ba      	mov	sl, r7
 8001712:	4343      	muls	r3, r0
 8001714:	44da      	add	sl, fp
 8001716:	9302      	str	r3, [sp, #8]
 8001718:	45d1      	cmp	r9, sl
 800171a:	d904      	bls.n	8001726 <__aeabi_dmul+0x122>
 800171c:	2780      	movs	r7, #128	; 0x80
 800171e:	027f      	lsls	r7, r7, #9
 8001720:	46b9      	mov	r9, r7
 8001722:	444b      	add	r3, r9
 8001724:	9302      	str	r3, [sp, #8]
 8001726:	4653      	mov	r3, sl
 8001728:	0c1b      	lsrs	r3, r3, #16
 800172a:	469b      	mov	fp, r3
 800172c:	4653      	mov	r3, sl
 800172e:	041f      	lsls	r7, r3, #16
 8001730:	4643      	mov	r3, r8
 8001732:	041b      	lsls	r3, r3, #16
 8001734:	0c1b      	lsrs	r3, r3, #16
 8001736:	4698      	mov	r8, r3
 8001738:	003b      	movs	r3, r7
 800173a:	4443      	add	r3, r8
 800173c:	9304      	str	r3, [sp, #16]
 800173e:	0c33      	lsrs	r3, r6, #16
 8001740:	0436      	lsls	r6, r6, #16
 8001742:	0c36      	lsrs	r6, r6, #16
 8001744:	4698      	mov	r8, r3
 8001746:	0033      	movs	r3, r6
 8001748:	4343      	muls	r3, r0
 800174a:	4699      	mov	r9, r3
 800174c:	4643      	mov	r3, r8
 800174e:	4343      	muls	r3, r0
 8001750:	002f      	movs	r7, r5
 8001752:	469a      	mov	sl, r3
 8001754:	4643      	mov	r3, r8
 8001756:	4377      	muls	r7, r6
 8001758:	435d      	muls	r5, r3
 800175a:	0c38      	lsrs	r0, r7, #16
 800175c:	444d      	add	r5, r9
 800175e:	1945      	adds	r5, r0, r5
 8001760:	45a9      	cmp	r9, r5
 8001762:	d903      	bls.n	800176c <__aeabi_dmul+0x168>
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	025b      	lsls	r3, r3, #9
 8001768:	4699      	mov	r9, r3
 800176a:	44ca      	add	sl, r9
 800176c:	043f      	lsls	r7, r7, #16
 800176e:	0c28      	lsrs	r0, r5, #16
 8001770:	0c3f      	lsrs	r7, r7, #16
 8001772:	042d      	lsls	r5, r5, #16
 8001774:	19ed      	adds	r5, r5, r7
 8001776:	0c27      	lsrs	r7, r4, #16
 8001778:	0424      	lsls	r4, r4, #16
 800177a:	0c24      	lsrs	r4, r4, #16
 800177c:	0003      	movs	r3, r0
 800177e:	0020      	movs	r0, r4
 8001780:	4350      	muls	r0, r2
 8001782:	437a      	muls	r2, r7
 8001784:	4691      	mov	r9, r2
 8001786:	003a      	movs	r2, r7
 8001788:	4453      	add	r3, sl
 800178a:	9305      	str	r3, [sp, #20]
 800178c:	0c03      	lsrs	r3, r0, #16
 800178e:	469a      	mov	sl, r3
 8001790:	434a      	muls	r2, r1
 8001792:	4361      	muls	r1, r4
 8001794:	4449      	add	r1, r9
 8001796:	4451      	add	r1, sl
 8001798:	44ab      	add	fp, r5
 800179a:	4589      	cmp	r9, r1
 800179c:	d903      	bls.n	80017a6 <__aeabi_dmul+0x1a2>
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	025b      	lsls	r3, r3, #9
 80017a2:	4699      	mov	r9, r3
 80017a4:	444a      	add	r2, r9
 80017a6:	0400      	lsls	r0, r0, #16
 80017a8:	0c0b      	lsrs	r3, r1, #16
 80017aa:	0c00      	lsrs	r0, r0, #16
 80017ac:	0409      	lsls	r1, r1, #16
 80017ae:	1809      	adds	r1, r1, r0
 80017b0:	0020      	movs	r0, r4
 80017b2:	4699      	mov	r9, r3
 80017b4:	4643      	mov	r3, r8
 80017b6:	4370      	muls	r0, r6
 80017b8:	435c      	muls	r4, r3
 80017ba:	437e      	muls	r6, r7
 80017bc:	435f      	muls	r7, r3
 80017be:	0c03      	lsrs	r3, r0, #16
 80017c0:	4698      	mov	r8, r3
 80017c2:	19a4      	adds	r4, r4, r6
 80017c4:	4444      	add	r4, r8
 80017c6:	444a      	add	r2, r9
 80017c8:	9703      	str	r7, [sp, #12]
 80017ca:	42a6      	cmp	r6, r4
 80017cc:	d904      	bls.n	80017d8 <__aeabi_dmul+0x1d4>
 80017ce:	2380      	movs	r3, #128	; 0x80
 80017d0:	025b      	lsls	r3, r3, #9
 80017d2:	4698      	mov	r8, r3
 80017d4:	4447      	add	r7, r8
 80017d6:	9703      	str	r7, [sp, #12]
 80017d8:	0423      	lsls	r3, r4, #16
 80017da:	9e02      	ldr	r6, [sp, #8]
 80017dc:	469a      	mov	sl, r3
 80017de:	9b05      	ldr	r3, [sp, #20]
 80017e0:	445e      	add	r6, fp
 80017e2:	4698      	mov	r8, r3
 80017e4:	42ae      	cmp	r6, r5
 80017e6:	41ad      	sbcs	r5, r5
 80017e8:	1876      	adds	r6, r6, r1
 80017ea:	428e      	cmp	r6, r1
 80017ec:	4189      	sbcs	r1, r1
 80017ee:	0400      	lsls	r0, r0, #16
 80017f0:	0c00      	lsrs	r0, r0, #16
 80017f2:	4450      	add	r0, sl
 80017f4:	4440      	add	r0, r8
 80017f6:	426d      	negs	r5, r5
 80017f8:	1947      	adds	r7, r0, r5
 80017fa:	46b8      	mov	r8, r7
 80017fc:	4693      	mov	fp, r2
 80017fe:	4249      	negs	r1, r1
 8001800:	4689      	mov	r9, r1
 8001802:	44c3      	add	fp, r8
 8001804:	44d9      	add	r9, fp
 8001806:	4298      	cmp	r0, r3
 8001808:	4180      	sbcs	r0, r0
 800180a:	45a8      	cmp	r8, r5
 800180c:	41ad      	sbcs	r5, r5
 800180e:	4593      	cmp	fp, r2
 8001810:	4192      	sbcs	r2, r2
 8001812:	4589      	cmp	r9, r1
 8001814:	4189      	sbcs	r1, r1
 8001816:	426d      	negs	r5, r5
 8001818:	4240      	negs	r0, r0
 800181a:	4328      	orrs	r0, r5
 800181c:	0c24      	lsrs	r4, r4, #16
 800181e:	4252      	negs	r2, r2
 8001820:	4249      	negs	r1, r1
 8001822:	430a      	orrs	r2, r1
 8001824:	9b03      	ldr	r3, [sp, #12]
 8001826:	1900      	adds	r0, r0, r4
 8001828:	1880      	adds	r0, r0, r2
 800182a:	18c7      	adds	r7, r0, r3
 800182c:	464b      	mov	r3, r9
 800182e:	0ddc      	lsrs	r4, r3, #23
 8001830:	9b04      	ldr	r3, [sp, #16]
 8001832:	0275      	lsls	r5, r6, #9
 8001834:	431d      	orrs	r5, r3
 8001836:	1e6a      	subs	r2, r5, #1
 8001838:	4195      	sbcs	r5, r2
 800183a:	464b      	mov	r3, r9
 800183c:	0df6      	lsrs	r6, r6, #23
 800183e:	027f      	lsls	r7, r7, #9
 8001840:	4335      	orrs	r5, r6
 8001842:	025a      	lsls	r2, r3, #9
 8001844:	433c      	orrs	r4, r7
 8001846:	4315      	orrs	r5, r2
 8001848:	01fb      	lsls	r3, r7, #7
 800184a:	d400      	bmi.n	800184e <__aeabi_dmul+0x24a>
 800184c:	e11c      	b.n	8001a88 <__aeabi_dmul+0x484>
 800184e:	2101      	movs	r1, #1
 8001850:	086a      	lsrs	r2, r5, #1
 8001852:	400d      	ands	r5, r1
 8001854:	4315      	orrs	r5, r2
 8001856:	07e2      	lsls	r2, r4, #31
 8001858:	4315      	orrs	r5, r2
 800185a:	0864      	lsrs	r4, r4, #1
 800185c:	494f      	ldr	r1, [pc, #316]	; (800199c <__aeabi_dmul+0x398>)
 800185e:	4461      	add	r1, ip
 8001860:	2900      	cmp	r1, #0
 8001862:	dc00      	bgt.n	8001866 <__aeabi_dmul+0x262>
 8001864:	e0b0      	b.n	80019c8 <__aeabi_dmul+0x3c4>
 8001866:	076b      	lsls	r3, r5, #29
 8001868:	d009      	beq.n	800187e <__aeabi_dmul+0x27a>
 800186a:	220f      	movs	r2, #15
 800186c:	402a      	ands	r2, r5
 800186e:	2a04      	cmp	r2, #4
 8001870:	d005      	beq.n	800187e <__aeabi_dmul+0x27a>
 8001872:	1d2a      	adds	r2, r5, #4
 8001874:	42aa      	cmp	r2, r5
 8001876:	41ad      	sbcs	r5, r5
 8001878:	426d      	negs	r5, r5
 800187a:	1964      	adds	r4, r4, r5
 800187c:	0015      	movs	r5, r2
 800187e:	01e3      	lsls	r3, r4, #7
 8001880:	d504      	bpl.n	800188c <__aeabi_dmul+0x288>
 8001882:	2180      	movs	r1, #128	; 0x80
 8001884:	4a46      	ldr	r2, [pc, #280]	; (80019a0 <__aeabi_dmul+0x39c>)
 8001886:	00c9      	lsls	r1, r1, #3
 8001888:	4014      	ands	r4, r2
 800188a:	4461      	add	r1, ip
 800188c:	4a45      	ldr	r2, [pc, #276]	; (80019a4 <__aeabi_dmul+0x3a0>)
 800188e:	4291      	cmp	r1, r2
 8001890:	dd00      	ble.n	8001894 <__aeabi_dmul+0x290>
 8001892:	e726      	b.n	80016e2 <__aeabi_dmul+0xde>
 8001894:	0762      	lsls	r2, r4, #29
 8001896:	08ed      	lsrs	r5, r5, #3
 8001898:	0264      	lsls	r4, r4, #9
 800189a:	0549      	lsls	r1, r1, #21
 800189c:	4315      	orrs	r5, r2
 800189e:	0b24      	lsrs	r4, r4, #12
 80018a0:	0d4a      	lsrs	r2, r1, #21
 80018a2:	e710      	b.n	80016c6 <__aeabi_dmul+0xc2>
 80018a4:	4652      	mov	r2, sl
 80018a6:	4332      	orrs	r2, r6
 80018a8:	d100      	bne.n	80018ac <__aeabi_dmul+0x2a8>
 80018aa:	e07f      	b.n	80019ac <__aeabi_dmul+0x3a8>
 80018ac:	2e00      	cmp	r6, #0
 80018ae:	d100      	bne.n	80018b2 <__aeabi_dmul+0x2ae>
 80018b0:	e0dc      	b.n	8001a6c <__aeabi_dmul+0x468>
 80018b2:	0030      	movs	r0, r6
 80018b4:	f000 fd96 	bl	80023e4 <__clzsi2>
 80018b8:	0002      	movs	r2, r0
 80018ba:	3a0b      	subs	r2, #11
 80018bc:	231d      	movs	r3, #29
 80018be:	0001      	movs	r1, r0
 80018c0:	1a9b      	subs	r3, r3, r2
 80018c2:	4652      	mov	r2, sl
 80018c4:	3908      	subs	r1, #8
 80018c6:	40da      	lsrs	r2, r3
 80018c8:	408e      	lsls	r6, r1
 80018ca:	4316      	orrs	r6, r2
 80018cc:	4652      	mov	r2, sl
 80018ce:	408a      	lsls	r2, r1
 80018d0:	9b00      	ldr	r3, [sp, #0]
 80018d2:	4935      	ldr	r1, [pc, #212]	; (80019a8 <__aeabi_dmul+0x3a4>)
 80018d4:	1a18      	subs	r0, r3, r0
 80018d6:	0003      	movs	r3, r0
 80018d8:	468c      	mov	ip, r1
 80018da:	4463      	add	r3, ip
 80018dc:	2000      	movs	r0, #0
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	e6d3      	b.n	800168a <__aeabi_dmul+0x86>
 80018e2:	0025      	movs	r5, r4
 80018e4:	4305      	orrs	r5, r0
 80018e6:	d04a      	beq.n	800197e <__aeabi_dmul+0x37a>
 80018e8:	2c00      	cmp	r4, #0
 80018ea:	d100      	bne.n	80018ee <__aeabi_dmul+0x2ea>
 80018ec:	e0b0      	b.n	8001a50 <__aeabi_dmul+0x44c>
 80018ee:	0020      	movs	r0, r4
 80018f0:	f000 fd78 	bl	80023e4 <__clzsi2>
 80018f4:	0001      	movs	r1, r0
 80018f6:	0002      	movs	r2, r0
 80018f8:	390b      	subs	r1, #11
 80018fa:	231d      	movs	r3, #29
 80018fc:	0010      	movs	r0, r2
 80018fe:	1a5b      	subs	r3, r3, r1
 8001900:	0031      	movs	r1, r6
 8001902:	0035      	movs	r5, r6
 8001904:	3808      	subs	r0, #8
 8001906:	4084      	lsls	r4, r0
 8001908:	40d9      	lsrs	r1, r3
 800190a:	4085      	lsls	r5, r0
 800190c:	430c      	orrs	r4, r1
 800190e:	4826      	ldr	r0, [pc, #152]	; (80019a8 <__aeabi_dmul+0x3a4>)
 8001910:	1a83      	subs	r3, r0, r2
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	2300      	movs	r3, #0
 8001916:	4699      	mov	r9, r3
 8001918:	469b      	mov	fp, r3
 800191a:	e697      	b.n	800164c <__aeabi_dmul+0x48>
 800191c:	0005      	movs	r5, r0
 800191e:	4325      	orrs	r5, r4
 8001920:	d126      	bne.n	8001970 <__aeabi_dmul+0x36c>
 8001922:	2208      	movs	r2, #8
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2302      	movs	r3, #2
 8001928:	2400      	movs	r4, #0
 800192a:	4691      	mov	r9, r2
 800192c:	469b      	mov	fp, r3
 800192e:	e68d      	b.n	800164c <__aeabi_dmul+0x48>
 8001930:	4652      	mov	r2, sl
 8001932:	9b00      	ldr	r3, [sp, #0]
 8001934:	4332      	orrs	r2, r6
 8001936:	d110      	bne.n	800195a <__aeabi_dmul+0x356>
 8001938:	4915      	ldr	r1, [pc, #84]	; (8001990 <__aeabi_dmul+0x38c>)
 800193a:	2600      	movs	r6, #0
 800193c:	468c      	mov	ip, r1
 800193e:	4463      	add	r3, ip
 8001940:	4649      	mov	r1, r9
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	2302      	movs	r3, #2
 8001946:	4319      	orrs	r1, r3
 8001948:	4689      	mov	r9, r1
 800194a:	2002      	movs	r0, #2
 800194c:	e69d      	b.n	800168a <__aeabi_dmul+0x86>
 800194e:	465b      	mov	r3, fp
 8001950:	9701      	str	r7, [sp, #4]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d000      	beq.n	8001958 <__aeabi_dmul+0x354>
 8001956:	e6ad      	b.n	80016b4 <__aeabi_dmul+0xb0>
 8001958:	e6c3      	b.n	80016e2 <__aeabi_dmul+0xde>
 800195a:	4a0d      	ldr	r2, [pc, #52]	; (8001990 <__aeabi_dmul+0x38c>)
 800195c:	2003      	movs	r0, #3
 800195e:	4694      	mov	ip, r2
 8001960:	4463      	add	r3, ip
 8001962:	464a      	mov	r2, r9
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2303      	movs	r3, #3
 8001968:	431a      	orrs	r2, r3
 800196a:	4691      	mov	r9, r2
 800196c:	4652      	mov	r2, sl
 800196e:	e68c      	b.n	800168a <__aeabi_dmul+0x86>
 8001970:	220c      	movs	r2, #12
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	2303      	movs	r3, #3
 8001976:	0005      	movs	r5, r0
 8001978:	4691      	mov	r9, r2
 800197a:	469b      	mov	fp, r3
 800197c:	e666      	b.n	800164c <__aeabi_dmul+0x48>
 800197e:	2304      	movs	r3, #4
 8001980:	4699      	mov	r9, r3
 8001982:	2300      	movs	r3, #0
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	3301      	adds	r3, #1
 8001988:	2400      	movs	r4, #0
 800198a:	469b      	mov	fp, r3
 800198c:	e65e      	b.n	800164c <__aeabi_dmul+0x48>
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	000007ff 	.word	0x000007ff
 8001994:	fffffc01 	.word	0xfffffc01
 8001998:	0800a720 	.word	0x0800a720
 800199c:	000003ff 	.word	0x000003ff
 80019a0:	feffffff 	.word	0xfeffffff
 80019a4:	000007fe 	.word	0x000007fe
 80019a8:	fffffc0d 	.word	0xfffffc0d
 80019ac:	4649      	mov	r1, r9
 80019ae:	2301      	movs	r3, #1
 80019b0:	4319      	orrs	r1, r3
 80019b2:	4689      	mov	r9, r1
 80019b4:	2600      	movs	r6, #0
 80019b6:	2001      	movs	r0, #1
 80019b8:	e667      	b.n	800168a <__aeabi_dmul+0x86>
 80019ba:	2300      	movs	r3, #0
 80019bc:	2480      	movs	r4, #128	; 0x80
 80019be:	2500      	movs	r5, #0
 80019c0:	4a43      	ldr	r2, [pc, #268]	; (8001ad0 <__aeabi_dmul+0x4cc>)
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	0324      	lsls	r4, r4, #12
 80019c6:	e67e      	b.n	80016c6 <__aeabi_dmul+0xc2>
 80019c8:	2001      	movs	r0, #1
 80019ca:	1a40      	subs	r0, r0, r1
 80019cc:	2838      	cmp	r0, #56	; 0x38
 80019ce:	dd00      	ble.n	80019d2 <__aeabi_dmul+0x3ce>
 80019d0:	e676      	b.n	80016c0 <__aeabi_dmul+0xbc>
 80019d2:	281f      	cmp	r0, #31
 80019d4:	dd5b      	ble.n	8001a8e <__aeabi_dmul+0x48a>
 80019d6:	221f      	movs	r2, #31
 80019d8:	0023      	movs	r3, r4
 80019da:	4252      	negs	r2, r2
 80019dc:	1a51      	subs	r1, r2, r1
 80019de:	40cb      	lsrs	r3, r1
 80019e0:	0019      	movs	r1, r3
 80019e2:	2820      	cmp	r0, #32
 80019e4:	d003      	beq.n	80019ee <__aeabi_dmul+0x3ea>
 80019e6:	4a3b      	ldr	r2, [pc, #236]	; (8001ad4 <__aeabi_dmul+0x4d0>)
 80019e8:	4462      	add	r2, ip
 80019ea:	4094      	lsls	r4, r2
 80019ec:	4325      	orrs	r5, r4
 80019ee:	1e6a      	subs	r2, r5, #1
 80019f0:	4195      	sbcs	r5, r2
 80019f2:	002a      	movs	r2, r5
 80019f4:	430a      	orrs	r2, r1
 80019f6:	2107      	movs	r1, #7
 80019f8:	000d      	movs	r5, r1
 80019fa:	2400      	movs	r4, #0
 80019fc:	4015      	ands	r5, r2
 80019fe:	4211      	tst	r1, r2
 8001a00:	d05b      	beq.n	8001aba <__aeabi_dmul+0x4b6>
 8001a02:	210f      	movs	r1, #15
 8001a04:	2400      	movs	r4, #0
 8001a06:	4011      	ands	r1, r2
 8001a08:	2904      	cmp	r1, #4
 8001a0a:	d053      	beq.n	8001ab4 <__aeabi_dmul+0x4b0>
 8001a0c:	1d11      	adds	r1, r2, #4
 8001a0e:	4291      	cmp	r1, r2
 8001a10:	4192      	sbcs	r2, r2
 8001a12:	4252      	negs	r2, r2
 8001a14:	18a4      	adds	r4, r4, r2
 8001a16:	000a      	movs	r2, r1
 8001a18:	0223      	lsls	r3, r4, #8
 8001a1a:	d54b      	bpl.n	8001ab4 <__aeabi_dmul+0x4b0>
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	2400      	movs	r4, #0
 8001a20:	2500      	movs	r5, #0
 8001a22:	e650      	b.n	80016c6 <__aeabi_dmul+0xc2>
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	031b      	lsls	r3, r3, #12
 8001a28:	421c      	tst	r4, r3
 8001a2a:	d009      	beq.n	8001a40 <__aeabi_dmul+0x43c>
 8001a2c:	421e      	tst	r6, r3
 8001a2e:	d107      	bne.n	8001a40 <__aeabi_dmul+0x43c>
 8001a30:	4333      	orrs	r3, r6
 8001a32:	031c      	lsls	r4, r3, #12
 8001a34:	4643      	mov	r3, r8
 8001a36:	0015      	movs	r5, r2
 8001a38:	0b24      	lsrs	r4, r4, #12
 8001a3a:	4a25      	ldr	r2, [pc, #148]	; (8001ad0 <__aeabi_dmul+0x4cc>)
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	e642      	b.n	80016c6 <__aeabi_dmul+0xc2>
 8001a40:	2280      	movs	r2, #128	; 0x80
 8001a42:	0312      	lsls	r2, r2, #12
 8001a44:	4314      	orrs	r4, r2
 8001a46:	0324      	lsls	r4, r4, #12
 8001a48:	4a21      	ldr	r2, [pc, #132]	; (8001ad0 <__aeabi_dmul+0x4cc>)
 8001a4a:	0b24      	lsrs	r4, r4, #12
 8001a4c:	9701      	str	r7, [sp, #4]
 8001a4e:	e63a      	b.n	80016c6 <__aeabi_dmul+0xc2>
 8001a50:	f000 fcc8 	bl	80023e4 <__clzsi2>
 8001a54:	0001      	movs	r1, r0
 8001a56:	0002      	movs	r2, r0
 8001a58:	3115      	adds	r1, #21
 8001a5a:	3220      	adds	r2, #32
 8001a5c:	291c      	cmp	r1, #28
 8001a5e:	dc00      	bgt.n	8001a62 <__aeabi_dmul+0x45e>
 8001a60:	e74b      	b.n	80018fa <__aeabi_dmul+0x2f6>
 8001a62:	0034      	movs	r4, r6
 8001a64:	3808      	subs	r0, #8
 8001a66:	2500      	movs	r5, #0
 8001a68:	4084      	lsls	r4, r0
 8001a6a:	e750      	b.n	800190e <__aeabi_dmul+0x30a>
 8001a6c:	f000 fcba 	bl	80023e4 <__clzsi2>
 8001a70:	0003      	movs	r3, r0
 8001a72:	001a      	movs	r2, r3
 8001a74:	3215      	adds	r2, #21
 8001a76:	3020      	adds	r0, #32
 8001a78:	2a1c      	cmp	r2, #28
 8001a7a:	dc00      	bgt.n	8001a7e <__aeabi_dmul+0x47a>
 8001a7c:	e71e      	b.n	80018bc <__aeabi_dmul+0x2b8>
 8001a7e:	4656      	mov	r6, sl
 8001a80:	3b08      	subs	r3, #8
 8001a82:	2200      	movs	r2, #0
 8001a84:	409e      	lsls	r6, r3
 8001a86:	e723      	b.n	80018d0 <__aeabi_dmul+0x2cc>
 8001a88:	9b00      	ldr	r3, [sp, #0]
 8001a8a:	469c      	mov	ip, r3
 8001a8c:	e6e6      	b.n	800185c <__aeabi_dmul+0x258>
 8001a8e:	4912      	ldr	r1, [pc, #72]	; (8001ad8 <__aeabi_dmul+0x4d4>)
 8001a90:	0022      	movs	r2, r4
 8001a92:	4461      	add	r1, ip
 8001a94:	002e      	movs	r6, r5
 8001a96:	408d      	lsls	r5, r1
 8001a98:	408a      	lsls	r2, r1
 8001a9a:	40c6      	lsrs	r6, r0
 8001a9c:	1e69      	subs	r1, r5, #1
 8001a9e:	418d      	sbcs	r5, r1
 8001aa0:	4332      	orrs	r2, r6
 8001aa2:	432a      	orrs	r2, r5
 8001aa4:	40c4      	lsrs	r4, r0
 8001aa6:	0753      	lsls	r3, r2, #29
 8001aa8:	d0b6      	beq.n	8001a18 <__aeabi_dmul+0x414>
 8001aaa:	210f      	movs	r1, #15
 8001aac:	4011      	ands	r1, r2
 8001aae:	2904      	cmp	r1, #4
 8001ab0:	d1ac      	bne.n	8001a0c <__aeabi_dmul+0x408>
 8001ab2:	e7b1      	b.n	8001a18 <__aeabi_dmul+0x414>
 8001ab4:	0765      	lsls	r5, r4, #29
 8001ab6:	0264      	lsls	r4, r4, #9
 8001ab8:	0b24      	lsrs	r4, r4, #12
 8001aba:	08d2      	lsrs	r2, r2, #3
 8001abc:	4315      	orrs	r5, r2
 8001abe:	2200      	movs	r2, #0
 8001ac0:	e601      	b.n	80016c6 <__aeabi_dmul+0xc2>
 8001ac2:	2280      	movs	r2, #128	; 0x80
 8001ac4:	0312      	lsls	r2, r2, #12
 8001ac6:	4314      	orrs	r4, r2
 8001ac8:	0324      	lsls	r4, r4, #12
 8001aca:	4a01      	ldr	r2, [pc, #4]	; (8001ad0 <__aeabi_dmul+0x4cc>)
 8001acc:	0b24      	lsrs	r4, r4, #12
 8001ace:	e5fa      	b.n	80016c6 <__aeabi_dmul+0xc2>
 8001ad0:	000007ff 	.word	0x000007ff
 8001ad4:	0000043e 	.word	0x0000043e
 8001ad8:	0000041e 	.word	0x0000041e

08001adc <__aeabi_dsub>:
 8001adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ade:	4657      	mov	r7, sl
 8001ae0:	464e      	mov	r6, r9
 8001ae2:	4645      	mov	r5, r8
 8001ae4:	46de      	mov	lr, fp
 8001ae6:	b5e0      	push	{r5, r6, r7, lr}
 8001ae8:	001e      	movs	r6, r3
 8001aea:	0017      	movs	r7, r2
 8001aec:	004a      	lsls	r2, r1, #1
 8001aee:	030b      	lsls	r3, r1, #12
 8001af0:	0d52      	lsrs	r2, r2, #21
 8001af2:	0a5b      	lsrs	r3, r3, #9
 8001af4:	4690      	mov	r8, r2
 8001af6:	0f42      	lsrs	r2, r0, #29
 8001af8:	431a      	orrs	r2, r3
 8001afa:	0fcd      	lsrs	r5, r1, #31
 8001afc:	4ccd      	ldr	r4, [pc, #820]	; (8001e34 <__aeabi_dsub+0x358>)
 8001afe:	0331      	lsls	r1, r6, #12
 8001b00:	00c3      	lsls	r3, r0, #3
 8001b02:	4694      	mov	ip, r2
 8001b04:	0070      	lsls	r0, r6, #1
 8001b06:	0f7a      	lsrs	r2, r7, #29
 8001b08:	0a49      	lsrs	r1, r1, #9
 8001b0a:	00ff      	lsls	r7, r7, #3
 8001b0c:	469a      	mov	sl, r3
 8001b0e:	46b9      	mov	r9, r7
 8001b10:	0d40      	lsrs	r0, r0, #21
 8001b12:	0ff6      	lsrs	r6, r6, #31
 8001b14:	4311      	orrs	r1, r2
 8001b16:	42a0      	cmp	r0, r4
 8001b18:	d100      	bne.n	8001b1c <__aeabi_dsub+0x40>
 8001b1a:	e0b1      	b.n	8001c80 <__aeabi_dsub+0x1a4>
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	4056      	eors	r6, r2
 8001b20:	46b3      	mov	fp, r6
 8001b22:	42b5      	cmp	r5, r6
 8001b24:	d100      	bne.n	8001b28 <__aeabi_dsub+0x4c>
 8001b26:	e088      	b.n	8001c3a <__aeabi_dsub+0x15e>
 8001b28:	4642      	mov	r2, r8
 8001b2a:	1a12      	subs	r2, r2, r0
 8001b2c:	2a00      	cmp	r2, #0
 8001b2e:	dc00      	bgt.n	8001b32 <__aeabi_dsub+0x56>
 8001b30:	e0ae      	b.n	8001c90 <__aeabi_dsub+0x1b4>
 8001b32:	2800      	cmp	r0, #0
 8001b34:	d100      	bne.n	8001b38 <__aeabi_dsub+0x5c>
 8001b36:	e0c1      	b.n	8001cbc <__aeabi_dsub+0x1e0>
 8001b38:	48be      	ldr	r0, [pc, #760]	; (8001e34 <__aeabi_dsub+0x358>)
 8001b3a:	4580      	cmp	r8, r0
 8001b3c:	d100      	bne.n	8001b40 <__aeabi_dsub+0x64>
 8001b3e:	e151      	b.n	8001de4 <__aeabi_dsub+0x308>
 8001b40:	2080      	movs	r0, #128	; 0x80
 8001b42:	0400      	lsls	r0, r0, #16
 8001b44:	4301      	orrs	r1, r0
 8001b46:	2a38      	cmp	r2, #56	; 0x38
 8001b48:	dd00      	ble.n	8001b4c <__aeabi_dsub+0x70>
 8001b4a:	e17b      	b.n	8001e44 <__aeabi_dsub+0x368>
 8001b4c:	2a1f      	cmp	r2, #31
 8001b4e:	dd00      	ble.n	8001b52 <__aeabi_dsub+0x76>
 8001b50:	e1ee      	b.n	8001f30 <__aeabi_dsub+0x454>
 8001b52:	2020      	movs	r0, #32
 8001b54:	003e      	movs	r6, r7
 8001b56:	1a80      	subs	r0, r0, r2
 8001b58:	000c      	movs	r4, r1
 8001b5a:	40d6      	lsrs	r6, r2
 8001b5c:	40d1      	lsrs	r1, r2
 8001b5e:	4087      	lsls	r7, r0
 8001b60:	4662      	mov	r2, ip
 8001b62:	4084      	lsls	r4, r0
 8001b64:	1a52      	subs	r2, r2, r1
 8001b66:	1e78      	subs	r0, r7, #1
 8001b68:	4187      	sbcs	r7, r0
 8001b6a:	4694      	mov	ip, r2
 8001b6c:	4334      	orrs	r4, r6
 8001b6e:	4327      	orrs	r7, r4
 8001b70:	1bdc      	subs	r4, r3, r7
 8001b72:	42a3      	cmp	r3, r4
 8001b74:	419b      	sbcs	r3, r3
 8001b76:	4662      	mov	r2, ip
 8001b78:	425b      	negs	r3, r3
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	4699      	mov	r9, r3
 8001b7e:	464b      	mov	r3, r9
 8001b80:	021b      	lsls	r3, r3, #8
 8001b82:	d400      	bmi.n	8001b86 <__aeabi_dsub+0xaa>
 8001b84:	e118      	b.n	8001db8 <__aeabi_dsub+0x2dc>
 8001b86:	464b      	mov	r3, r9
 8001b88:	0258      	lsls	r0, r3, #9
 8001b8a:	0a43      	lsrs	r3, r0, #9
 8001b8c:	4699      	mov	r9, r3
 8001b8e:	464b      	mov	r3, r9
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d100      	bne.n	8001b96 <__aeabi_dsub+0xba>
 8001b94:	e137      	b.n	8001e06 <__aeabi_dsub+0x32a>
 8001b96:	4648      	mov	r0, r9
 8001b98:	f000 fc24 	bl	80023e4 <__clzsi2>
 8001b9c:	0001      	movs	r1, r0
 8001b9e:	3908      	subs	r1, #8
 8001ba0:	2320      	movs	r3, #32
 8001ba2:	0022      	movs	r2, r4
 8001ba4:	4648      	mov	r0, r9
 8001ba6:	1a5b      	subs	r3, r3, r1
 8001ba8:	40da      	lsrs	r2, r3
 8001baa:	4088      	lsls	r0, r1
 8001bac:	408c      	lsls	r4, r1
 8001bae:	4643      	mov	r3, r8
 8001bb0:	4310      	orrs	r0, r2
 8001bb2:	4588      	cmp	r8, r1
 8001bb4:	dd00      	ble.n	8001bb8 <__aeabi_dsub+0xdc>
 8001bb6:	e136      	b.n	8001e26 <__aeabi_dsub+0x34a>
 8001bb8:	1ac9      	subs	r1, r1, r3
 8001bba:	1c4b      	adds	r3, r1, #1
 8001bbc:	2b1f      	cmp	r3, #31
 8001bbe:	dd00      	ble.n	8001bc2 <__aeabi_dsub+0xe6>
 8001bc0:	e0ea      	b.n	8001d98 <__aeabi_dsub+0x2bc>
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	0026      	movs	r6, r4
 8001bc6:	1ad2      	subs	r2, r2, r3
 8001bc8:	0001      	movs	r1, r0
 8001bca:	4094      	lsls	r4, r2
 8001bcc:	40de      	lsrs	r6, r3
 8001bce:	40d8      	lsrs	r0, r3
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	4091      	lsls	r1, r2
 8001bd4:	1e62      	subs	r2, r4, #1
 8001bd6:	4194      	sbcs	r4, r2
 8001bd8:	4681      	mov	r9, r0
 8001bda:	4698      	mov	r8, r3
 8001bdc:	4331      	orrs	r1, r6
 8001bde:	430c      	orrs	r4, r1
 8001be0:	0763      	lsls	r3, r4, #29
 8001be2:	d009      	beq.n	8001bf8 <__aeabi_dsub+0x11c>
 8001be4:	230f      	movs	r3, #15
 8001be6:	4023      	ands	r3, r4
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d005      	beq.n	8001bf8 <__aeabi_dsub+0x11c>
 8001bec:	1d23      	adds	r3, r4, #4
 8001bee:	42a3      	cmp	r3, r4
 8001bf0:	41a4      	sbcs	r4, r4
 8001bf2:	4264      	negs	r4, r4
 8001bf4:	44a1      	add	r9, r4
 8001bf6:	001c      	movs	r4, r3
 8001bf8:	464b      	mov	r3, r9
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	d400      	bmi.n	8001c00 <__aeabi_dsub+0x124>
 8001bfe:	e0de      	b.n	8001dbe <__aeabi_dsub+0x2e2>
 8001c00:	4641      	mov	r1, r8
 8001c02:	4b8c      	ldr	r3, [pc, #560]	; (8001e34 <__aeabi_dsub+0x358>)
 8001c04:	3101      	adds	r1, #1
 8001c06:	4299      	cmp	r1, r3
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dsub+0x130>
 8001c0a:	e0e7      	b.n	8001ddc <__aeabi_dsub+0x300>
 8001c0c:	464b      	mov	r3, r9
 8001c0e:	488a      	ldr	r0, [pc, #552]	; (8001e38 <__aeabi_dsub+0x35c>)
 8001c10:	08e4      	lsrs	r4, r4, #3
 8001c12:	4003      	ands	r3, r0
 8001c14:	0018      	movs	r0, r3
 8001c16:	0549      	lsls	r1, r1, #21
 8001c18:	075b      	lsls	r3, r3, #29
 8001c1a:	0240      	lsls	r0, r0, #9
 8001c1c:	4323      	orrs	r3, r4
 8001c1e:	0d4a      	lsrs	r2, r1, #21
 8001c20:	0b04      	lsrs	r4, r0, #12
 8001c22:	0512      	lsls	r2, r2, #20
 8001c24:	07ed      	lsls	r5, r5, #31
 8001c26:	4322      	orrs	r2, r4
 8001c28:	432a      	orrs	r2, r5
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	0011      	movs	r1, r2
 8001c2e:	bcf0      	pop	{r4, r5, r6, r7}
 8001c30:	46bb      	mov	fp, r7
 8001c32:	46b2      	mov	sl, r6
 8001c34:	46a9      	mov	r9, r5
 8001c36:	46a0      	mov	r8, r4
 8001c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c3a:	4642      	mov	r2, r8
 8001c3c:	1a12      	subs	r2, r2, r0
 8001c3e:	2a00      	cmp	r2, #0
 8001c40:	dd52      	ble.n	8001ce8 <__aeabi_dsub+0x20c>
 8001c42:	2800      	cmp	r0, #0
 8001c44:	d100      	bne.n	8001c48 <__aeabi_dsub+0x16c>
 8001c46:	e09c      	b.n	8001d82 <__aeabi_dsub+0x2a6>
 8001c48:	45a0      	cmp	r8, r4
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_dsub+0x172>
 8001c4c:	e0ca      	b.n	8001de4 <__aeabi_dsub+0x308>
 8001c4e:	2080      	movs	r0, #128	; 0x80
 8001c50:	0400      	lsls	r0, r0, #16
 8001c52:	4301      	orrs	r1, r0
 8001c54:	2a38      	cmp	r2, #56	; 0x38
 8001c56:	dd00      	ble.n	8001c5a <__aeabi_dsub+0x17e>
 8001c58:	e149      	b.n	8001eee <__aeabi_dsub+0x412>
 8001c5a:	2a1f      	cmp	r2, #31
 8001c5c:	dc00      	bgt.n	8001c60 <__aeabi_dsub+0x184>
 8001c5e:	e197      	b.n	8001f90 <__aeabi_dsub+0x4b4>
 8001c60:	0010      	movs	r0, r2
 8001c62:	000e      	movs	r6, r1
 8001c64:	3820      	subs	r0, #32
 8001c66:	40c6      	lsrs	r6, r0
 8001c68:	2a20      	cmp	r2, #32
 8001c6a:	d004      	beq.n	8001c76 <__aeabi_dsub+0x19a>
 8001c6c:	2040      	movs	r0, #64	; 0x40
 8001c6e:	1a82      	subs	r2, r0, r2
 8001c70:	4091      	lsls	r1, r2
 8001c72:	430f      	orrs	r7, r1
 8001c74:	46b9      	mov	r9, r7
 8001c76:	464c      	mov	r4, r9
 8001c78:	1e62      	subs	r2, r4, #1
 8001c7a:	4194      	sbcs	r4, r2
 8001c7c:	4334      	orrs	r4, r6
 8001c7e:	e13a      	b.n	8001ef6 <__aeabi_dsub+0x41a>
 8001c80:	000a      	movs	r2, r1
 8001c82:	433a      	orrs	r2, r7
 8001c84:	d028      	beq.n	8001cd8 <__aeabi_dsub+0x1fc>
 8001c86:	46b3      	mov	fp, r6
 8001c88:	42b5      	cmp	r5, r6
 8001c8a:	d02b      	beq.n	8001ce4 <__aeabi_dsub+0x208>
 8001c8c:	4a6b      	ldr	r2, [pc, #428]	; (8001e3c <__aeabi_dsub+0x360>)
 8001c8e:	4442      	add	r2, r8
 8001c90:	2a00      	cmp	r2, #0
 8001c92:	d05d      	beq.n	8001d50 <__aeabi_dsub+0x274>
 8001c94:	4642      	mov	r2, r8
 8001c96:	4644      	mov	r4, r8
 8001c98:	1a82      	subs	r2, r0, r2
 8001c9a:	2c00      	cmp	r4, #0
 8001c9c:	d000      	beq.n	8001ca0 <__aeabi_dsub+0x1c4>
 8001c9e:	e0f5      	b.n	8001e8c <__aeabi_dsub+0x3b0>
 8001ca0:	4665      	mov	r5, ip
 8001ca2:	431d      	orrs	r5, r3
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x1cc>
 8001ca6:	e19c      	b.n	8001fe2 <__aeabi_dsub+0x506>
 8001ca8:	1e55      	subs	r5, r2, #1
 8001caa:	2a01      	cmp	r2, #1
 8001cac:	d100      	bne.n	8001cb0 <__aeabi_dsub+0x1d4>
 8001cae:	e1fb      	b.n	80020a8 <__aeabi_dsub+0x5cc>
 8001cb0:	4c60      	ldr	r4, [pc, #384]	; (8001e34 <__aeabi_dsub+0x358>)
 8001cb2:	42a2      	cmp	r2, r4
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_dsub+0x1dc>
 8001cb6:	e1bd      	b.n	8002034 <__aeabi_dsub+0x558>
 8001cb8:	002a      	movs	r2, r5
 8001cba:	e0f0      	b.n	8001e9e <__aeabi_dsub+0x3c2>
 8001cbc:	0008      	movs	r0, r1
 8001cbe:	4338      	orrs	r0, r7
 8001cc0:	d100      	bne.n	8001cc4 <__aeabi_dsub+0x1e8>
 8001cc2:	e0c3      	b.n	8001e4c <__aeabi_dsub+0x370>
 8001cc4:	1e50      	subs	r0, r2, #1
 8001cc6:	2a01      	cmp	r2, #1
 8001cc8:	d100      	bne.n	8001ccc <__aeabi_dsub+0x1f0>
 8001cca:	e1a8      	b.n	800201e <__aeabi_dsub+0x542>
 8001ccc:	4c59      	ldr	r4, [pc, #356]	; (8001e34 <__aeabi_dsub+0x358>)
 8001cce:	42a2      	cmp	r2, r4
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0x1f8>
 8001cd2:	e087      	b.n	8001de4 <__aeabi_dsub+0x308>
 8001cd4:	0002      	movs	r2, r0
 8001cd6:	e736      	b.n	8001b46 <__aeabi_dsub+0x6a>
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4056      	eors	r6, r2
 8001cdc:	46b3      	mov	fp, r6
 8001cde:	42b5      	cmp	r5, r6
 8001ce0:	d000      	beq.n	8001ce4 <__aeabi_dsub+0x208>
 8001ce2:	e721      	b.n	8001b28 <__aeabi_dsub+0x4c>
 8001ce4:	4a55      	ldr	r2, [pc, #340]	; (8001e3c <__aeabi_dsub+0x360>)
 8001ce6:	4442      	add	r2, r8
 8001ce8:	2a00      	cmp	r2, #0
 8001cea:	d100      	bne.n	8001cee <__aeabi_dsub+0x212>
 8001cec:	e0b5      	b.n	8001e5a <__aeabi_dsub+0x37e>
 8001cee:	4642      	mov	r2, r8
 8001cf0:	4644      	mov	r4, r8
 8001cf2:	1a82      	subs	r2, r0, r2
 8001cf4:	2c00      	cmp	r4, #0
 8001cf6:	d100      	bne.n	8001cfa <__aeabi_dsub+0x21e>
 8001cf8:	e138      	b.n	8001f6c <__aeabi_dsub+0x490>
 8001cfa:	4e4e      	ldr	r6, [pc, #312]	; (8001e34 <__aeabi_dsub+0x358>)
 8001cfc:	42b0      	cmp	r0, r6
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dsub+0x226>
 8001d00:	e1de      	b.n	80020c0 <__aeabi_dsub+0x5e4>
 8001d02:	2680      	movs	r6, #128	; 0x80
 8001d04:	4664      	mov	r4, ip
 8001d06:	0436      	lsls	r6, r6, #16
 8001d08:	4334      	orrs	r4, r6
 8001d0a:	46a4      	mov	ip, r4
 8001d0c:	2a38      	cmp	r2, #56	; 0x38
 8001d0e:	dd00      	ble.n	8001d12 <__aeabi_dsub+0x236>
 8001d10:	e196      	b.n	8002040 <__aeabi_dsub+0x564>
 8001d12:	2a1f      	cmp	r2, #31
 8001d14:	dd00      	ble.n	8001d18 <__aeabi_dsub+0x23c>
 8001d16:	e224      	b.n	8002162 <__aeabi_dsub+0x686>
 8001d18:	2620      	movs	r6, #32
 8001d1a:	1ab4      	subs	r4, r6, r2
 8001d1c:	46a2      	mov	sl, r4
 8001d1e:	4664      	mov	r4, ip
 8001d20:	4656      	mov	r6, sl
 8001d22:	40b4      	lsls	r4, r6
 8001d24:	46a1      	mov	r9, r4
 8001d26:	001c      	movs	r4, r3
 8001d28:	464e      	mov	r6, r9
 8001d2a:	40d4      	lsrs	r4, r2
 8001d2c:	4326      	orrs	r6, r4
 8001d2e:	0034      	movs	r4, r6
 8001d30:	4656      	mov	r6, sl
 8001d32:	40b3      	lsls	r3, r6
 8001d34:	1e5e      	subs	r6, r3, #1
 8001d36:	41b3      	sbcs	r3, r6
 8001d38:	431c      	orrs	r4, r3
 8001d3a:	4663      	mov	r3, ip
 8001d3c:	40d3      	lsrs	r3, r2
 8001d3e:	18c9      	adds	r1, r1, r3
 8001d40:	19e4      	adds	r4, r4, r7
 8001d42:	42bc      	cmp	r4, r7
 8001d44:	41bf      	sbcs	r7, r7
 8001d46:	427f      	negs	r7, r7
 8001d48:	46b9      	mov	r9, r7
 8001d4a:	4680      	mov	r8, r0
 8001d4c:	4489      	add	r9, r1
 8001d4e:	e0d8      	b.n	8001f02 <__aeabi_dsub+0x426>
 8001d50:	4640      	mov	r0, r8
 8001d52:	4c3b      	ldr	r4, [pc, #236]	; (8001e40 <__aeabi_dsub+0x364>)
 8001d54:	3001      	adds	r0, #1
 8001d56:	4220      	tst	r0, r4
 8001d58:	d000      	beq.n	8001d5c <__aeabi_dsub+0x280>
 8001d5a:	e0b4      	b.n	8001ec6 <__aeabi_dsub+0x3ea>
 8001d5c:	4640      	mov	r0, r8
 8001d5e:	2800      	cmp	r0, #0
 8001d60:	d000      	beq.n	8001d64 <__aeabi_dsub+0x288>
 8001d62:	e144      	b.n	8001fee <__aeabi_dsub+0x512>
 8001d64:	4660      	mov	r0, ip
 8001d66:	4318      	orrs	r0, r3
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x290>
 8001d6a:	e190      	b.n	800208e <__aeabi_dsub+0x5b2>
 8001d6c:	0008      	movs	r0, r1
 8001d6e:	4338      	orrs	r0, r7
 8001d70:	d000      	beq.n	8001d74 <__aeabi_dsub+0x298>
 8001d72:	e1aa      	b.n	80020ca <__aeabi_dsub+0x5ee>
 8001d74:	4661      	mov	r1, ip
 8001d76:	08db      	lsrs	r3, r3, #3
 8001d78:	0749      	lsls	r1, r1, #29
 8001d7a:	430b      	orrs	r3, r1
 8001d7c:	4661      	mov	r1, ip
 8001d7e:	08cc      	lsrs	r4, r1, #3
 8001d80:	e027      	b.n	8001dd2 <__aeabi_dsub+0x2f6>
 8001d82:	0008      	movs	r0, r1
 8001d84:	4338      	orrs	r0, r7
 8001d86:	d061      	beq.n	8001e4c <__aeabi_dsub+0x370>
 8001d88:	1e50      	subs	r0, r2, #1
 8001d8a:	2a01      	cmp	r2, #1
 8001d8c:	d100      	bne.n	8001d90 <__aeabi_dsub+0x2b4>
 8001d8e:	e139      	b.n	8002004 <__aeabi_dsub+0x528>
 8001d90:	42a2      	cmp	r2, r4
 8001d92:	d027      	beq.n	8001de4 <__aeabi_dsub+0x308>
 8001d94:	0002      	movs	r2, r0
 8001d96:	e75d      	b.n	8001c54 <__aeabi_dsub+0x178>
 8001d98:	0002      	movs	r2, r0
 8001d9a:	391f      	subs	r1, #31
 8001d9c:	40ca      	lsrs	r2, r1
 8001d9e:	0011      	movs	r1, r2
 8001da0:	2b20      	cmp	r3, #32
 8001da2:	d003      	beq.n	8001dac <__aeabi_dsub+0x2d0>
 8001da4:	2240      	movs	r2, #64	; 0x40
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	4098      	lsls	r0, r3
 8001daa:	4304      	orrs	r4, r0
 8001dac:	1e63      	subs	r3, r4, #1
 8001dae:	419c      	sbcs	r4, r3
 8001db0:	2300      	movs	r3, #0
 8001db2:	4699      	mov	r9, r3
 8001db4:	4698      	mov	r8, r3
 8001db6:	430c      	orrs	r4, r1
 8001db8:	0763      	lsls	r3, r4, #29
 8001dba:	d000      	beq.n	8001dbe <__aeabi_dsub+0x2e2>
 8001dbc:	e712      	b.n	8001be4 <__aeabi_dsub+0x108>
 8001dbe:	464b      	mov	r3, r9
 8001dc0:	464a      	mov	r2, r9
 8001dc2:	08e4      	lsrs	r4, r4, #3
 8001dc4:	075b      	lsls	r3, r3, #29
 8001dc6:	4323      	orrs	r3, r4
 8001dc8:	08d4      	lsrs	r4, r2, #3
 8001dca:	4642      	mov	r2, r8
 8001dcc:	4919      	ldr	r1, [pc, #100]	; (8001e34 <__aeabi_dsub+0x358>)
 8001dce:	428a      	cmp	r2, r1
 8001dd0:	d00e      	beq.n	8001df0 <__aeabi_dsub+0x314>
 8001dd2:	0324      	lsls	r4, r4, #12
 8001dd4:	0552      	lsls	r2, r2, #21
 8001dd6:	0b24      	lsrs	r4, r4, #12
 8001dd8:	0d52      	lsrs	r2, r2, #21
 8001dda:	e722      	b.n	8001c22 <__aeabi_dsub+0x146>
 8001ddc:	000a      	movs	r2, r1
 8001dde:	2400      	movs	r4, #0
 8001de0:	2300      	movs	r3, #0
 8001de2:	e71e      	b.n	8001c22 <__aeabi_dsub+0x146>
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	4662      	mov	r2, ip
 8001de8:	0752      	lsls	r2, r2, #29
 8001dea:	4313      	orrs	r3, r2
 8001dec:	4662      	mov	r2, ip
 8001dee:	08d4      	lsrs	r4, r2, #3
 8001df0:	001a      	movs	r2, r3
 8001df2:	4322      	orrs	r2, r4
 8001df4:	d100      	bne.n	8001df8 <__aeabi_dsub+0x31c>
 8001df6:	e1fc      	b.n	80021f2 <__aeabi_dsub+0x716>
 8001df8:	2280      	movs	r2, #128	; 0x80
 8001dfa:	0312      	lsls	r2, r2, #12
 8001dfc:	4314      	orrs	r4, r2
 8001dfe:	0324      	lsls	r4, r4, #12
 8001e00:	4a0c      	ldr	r2, [pc, #48]	; (8001e34 <__aeabi_dsub+0x358>)
 8001e02:	0b24      	lsrs	r4, r4, #12
 8001e04:	e70d      	b.n	8001c22 <__aeabi_dsub+0x146>
 8001e06:	0020      	movs	r0, r4
 8001e08:	f000 faec 	bl	80023e4 <__clzsi2>
 8001e0c:	0001      	movs	r1, r0
 8001e0e:	3118      	adds	r1, #24
 8001e10:	291f      	cmp	r1, #31
 8001e12:	dc00      	bgt.n	8001e16 <__aeabi_dsub+0x33a>
 8001e14:	e6c4      	b.n	8001ba0 <__aeabi_dsub+0xc4>
 8001e16:	3808      	subs	r0, #8
 8001e18:	4084      	lsls	r4, r0
 8001e1a:	4643      	mov	r3, r8
 8001e1c:	0020      	movs	r0, r4
 8001e1e:	2400      	movs	r4, #0
 8001e20:	4588      	cmp	r8, r1
 8001e22:	dc00      	bgt.n	8001e26 <__aeabi_dsub+0x34a>
 8001e24:	e6c8      	b.n	8001bb8 <__aeabi_dsub+0xdc>
 8001e26:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <__aeabi_dsub+0x35c>)
 8001e28:	1a5b      	subs	r3, r3, r1
 8001e2a:	4010      	ands	r0, r2
 8001e2c:	4698      	mov	r8, r3
 8001e2e:	4681      	mov	r9, r0
 8001e30:	e6d6      	b.n	8001be0 <__aeabi_dsub+0x104>
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	000007ff 	.word	0x000007ff
 8001e38:	ff7fffff 	.word	0xff7fffff
 8001e3c:	fffff801 	.word	0xfffff801
 8001e40:	000007fe 	.word	0x000007fe
 8001e44:	430f      	orrs	r7, r1
 8001e46:	1e7a      	subs	r2, r7, #1
 8001e48:	4197      	sbcs	r7, r2
 8001e4a:	e691      	b.n	8001b70 <__aeabi_dsub+0x94>
 8001e4c:	4661      	mov	r1, ip
 8001e4e:	08db      	lsrs	r3, r3, #3
 8001e50:	0749      	lsls	r1, r1, #29
 8001e52:	430b      	orrs	r3, r1
 8001e54:	4661      	mov	r1, ip
 8001e56:	08cc      	lsrs	r4, r1, #3
 8001e58:	e7b8      	b.n	8001dcc <__aeabi_dsub+0x2f0>
 8001e5a:	4640      	mov	r0, r8
 8001e5c:	4cd3      	ldr	r4, [pc, #844]	; (80021ac <__aeabi_dsub+0x6d0>)
 8001e5e:	3001      	adds	r0, #1
 8001e60:	4220      	tst	r0, r4
 8001e62:	d000      	beq.n	8001e66 <__aeabi_dsub+0x38a>
 8001e64:	e0a2      	b.n	8001fac <__aeabi_dsub+0x4d0>
 8001e66:	4640      	mov	r0, r8
 8001e68:	2800      	cmp	r0, #0
 8001e6a:	d000      	beq.n	8001e6e <__aeabi_dsub+0x392>
 8001e6c:	e101      	b.n	8002072 <__aeabi_dsub+0x596>
 8001e6e:	4660      	mov	r0, ip
 8001e70:	4318      	orrs	r0, r3
 8001e72:	d100      	bne.n	8001e76 <__aeabi_dsub+0x39a>
 8001e74:	e15e      	b.n	8002134 <__aeabi_dsub+0x658>
 8001e76:	0008      	movs	r0, r1
 8001e78:	4338      	orrs	r0, r7
 8001e7a:	d000      	beq.n	8001e7e <__aeabi_dsub+0x3a2>
 8001e7c:	e15f      	b.n	800213e <__aeabi_dsub+0x662>
 8001e7e:	4661      	mov	r1, ip
 8001e80:	08db      	lsrs	r3, r3, #3
 8001e82:	0749      	lsls	r1, r1, #29
 8001e84:	430b      	orrs	r3, r1
 8001e86:	4661      	mov	r1, ip
 8001e88:	08cc      	lsrs	r4, r1, #3
 8001e8a:	e7a2      	b.n	8001dd2 <__aeabi_dsub+0x2f6>
 8001e8c:	4dc8      	ldr	r5, [pc, #800]	; (80021b0 <__aeabi_dsub+0x6d4>)
 8001e8e:	42a8      	cmp	r0, r5
 8001e90:	d100      	bne.n	8001e94 <__aeabi_dsub+0x3b8>
 8001e92:	e0cf      	b.n	8002034 <__aeabi_dsub+0x558>
 8001e94:	2580      	movs	r5, #128	; 0x80
 8001e96:	4664      	mov	r4, ip
 8001e98:	042d      	lsls	r5, r5, #16
 8001e9a:	432c      	orrs	r4, r5
 8001e9c:	46a4      	mov	ip, r4
 8001e9e:	2a38      	cmp	r2, #56	; 0x38
 8001ea0:	dc56      	bgt.n	8001f50 <__aeabi_dsub+0x474>
 8001ea2:	2a1f      	cmp	r2, #31
 8001ea4:	dd00      	ble.n	8001ea8 <__aeabi_dsub+0x3cc>
 8001ea6:	e0d1      	b.n	800204c <__aeabi_dsub+0x570>
 8001ea8:	2520      	movs	r5, #32
 8001eaa:	001e      	movs	r6, r3
 8001eac:	1aad      	subs	r5, r5, r2
 8001eae:	4664      	mov	r4, ip
 8001eb0:	40ab      	lsls	r3, r5
 8001eb2:	40ac      	lsls	r4, r5
 8001eb4:	40d6      	lsrs	r6, r2
 8001eb6:	1e5d      	subs	r5, r3, #1
 8001eb8:	41ab      	sbcs	r3, r5
 8001eba:	4334      	orrs	r4, r6
 8001ebc:	4323      	orrs	r3, r4
 8001ebe:	4664      	mov	r4, ip
 8001ec0:	40d4      	lsrs	r4, r2
 8001ec2:	1b09      	subs	r1, r1, r4
 8001ec4:	e049      	b.n	8001f5a <__aeabi_dsub+0x47e>
 8001ec6:	4660      	mov	r0, ip
 8001ec8:	1bdc      	subs	r4, r3, r7
 8001eca:	1a46      	subs	r6, r0, r1
 8001ecc:	42a3      	cmp	r3, r4
 8001ece:	4180      	sbcs	r0, r0
 8001ed0:	4240      	negs	r0, r0
 8001ed2:	4681      	mov	r9, r0
 8001ed4:	0030      	movs	r0, r6
 8001ed6:	464e      	mov	r6, r9
 8001ed8:	1b80      	subs	r0, r0, r6
 8001eda:	4681      	mov	r9, r0
 8001edc:	0200      	lsls	r0, r0, #8
 8001ede:	d476      	bmi.n	8001fce <__aeabi_dsub+0x4f2>
 8001ee0:	464b      	mov	r3, r9
 8001ee2:	4323      	orrs	r3, r4
 8001ee4:	d000      	beq.n	8001ee8 <__aeabi_dsub+0x40c>
 8001ee6:	e652      	b.n	8001b8e <__aeabi_dsub+0xb2>
 8001ee8:	2400      	movs	r4, #0
 8001eea:	2500      	movs	r5, #0
 8001eec:	e771      	b.n	8001dd2 <__aeabi_dsub+0x2f6>
 8001eee:	4339      	orrs	r1, r7
 8001ef0:	000c      	movs	r4, r1
 8001ef2:	1e62      	subs	r2, r4, #1
 8001ef4:	4194      	sbcs	r4, r2
 8001ef6:	18e4      	adds	r4, r4, r3
 8001ef8:	429c      	cmp	r4, r3
 8001efa:	419b      	sbcs	r3, r3
 8001efc:	425b      	negs	r3, r3
 8001efe:	4463      	add	r3, ip
 8001f00:	4699      	mov	r9, r3
 8001f02:	464b      	mov	r3, r9
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	d400      	bmi.n	8001f0a <__aeabi_dsub+0x42e>
 8001f08:	e756      	b.n	8001db8 <__aeabi_dsub+0x2dc>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	469c      	mov	ip, r3
 8001f0e:	4ba8      	ldr	r3, [pc, #672]	; (80021b0 <__aeabi_dsub+0x6d4>)
 8001f10:	44e0      	add	r8, ip
 8001f12:	4598      	cmp	r8, r3
 8001f14:	d038      	beq.n	8001f88 <__aeabi_dsub+0x4ac>
 8001f16:	464b      	mov	r3, r9
 8001f18:	48a6      	ldr	r0, [pc, #664]	; (80021b4 <__aeabi_dsub+0x6d8>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4003      	ands	r3, r0
 8001f1e:	0018      	movs	r0, r3
 8001f20:	0863      	lsrs	r3, r4, #1
 8001f22:	4014      	ands	r4, r2
 8001f24:	431c      	orrs	r4, r3
 8001f26:	07c3      	lsls	r3, r0, #31
 8001f28:	431c      	orrs	r4, r3
 8001f2a:	0843      	lsrs	r3, r0, #1
 8001f2c:	4699      	mov	r9, r3
 8001f2e:	e657      	b.n	8001be0 <__aeabi_dsub+0x104>
 8001f30:	0010      	movs	r0, r2
 8001f32:	000e      	movs	r6, r1
 8001f34:	3820      	subs	r0, #32
 8001f36:	40c6      	lsrs	r6, r0
 8001f38:	2a20      	cmp	r2, #32
 8001f3a:	d004      	beq.n	8001f46 <__aeabi_dsub+0x46a>
 8001f3c:	2040      	movs	r0, #64	; 0x40
 8001f3e:	1a82      	subs	r2, r0, r2
 8001f40:	4091      	lsls	r1, r2
 8001f42:	430f      	orrs	r7, r1
 8001f44:	46b9      	mov	r9, r7
 8001f46:	464f      	mov	r7, r9
 8001f48:	1e7a      	subs	r2, r7, #1
 8001f4a:	4197      	sbcs	r7, r2
 8001f4c:	4337      	orrs	r7, r6
 8001f4e:	e60f      	b.n	8001b70 <__aeabi_dsub+0x94>
 8001f50:	4662      	mov	r2, ip
 8001f52:	431a      	orrs	r2, r3
 8001f54:	0013      	movs	r3, r2
 8001f56:	1e5a      	subs	r2, r3, #1
 8001f58:	4193      	sbcs	r3, r2
 8001f5a:	1afc      	subs	r4, r7, r3
 8001f5c:	42a7      	cmp	r7, r4
 8001f5e:	41bf      	sbcs	r7, r7
 8001f60:	427f      	negs	r7, r7
 8001f62:	1bcb      	subs	r3, r1, r7
 8001f64:	4699      	mov	r9, r3
 8001f66:	465d      	mov	r5, fp
 8001f68:	4680      	mov	r8, r0
 8001f6a:	e608      	b.n	8001b7e <__aeabi_dsub+0xa2>
 8001f6c:	4666      	mov	r6, ip
 8001f6e:	431e      	orrs	r6, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_dsub+0x498>
 8001f72:	e0be      	b.n	80020f2 <__aeabi_dsub+0x616>
 8001f74:	1e56      	subs	r6, r2, #1
 8001f76:	2a01      	cmp	r2, #1
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x4a0>
 8001f7a:	e109      	b.n	8002190 <__aeabi_dsub+0x6b4>
 8001f7c:	4c8c      	ldr	r4, [pc, #560]	; (80021b0 <__aeabi_dsub+0x6d4>)
 8001f7e:	42a2      	cmp	r2, r4
 8001f80:	d100      	bne.n	8001f84 <__aeabi_dsub+0x4a8>
 8001f82:	e119      	b.n	80021b8 <__aeabi_dsub+0x6dc>
 8001f84:	0032      	movs	r2, r6
 8001f86:	e6c1      	b.n	8001d0c <__aeabi_dsub+0x230>
 8001f88:	4642      	mov	r2, r8
 8001f8a:	2400      	movs	r4, #0
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e648      	b.n	8001c22 <__aeabi_dsub+0x146>
 8001f90:	2020      	movs	r0, #32
 8001f92:	000c      	movs	r4, r1
 8001f94:	1a80      	subs	r0, r0, r2
 8001f96:	003e      	movs	r6, r7
 8001f98:	4087      	lsls	r7, r0
 8001f9a:	4084      	lsls	r4, r0
 8001f9c:	40d6      	lsrs	r6, r2
 8001f9e:	1e78      	subs	r0, r7, #1
 8001fa0:	4187      	sbcs	r7, r0
 8001fa2:	40d1      	lsrs	r1, r2
 8001fa4:	4334      	orrs	r4, r6
 8001fa6:	433c      	orrs	r4, r7
 8001fa8:	448c      	add	ip, r1
 8001faa:	e7a4      	b.n	8001ef6 <__aeabi_dsub+0x41a>
 8001fac:	4a80      	ldr	r2, [pc, #512]	; (80021b0 <__aeabi_dsub+0x6d4>)
 8001fae:	4290      	cmp	r0, r2
 8001fb0:	d100      	bne.n	8001fb4 <__aeabi_dsub+0x4d8>
 8001fb2:	e0e9      	b.n	8002188 <__aeabi_dsub+0x6ac>
 8001fb4:	19df      	adds	r7, r3, r7
 8001fb6:	429f      	cmp	r7, r3
 8001fb8:	419b      	sbcs	r3, r3
 8001fba:	4461      	add	r1, ip
 8001fbc:	425b      	negs	r3, r3
 8001fbe:	18c9      	adds	r1, r1, r3
 8001fc0:	07cc      	lsls	r4, r1, #31
 8001fc2:	087f      	lsrs	r7, r7, #1
 8001fc4:	084b      	lsrs	r3, r1, #1
 8001fc6:	4699      	mov	r9, r3
 8001fc8:	4680      	mov	r8, r0
 8001fca:	433c      	orrs	r4, r7
 8001fcc:	e6f4      	b.n	8001db8 <__aeabi_dsub+0x2dc>
 8001fce:	1afc      	subs	r4, r7, r3
 8001fd0:	42a7      	cmp	r7, r4
 8001fd2:	41bf      	sbcs	r7, r7
 8001fd4:	4663      	mov	r3, ip
 8001fd6:	427f      	negs	r7, r7
 8001fd8:	1ac9      	subs	r1, r1, r3
 8001fda:	1bcb      	subs	r3, r1, r7
 8001fdc:	4699      	mov	r9, r3
 8001fde:	465d      	mov	r5, fp
 8001fe0:	e5d5      	b.n	8001b8e <__aeabi_dsub+0xb2>
 8001fe2:	08ff      	lsrs	r7, r7, #3
 8001fe4:	074b      	lsls	r3, r1, #29
 8001fe6:	465d      	mov	r5, fp
 8001fe8:	433b      	orrs	r3, r7
 8001fea:	08cc      	lsrs	r4, r1, #3
 8001fec:	e6ee      	b.n	8001dcc <__aeabi_dsub+0x2f0>
 8001fee:	4662      	mov	r2, ip
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	d000      	beq.n	8001ff6 <__aeabi_dsub+0x51a>
 8001ff4:	e082      	b.n	80020fc <__aeabi_dsub+0x620>
 8001ff6:	000b      	movs	r3, r1
 8001ff8:	433b      	orrs	r3, r7
 8001ffa:	d11b      	bne.n	8002034 <__aeabi_dsub+0x558>
 8001ffc:	2480      	movs	r4, #128	; 0x80
 8001ffe:	2500      	movs	r5, #0
 8002000:	0324      	lsls	r4, r4, #12
 8002002:	e6f9      	b.n	8001df8 <__aeabi_dsub+0x31c>
 8002004:	19dc      	adds	r4, r3, r7
 8002006:	429c      	cmp	r4, r3
 8002008:	419b      	sbcs	r3, r3
 800200a:	4461      	add	r1, ip
 800200c:	4689      	mov	r9, r1
 800200e:	425b      	negs	r3, r3
 8002010:	4499      	add	r9, r3
 8002012:	464b      	mov	r3, r9
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	d444      	bmi.n	80020a2 <__aeabi_dsub+0x5c6>
 8002018:	2301      	movs	r3, #1
 800201a:	4698      	mov	r8, r3
 800201c:	e6cc      	b.n	8001db8 <__aeabi_dsub+0x2dc>
 800201e:	1bdc      	subs	r4, r3, r7
 8002020:	4662      	mov	r2, ip
 8002022:	42a3      	cmp	r3, r4
 8002024:	419b      	sbcs	r3, r3
 8002026:	1a51      	subs	r1, r2, r1
 8002028:	425b      	negs	r3, r3
 800202a:	1acb      	subs	r3, r1, r3
 800202c:	4699      	mov	r9, r3
 800202e:	2301      	movs	r3, #1
 8002030:	4698      	mov	r8, r3
 8002032:	e5a4      	b.n	8001b7e <__aeabi_dsub+0xa2>
 8002034:	08ff      	lsrs	r7, r7, #3
 8002036:	074b      	lsls	r3, r1, #29
 8002038:	465d      	mov	r5, fp
 800203a:	433b      	orrs	r3, r7
 800203c:	08cc      	lsrs	r4, r1, #3
 800203e:	e6d7      	b.n	8001df0 <__aeabi_dsub+0x314>
 8002040:	4662      	mov	r2, ip
 8002042:	431a      	orrs	r2, r3
 8002044:	0014      	movs	r4, r2
 8002046:	1e63      	subs	r3, r4, #1
 8002048:	419c      	sbcs	r4, r3
 800204a:	e679      	b.n	8001d40 <__aeabi_dsub+0x264>
 800204c:	0015      	movs	r5, r2
 800204e:	4664      	mov	r4, ip
 8002050:	3d20      	subs	r5, #32
 8002052:	40ec      	lsrs	r4, r5
 8002054:	46a0      	mov	r8, r4
 8002056:	2a20      	cmp	r2, #32
 8002058:	d005      	beq.n	8002066 <__aeabi_dsub+0x58a>
 800205a:	2540      	movs	r5, #64	; 0x40
 800205c:	4664      	mov	r4, ip
 800205e:	1aaa      	subs	r2, r5, r2
 8002060:	4094      	lsls	r4, r2
 8002062:	4323      	orrs	r3, r4
 8002064:	469a      	mov	sl, r3
 8002066:	4654      	mov	r4, sl
 8002068:	1e63      	subs	r3, r4, #1
 800206a:	419c      	sbcs	r4, r3
 800206c:	4643      	mov	r3, r8
 800206e:	4323      	orrs	r3, r4
 8002070:	e773      	b.n	8001f5a <__aeabi_dsub+0x47e>
 8002072:	4662      	mov	r2, ip
 8002074:	431a      	orrs	r2, r3
 8002076:	d023      	beq.n	80020c0 <__aeabi_dsub+0x5e4>
 8002078:	000a      	movs	r2, r1
 800207a:	433a      	orrs	r2, r7
 800207c:	d000      	beq.n	8002080 <__aeabi_dsub+0x5a4>
 800207e:	e0a0      	b.n	80021c2 <__aeabi_dsub+0x6e6>
 8002080:	4662      	mov	r2, ip
 8002082:	08db      	lsrs	r3, r3, #3
 8002084:	0752      	lsls	r2, r2, #29
 8002086:	4313      	orrs	r3, r2
 8002088:	4662      	mov	r2, ip
 800208a:	08d4      	lsrs	r4, r2, #3
 800208c:	e6b0      	b.n	8001df0 <__aeabi_dsub+0x314>
 800208e:	000b      	movs	r3, r1
 8002090:	433b      	orrs	r3, r7
 8002092:	d100      	bne.n	8002096 <__aeabi_dsub+0x5ba>
 8002094:	e728      	b.n	8001ee8 <__aeabi_dsub+0x40c>
 8002096:	08ff      	lsrs	r7, r7, #3
 8002098:	074b      	lsls	r3, r1, #29
 800209a:	465d      	mov	r5, fp
 800209c:	433b      	orrs	r3, r7
 800209e:	08cc      	lsrs	r4, r1, #3
 80020a0:	e697      	b.n	8001dd2 <__aeabi_dsub+0x2f6>
 80020a2:	2302      	movs	r3, #2
 80020a4:	4698      	mov	r8, r3
 80020a6:	e736      	b.n	8001f16 <__aeabi_dsub+0x43a>
 80020a8:	1afc      	subs	r4, r7, r3
 80020aa:	42a7      	cmp	r7, r4
 80020ac:	41bf      	sbcs	r7, r7
 80020ae:	4663      	mov	r3, ip
 80020b0:	427f      	negs	r7, r7
 80020b2:	1ac9      	subs	r1, r1, r3
 80020b4:	1bcb      	subs	r3, r1, r7
 80020b6:	4699      	mov	r9, r3
 80020b8:	2301      	movs	r3, #1
 80020ba:	465d      	mov	r5, fp
 80020bc:	4698      	mov	r8, r3
 80020be:	e55e      	b.n	8001b7e <__aeabi_dsub+0xa2>
 80020c0:	074b      	lsls	r3, r1, #29
 80020c2:	08ff      	lsrs	r7, r7, #3
 80020c4:	433b      	orrs	r3, r7
 80020c6:	08cc      	lsrs	r4, r1, #3
 80020c8:	e692      	b.n	8001df0 <__aeabi_dsub+0x314>
 80020ca:	1bdc      	subs	r4, r3, r7
 80020cc:	4660      	mov	r0, ip
 80020ce:	42a3      	cmp	r3, r4
 80020d0:	41b6      	sbcs	r6, r6
 80020d2:	1a40      	subs	r0, r0, r1
 80020d4:	4276      	negs	r6, r6
 80020d6:	1b80      	subs	r0, r0, r6
 80020d8:	4681      	mov	r9, r0
 80020da:	0200      	lsls	r0, r0, #8
 80020dc:	d560      	bpl.n	80021a0 <__aeabi_dsub+0x6c4>
 80020de:	1afc      	subs	r4, r7, r3
 80020e0:	42a7      	cmp	r7, r4
 80020e2:	41bf      	sbcs	r7, r7
 80020e4:	4663      	mov	r3, ip
 80020e6:	427f      	negs	r7, r7
 80020e8:	1ac9      	subs	r1, r1, r3
 80020ea:	1bcb      	subs	r3, r1, r7
 80020ec:	4699      	mov	r9, r3
 80020ee:	465d      	mov	r5, fp
 80020f0:	e576      	b.n	8001be0 <__aeabi_dsub+0x104>
 80020f2:	08ff      	lsrs	r7, r7, #3
 80020f4:	074b      	lsls	r3, r1, #29
 80020f6:	433b      	orrs	r3, r7
 80020f8:	08cc      	lsrs	r4, r1, #3
 80020fa:	e667      	b.n	8001dcc <__aeabi_dsub+0x2f0>
 80020fc:	000a      	movs	r2, r1
 80020fe:	08db      	lsrs	r3, r3, #3
 8002100:	433a      	orrs	r2, r7
 8002102:	d100      	bne.n	8002106 <__aeabi_dsub+0x62a>
 8002104:	e66f      	b.n	8001de6 <__aeabi_dsub+0x30a>
 8002106:	4662      	mov	r2, ip
 8002108:	0752      	lsls	r2, r2, #29
 800210a:	4313      	orrs	r3, r2
 800210c:	4662      	mov	r2, ip
 800210e:	08d4      	lsrs	r4, r2, #3
 8002110:	2280      	movs	r2, #128	; 0x80
 8002112:	0312      	lsls	r2, r2, #12
 8002114:	4214      	tst	r4, r2
 8002116:	d007      	beq.n	8002128 <__aeabi_dsub+0x64c>
 8002118:	08c8      	lsrs	r0, r1, #3
 800211a:	4210      	tst	r0, r2
 800211c:	d104      	bne.n	8002128 <__aeabi_dsub+0x64c>
 800211e:	465d      	mov	r5, fp
 8002120:	0004      	movs	r4, r0
 8002122:	08fb      	lsrs	r3, r7, #3
 8002124:	0749      	lsls	r1, r1, #29
 8002126:	430b      	orrs	r3, r1
 8002128:	0f5a      	lsrs	r2, r3, #29
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	08db      	lsrs	r3, r3, #3
 800212e:	0752      	lsls	r2, r2, #29
 8002130:	4313      	orrs	r3, r2
 8002132:	e65d      	b.n	8001df0 <__aeabi_dsub+0x314>
 8002134:	074b      	lsls	r3, r1, #29
 8002136:	08ff      	lsrs	r7, r7, #3
 8002138:	433b      	orrs	r3, r7
 800213a:	08cc      	lsrs	r4, r1, #3
 800213c:	e649      	b.n	8001dd2 <__aeabi_dsub+0x2f6>
 800213e:	19dc      	adds	r4, r3, r7
 8002140:	429c      	cmp	r4, r3
 8002142:	419b      	sbcs	r3, r3
 8002144:	4461      	add	r1, ip
 8002146:	4689      	mov	r9, r1
 8002148:	425b      	negs	r3, r3
 800214a:	4499      	add	r9, r3
 800214c:	464b      	mov	r3, r9
 800214e:	021b      	lsls	r3, r3, #8
 8002150:	d400      	bmi.n	8002154 <__aeabi_dsub+0x678>
 8002152:	e631      	b.n	8001db8 <__aeabi_dsub+0x2dc>
 8002154:	464a      	mov	r2, r9
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <__aeabi_dsub+0x6d8>)
 8002158:	401a      	ands	r2, r3
 800215a:	2301      	movs	r3, #1
 800215c:	4691      	mov	r9, r2
 800215e:	4698      	mov	r8, r3
 8002160:	e62a      	b.n	8001db8 <__aeabi_dsub+0x2dc>
 8002162:	0016      	movs	r6, r2
 8002164:	4664      	mov	r4, ip
 8002166:	3e20      	subs	r6, #32
 8002168:	40f4      	lsrs	r4, r6
 800216a:	46a0      	mov	r8, r4
 800216c:	2a20      	cmp	r2, #32
 800216e:	d005      	beq.n	800217c <__aeabi_dsub+0x6a0>
 8002170:	2640      	movs	r6, #64	; 0x40
 8002172:	4664      	mov	r4, ip
 8002174:	1ab2      	subs	r2, r6, r2
 8002176:	4094      	lsls	r4, r2
 8002178:	4323      	orrs	r3, r4
 800217a:	469a      	mov	sl, r3
 800217c:	4654      	mov	r4, sl
 800217e:	1e63      	subs	r3, r4, #1
 8002180:	419c      	sbcs	r4, r3
 8002182:	4643      	mov	r3, r8
 8002184:	431c      	orrs	r4, r3
 8002186:	e5db      	b.n	8001d40 <__aeabi_dsub+0x264>
 8002188:	0002      	movs	r2, r0
 800218a:	2400      	movs	r4, #0
 800218c:	2300      	movs	r3, #0
 800218e:	e548      	b.n	8001c22 <__aeabi_dsub+0x146>
 8002190:	19dc      	adds	r4, r3, r7
 8002192:	42bc      	cmp	r4, r7
 8002194:	41bf      	sbcs	r7, r7
 8002196:	4461      	add	r1, ip
 8002198:	4689      	mov	r9, r1
 800219a:	427f      	negs	r7, r7
 800219c:	44b9      	add	r9, r7
 800219e:	e738      	b.n	8002012 <__aeabi_dsub+0x536>
 80021a0:	464b      	mov	r3, r9
 80021a2:	4323      	orrs	r3, r4
 80021a4:	d100      	bne.n	80021a8 <__aeabi_dsub+0x6cc>
 80021a6:	e69f      	b.n	8001ee8 <__aeabi_dsub+0x40c>
 80021a8:	e606      	b.n	8001db8 <__aeabi_dsub+0x2dc>
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	000007fe 	.word	0x000007fe
 80021b0:	000007ff 	.word	0x000007ff
 80021b4:	ff7fffff 	.word	0xff7fffff
 80021b8:	08ff      	lsrs	r7, r7, #3
 80021ba:	074b      	lsls	r3, r1, #29
 80021bc:	433b      	orrs	r3, r7
 80021be:	08cc      	lsrs	r4, r1, #3
 80021c0:	e616      	b.n	8001df0 <__aeabi_dsub+0x314>
 80021c2:	4662      	mov	r2, ip
 80021c4:	08db      	lsrs	r3, r3, #3
 80021c6:	0752      	lsls	r2, r2, #29
 80021c8:	4313      	orrs	r3, r2
 80021ca:	4662      	mov	r2, ip
 80021cc:	08d4      	lsrs	r4, r2, #3
 80021ce:	2280      	movs	r2, #128	; 0x80
 80021d0:	0312      	lsls	r2, r2, #12
 80021d2:	4214      	tst	r4, r2
 80021d4:	d007      	beq.n	80021e6 <__aeabi_dsub+0x70a>
 80021d6:	08c8      	lsrs	r0, r1, #3
 80021d8:	4210      	tst	r0, r2
 80021da:	d104      	bne.n	80021e6 <__aeabi_dsub+0x70a>
 80021dc:	465d      	mov	r5, fp
 80021de:	0004      	movs	r4, r0
 80021e0:	08fb      	lsrs	r3, r7, #3
 80021e2:	0749      	lsls	r1, r1, #29
 80021e4:	430b      	orrs	r3, r1
 80021e6:	0f5a      	lsrs	r2, r3, #29
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	0752      	lsls	r2, r2, #29
 80021ec:	08db      	lsrs	r3, r3, #3
 80021ee:	4313      	orrs	r3, r2
 80021f0:	e5fe      	b.n	8001df0 <__aeabi_dsub+0x314>
 80021f2:	2300      	movs	r3, #0
 80021f4:	4a01      	ldr	r2, [pc, #4]	; (80021fc <__aeabi_dsub+0x720>)
 80021f6:	001c      	movs	r4, r3
 80021f8:	e513      	b.n	8001c22 <__aeabi_dsub+0x146>
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	000007ff 	.word	0x000007ff

08002200 <__aeabi_dcmpun>:
 8002200:	b570      	push	{r4, r5, r6, lr}
 8002202:	0005      	movs	r5, r0
 8002204:	480c      	ldr	r0, [pc, #48]	; (8002238 <__aeabi_dcmpun+0x38>)
 8002206:	031c      	lsls	r4, r3, #12
 8002208:	0016      	movs	r6, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	030a      	lsls	r2, r1, #12
 800220e:	0049      	lsls	r1, r1, #1
 8002210:	0b12      	lsrs	r2, r2, #12
 8002212:	0d49      	lsrs	r1, r1, #21
 8002214:	0b24      	lsrs	r4, r4, #12
 8002216:	0d5b      	lsrs	r3, r3, #21
 8002218:	4281      	cmp	r1, r0
 800221a:	d008      	beq.n	800222e <__aeabi_dcmpun+0x2e>
 800221c:	4a06      	ldr	r2, [pc, #24]	; (8002238 <__aeabi_dcmpun+0x38>)
 800221e:	2000      	movs	r0, #0
 8002220:	4293      	cmp	r3, r2
 8002222:	d103      	bne.n	800222c <__aeabi_dcmpun+0x2c>
 8002224:	0020      	movs	r0, r4
 8002226:	4330      	orrs	r0, r6
 8002228:	1e43      	subs	r3, r0, #1
 800222a:	4198      	sbcs	r0, r3
 800222c:	bd70      	pop	{r4, r5, r6, pc}
 800222e:	2001      	movs	r0, #1
 8002230:	432a      	orrs	r2, r5
 8002232:	d1fb      	bne.n	800222c <__aeabi_dcmpun+0x2c>
 8002234:	e7f2      	b.n	800221c <__aeabi_dcmpun+0x1c>
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	000007ff 	.word	0x000007ff

0800223c <__aeabi_d2iz>:
 800223c:	000a      	movs	r2, r1
 800223e:	b530      	push	{r4, r5, lr}
 8002240:	4c13      	ldr	r4, [pc, #76]	; (8002290 <__aeabi_d2iz+0x54>)
 8002242:	0053      	lsls	r3, r2, #1
 8002244:	0309      	lsls	r1, r1, #12
 8002246:	0005      	movs	r5, r0
 8002248:	0b09      	lsrs	r1, r1, #12
 800224a:	2000      	movs	r0, #0
 800224c:	0d5b      	lsrs	r3, r3, #21
 800224e:	0fd2      	lsrs	r2, r2, #31
 8002250:	42a3      	cmp	r3, r4
 8002252:	dd04      	ble.n	800225e <__aeabi_d2iz+0x22>
 8002254:	480f      	ldr	r0, [pc, #60]	; (8002294 <__aeabi_d2iz+0x58>)
 8002256:	4283      	cmp	r3, r0
 8002258:	dd02      	ble.n	8002260 <__aeabi_d2iz+0x24>
 800225a:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <__aeabi_d2iz+0x5c>)
 800225c:	18d0      	adds	r0, r2, r3
 800225e:	bd30      	pop	{r4, r5, pc}
 8002260:	2080      	movs	r0, #128	; 0x80
 8002262:	0340      	lsls	r0, r0, #13
 8002264:	4301      	orrs	r1, r0
 8002266:	480d      	ldr	r0, [pc, #52]	; (800229c <__aeabi_d2iz+0x60>)
 8002268:	1ac0      	subs	r0, r0, r3
 800226a:	281f      	cmp	r0, #31
 800226c:	dd08      	ble.n	8002280 <__aeabi_d2iz+0x44>
 800226e:	480c      	ldr	r0, [pc, #48]	; (80022a0 <__aeabi_d2iz+0x64>)
 8002270:	1ac3      	subs	r3, r0, r3
 8002272:	40d9      	lsrs	r1, r3
 8002274:	000b      	movs	r3, r1
 8002276:	4258      	negs	r0, r3
 8002278:	2a00      	cmp	r2, #0
 800227a:	d1f0      	bne.n	800225e <__aeabi_d2iz+0x22>
 800227c:	0018      	movs	r0, r3
 800227e:	e7ee      	b.n	800225e <__aeabi_d2iz+0x22>
 8002280:	4c08      	ldr	r4, [pc, #32]	; (80022a4 <__aeabi_d2iz+0x68>)
 8002282:	40c5      	lsrs	r5, r0
 8002284:	46a4      	mov	ip, r4
 8002286:	4463      	add	r3, ip
 8002288:	4099      	lsls	r1, r3
 800228a:	000b      	movs	r3, r1
 800228c:	432b      	orrs	r3, r5
 800228e:	e7f2      	b.n	8002276 <__aeabi_d2iz+0x3a>
 8002290:	000003fe 	.word	0x000003fe
 8002294:	0000041d 	.word	0x0000041d
 8002298:	7fffffff 	.word	0x7fffffff
 800229c:	00000433 	.word	0x00000433
 80022a0:	00000413 	.word	0x00000413
 80022a4:	fffffbed 	.word	0xfffffbed

080022a8 <__aeabi_i2d>:
 80022a8:	b570      	push	{r4, r5, r6, lr}
 80022aa:	2800      	cmp	r0, #0
 80022ac:	d016      	beq.n	80022dc <__aeabi_i2d+0x34>
 80022ae:	17c3      	asrs	r3, r0, #31
 80022b0:	18c5      	adds	r5, r0, r3
 80022b2:	405d      	eors	r5, r3
 80022b4:	0fc4      	lsrs	r4, r0, #31
 80022b6:	0028      	movs	r0, r5
 80022b8:	f000 f894 	bl	80023e4 <__clzsi2>
 80022bc:	4a11      	ldr	r2, [pc, #68]	; (8002304 <__aeabi_i2d+0x5c>)
 80022be:	1a12      	subs	r2, r2, r0
 80022c0:	280a      	cmp	r0, #10
 80022c2:	dc16      	bgt.n	80022f2 <__aeabi_i2d+0x4a>
 80022c4:	0003      	movs	r3, r0
 80022c6:	002e      	movs	r6, r5
 80022c8:	3315      	adds	r3, #21
 80022ca:	409e      	lsls	r6, r3
 80022cc:	230b      	movs	r3, #11
 80022ce:	1a18      	subs	r0, r3, r0
 80022d0:	40c5      	lsrs	r5, r0
 80022d2:	0552      	lsls	r2, r2, #21
 80022d4:	032d      	lsls	r5, r5, #12
 80022d6:	0b2d      	lsrs	r5, r5, #12
 80022d8:	0d53      	lsrs	r3, r2, #21
 80022da:	e003      	b.n	80022e4 <__aeabi_i2d+0x3c>
 80022dc:	2400      	movs	r4, #0
 80022de:	2300      	movs	r3, #0
 80022e0:	2500      	movs	r5, #0
 80022e2:	2600      	movs	r6, #0
 80022e4:	051b      	lsls	r3, r3, #20
 80022e6:	432b      	orrs	r3, r5
 80022e8:	07e4      	lsls	r4, r4, #31
 80022ea:	4323      	orrs	r3, r4
 80022ec:	0030      	movs	r0, r6
 80022ee:	0019      	movs	r1, r3
 80022f0:	bd70      	pop	{r4, r5, r6, pc}
 80022f2:	380b      	subs	r0, #11
 80022f4:	4085      	lsls	r5, r0
 80022f6:	0552      	lsls	r2, r2, #21
 80022f8:	032d      	lsls	r5, r5, #12
 80022fa:	2600      	movs	r6, #0
 80022fc:	0b2d      	lsrs	r5, r5, #12
 80022fe:	0d53      	lsrs	r3, r2, #21
 8002300:	e7f0      	b.n	80022e4 <__aeabi_i2d+0x3c>
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	0000041e 	.word	0x0000041e

08002308 <__aeabi_ui2d>:
 8002308:	b510      	push	{r4, lr}
 800230a:	1e04      	subs	r4, r0, #0
 800230c:	d010      	beq.n	8002330 <__aeabi_ui2d+0x28>
 800230e:	f000 f869 	bl	80023e4 <__clzsi2>
 8002312:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <__aeabi_ui2d+0x48>)
 8002314:	1a1b      	subs	r3, r3, r0
 8002316:	280a      	cmp	r0, #10
 8002318:	dc11      	bgt.n	800233e <__aeabi_ui2d+0x36>
 800231a:	220b      	movs	r2, #11
 800231c:	0021      	movs	r1, r4
 800231e:	1a12      	subs	r2, r2, r0
 8002320:	40d1      	lsrs	r1, r2
 8002322:	3015      	adds	r0, #21
 8002324:	030a      	lsls	r2, r1, #12
 8002326:	055b      	lsls	r3, r3, #21
 8002328:	4084      	lsls	r4, r0
 800232a:	0b12      	lsrs	r2, r2, #12
 800232c:	0d5b      	lsrs	r3, r3, #21
 800232e:	e001      	b.n	8002334 <__aeabi_ui2d+0x2c>
 8002330:	2300      	movs	r3, #0
 8002332:	2200      	movs	r2, #0
 8002334:	051b      	lsls	r3, r3, #20
 8002336:	4313      	orrs	r3, r2
 8002338:	0020      	movs	r0, r4
 800233a:	0019      	movs	r1, r3
 800233c:	bd10      	pop	{r4, pc}
 800233e:	0022      	movs	r2, r4
 8002340:	380b      	subs	r0, #11
 8002342:	4082      	lsls	r2, r0
 8002344:	055b      	lsls	r3, r3, #21
 8002346:	0312      	lsls	r2, r2, #12
 8002348:	2400      	movs	r4, #0
 800234a:	0b12      	lsrs	r2, r2, #12
 800234c:	0d5b      	lsrs	r3, r3, #21
 800234e:	e7f1      	b.n	8002334 <__aeabi_ui2d+0x2c>
 8002350:	0000041e 	.word	0x0000041e

08002354 <__aeabi_f2d>:
 8002354:	b570      	push	{r4, r5, r6, lr}
 8002356:	0043      	lsls	r3, r0, #1
 8002358:	0246      	lsls	r6, r0, #9
 800235a:	0fc4      	lsrs	r4, r0, #31
 800235c:	20fe      	movs	r0, #254	; 0xfe
 800235e:	0e1b      	lsrs	r3, r3, #24
 8002360:	1c59      	adds	r1, r3, #1
 8002362:	0a75      	lsrs	r5, r6, #9
 8002364:	4208      	tst	r0, r1
 8002366:	d00c      	beq.n	8002382 <__aeabi_f2d+0x2e>
 8002368:	22e0      	movs	r2, #224	; 0xe0
 800236a:	0092      	lsls	r2, r2, #2
 800236c:	4694      	mov	ip, r2
 800236e:	076d      	lsls	r5, r5, #29
 8002370:	0b36      	lsrs	r6, r6, #12
 8002372:	4463      	add	r3, ip
 8002374:	051b      	lsls	r3, r3, #20
 8002376:	4333      	orrs	r3, r6
 8002378:	07e4      	lsls	r4, r4, #31
 800237a:	4323      	orrs	r3, r4
 800237c:	0028      	movs	r0, r5
 800237e:	0019      	movs	r1, r3
 8002380:	bd70      	pop	{r4, r5, r6, pc}
 8002382:	2b00      	cmp	r3, #0
 8002384:	d114      	bne.n	80023b0 <__aeabi_f2d+0x5c>
 8002386:	2d00      	cmp	r5, #0
 8002388:	d01b      	beq.n	80023c2 <__aeabi_f2d+0x6e>
 800238a:	0028      	movs	r0, r5
 800238c:	f000 f82a 	bl	80023e4 <__clzsi2>
 8002390:	280a      	cmp	r0, #10
 8002392:	dc1c      	bgt.n	80023ce <__aeabi_f2d+0x7a>
 8002394:	230b      	movs	r3, #11
 8002396:	002e      	movs	r6, r5
 8002398:	1a1b      	subs	r3, r3, r0
 800239a:	40de      	lsrs	r6, r3
 800239c:	0003      	movs	r3, r0
 800239e:	3315      	adds	r3, #21
 80023a0:	409d      	lsls	r5, r3
 80023a2:	4a0e      	ldr	r2, [pc, #56]	; (80023dc <__aeabi_f2d+0x88>)
 80023a4:	0336      	lsls	r6, r6, #12
 80023a6:	1a12      	subs	r2, r2, r0
 80023a8:	0552      	lsls	r2, r2, #21
 80023aa:	0b36      	lsrs	r6, r6, #12
 80023ac:	0d53      	lsrs	r3, r2, #21
 80023ae:	e7e1      	b.n	8002374 <__aeabi_f2d+0x20>
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	d009      	beq.n	80023c8 <__aeabi_f2d+0x74>
 80023b4:	2280      	movs	r2, #128	; 0x80
 80023b6:	0b36      	lsrs	r6, r6, #12
 80023b8:	0312      	lsls	r2, r2, #12
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <__aeabi_f2d+0x8c>)
 80023bc:	076d      	lsls	r5, r5, #29
 80023be:	4316      	orrs	r6, r2
 80023c0:	e7d8      	b.n	8002374 <__aeabi_f2d+0x20>
 80023c2:	2300      	movs	r3, #0
 80023c4:	2600      	movs	r6, #0
 80023c6:	e7d5      	b.n	8002374 <__aeabi_f2d+0x20>
 80023c8:	2600      	movs	r6, #0
 80023ca:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <__aeabi_f2d+0x8c>)
 80023cc:	e7d2      	b.n	8002374 <__aeabi_f2d+0x20>
 80023ce:	0003      	movs	r3, r0
 80023d0:	3b0b      	subs	r3, #11
 80023d2:	409d      	lsls	r5, r3
 80023d4:	002e      	movs	r6, r5
 80023d6:	2500      	movs	r5, #0
 80023d8:	e7e3      	b.n	80023a2 <__aeabi_f2d+0x4e>
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	00000389 	.word	0x00000389
 80023e0:	000007ff 	.word	0x000007ff

080023e4 <__clzsi2>:
 80023e4:	211c      	movs	r1, #28
 80023e6:	2301      	movs	r3, #1
 80023e8:	041b      	lsls	r3, r3, #16
 80023ea:	4298      	cmp	r0, r3
 80023ec:	d301      	bcc.n	80023f2 <__clzsi2+0xe>
 80023ee:	0c00      	lsrs	r0, r0, #16
 80023f0:	3910      	subs	r1, #16
 80023f2:	0a1b      	lsrs	r3, r3, #8
 80023f4:	4298      	cmp	r0, r3
 80023f6:	d301      	bcc.n	80023fc <__clzsi2+0x18>
 80023f8:	0a00      	lsrs	r0, r0, #8
 80023fa:	3908      	subs	r1, #8
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	4298      	cmp	r0, r3
 8002400:	d301      	bcc.n	8002406 <__clzsi2+0x22>
 8002402:	0900      	lsrs	r0, r0, #4
 8002404:	3904      	subs	r1, #4
 8002406:	a202      	add	r2, pc, #8	; (adr r2, 8002410 <__clzsi2+0x2c>)
 8002408:	5c10      	ldrb	r0, [r2, r0]
 800240a:	1840      	adds	r0, r0, r1
 800240c:	4770      	bx	lr
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	02020304 	.word	0x02020304
 8002414:	01010101 	.word	0x01010101
	...

08002420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002420:	b5b0      	push	{r4, r5, r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002426:	f000 ff51 	bl	80032cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800242a:	f000 f9d7 	bl	80027dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800242e:	f000 fb57 	bl	8002ae0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002432:	f000 fb2f 	bl	8002a94 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002436:	f000 fafd 	bl	8002a34 <MX_USART2_UART_Init>
  MX_ADC_Init();
 800243a:	f000 fa1f 	bl	800287c <MX_ADC_Init>
  MX_TIM3_Init();
 800243e:	f000 fa79 	bl	8002934 <MX_TIM3_Init>



  while (1)
  {
	  adcValRec = 0;
 8002442:	4bd3      	ldr	r3, [pc, #844]	; (8002790 <main+0x370>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
	  oneCounter = 0;
 8002448:	4bd2      	ldr	r3, [pc, #840]	; (8002794 <main+0x374>)
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
	  countRecieved = 0;
 800244e:	4bd2      	ldr	r3, [pc, #840]	; (8002798 <main+0x378>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)){
 8002454:	4bd1      	ldr	r3, [pc, #836]	; (800279c <main+0x37c>)
 8002456:	2102      	movs	r1, #2
 8002458:	0018      	movs	r0, r3
 800245a:	f002 f929 	bl	80046b0 <HAL_GPIO_ReadPin>
 800245e:	1e03      	subs	r3, r0, #0
 8002460:	d0ef      	beq.n	8002442 <main+0x22>


		  HAL_Delay(150); // 1.5s delay
 8002462:	2096      	movs	r0, #150	; 0x96
 8002464:	f000 ff96 	bl	8003394 <HAL_Delay>

		  for(int i=0; i<4; i++){ //Recieve all four count bits
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	e052      	b.n	8002514 <main+0xf4>

			  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)){
 800246e:	4bcb      	ldr	r3, [pc, #812]	; (800279c <main+0x37c>)
 8002470:	2102      	movs	r1, #2
 8002472:	0018      	movs	r0, r3
 8002474:	f002 f91c 	bl	80046b0 <HAL_GPIO_ReadPin>
 8002478:	1e03      	subs	r3, r0, #0
 800247a:	d031      	beq.n	80024e0 <main+0xc0>
		  			 sprintf(buffer, "countBit:%d\r\n\r\n", 1);
 800247c:	49c8      	ldr	r1, [pc, #800]	; (80027a0 <main+0x380>)
 800247e:	4bc9      	ldr	r3, [pc, #804]	; (80027a4 <main+0x384>)
 8002480:	2201      	movs	r2, #1
 8002482:	0018      	movs	r0, r3
 8002484:	f004 fb8c 	bl	8006ba0 <siprintf>
		  			 HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 8002488:	23fa      	movs	r3, #250	; 0xfa
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	49c5      	ldr	r1, [pc, #788]	; (80027a4 <main+0x384>)
 800248e:	48c6      	ldr	r0, [pc, #792]	; (80027a8 <main+0x388>)
 8002490:	2219      	movs	r2, #25
 8002492:	f003 fbe3 	bl	8005c5c <HAL_UART_Transmit>
		  			 countRecieved += pow(2, i);
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f7ff ff06 	bl	80022a8 <__aeabi_i2d>
 800249c:	0002      	movs	r2, r0
 800249e:	000b      	movs	r3, r1
 80024a0:	2000      	movs	r0, #0
 80024a2:	2180      	movs	r1, #128	; 0x80
 80024a4:	05c9      	lsls	r1, r1, #23
 80024a6:	f007 f97b 	bl	80097a0 <pow>
 80024aa:	0004      	movs	r4, r0
 80024ac:	000d      	movs	r5, r1
 80024ae:	4bba      	ldr	r3, [pc, #744]	; (8002798 <main+0x378>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	0018      	movs	r0, r3
 80024b4:	f7ff ff28 	bl	8002308 <__aeabi_ui2d>
 80024b8:	0002      	movs	r2, r0
 80024ba:	000b      	movs	r3, r1
 80024bc:	0020      	movs	r0, r4
 80024be:	0029      	movs	r1, r5
 80024c0:	f7fe f962 	bl	8000788 <__aeabi_dadd>
 80024c4:	0002      	movs	r2, r0
 80024c6:	000b      	movs	r3, r1
 80024c8:	0010      	movs	r0, r2
 80024ca:	0019      	movs	r1, r3
 80024cc:	f7fd ffe4 	bl	8000498 <__aeabi_d2uiz>
 80024d0:	0002      	movs	r2, r0
 80024d2:	4bb1      	ldr	r3, [pc, #708]	; (8002798 <main+0x378>)
 80024d4:	601a      	str	r2, [r3, #0]
		  			 oneCounter++; //increments parity counter by 1
 80024d6:	4baf      	ldr	r3, [pc, #700]	; (8002794 <main+0x374>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	4bad      	ldr	r3, [pc, #692]	; (8002794 <main+0x374>)
 80024de:	601a      	str	r2, [r3, #0]
		  			  }
			  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)==0){
 80024e0:	4bae      	ldr	r3, [pc, #696]	; (800279c <main+0x37c>)
 80024e2:	2102      	movs	r1, #2
 80024e4:	0018      	movs	r0, r3
 80024e6:	f002 f8e3 	bl	80046b0 <HAL_GPIO_ReadPin>
 80024ea:	1e03      	subs	r3, r0, #0
 80024ec:	d10c      	bne.n	8002508 <main+0xe8>
		  			 sprintf(buffer, "countBit:%d\r\n\r\n", 0);
 80024ee:	49ac      	ldr	r1, [pc, #688]	; (80027a0 <main+0x380>)
 80024f0:	4bac      	ldr	r3, [pc, #688]	; (80027a4 <main+0x384>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	0018      	movs	r0, r3
 80024f6:	f004 fb53 	bl	8006ba0 <siprintf>
		  			 HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 80024fa:	23fa      	movs	r3, #250	; 0xfa
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	49a9      	ldr	r1, [pc, #676]	; (80027a4 <main+0x384>)
 8002500:	48a9      	ldr	r0, [pc, #676]	; (80027a8 <main+0x388>)
 8002502:	2219      	movs	r2, #25
 8002504:	f003 fbaa 	bl	8005c5c <HAL_UART_Transmit>
		  			  }

			  HAL_Delay(100); //1s delay
 8002508:	2064      	movs	r0, #100	; 0x64
 800250a:	f000 ff43 	bl	8003394 <HAL_Delay>
		  for(int i=0; i<4; i++){ //Recieve all four count bits
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	3301      	adds	r3, #1
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2b03      	cmp	r3, #3
 8002518:	dda9      	ble.n	800246e <main+0x4e>

		  	  }

		  sprintf(buffer, "countRec:%d\r\n\r\n", countRecieved);
 800251a:	4b9f      	ldr	r3, [pc, #636]	; (8002798 <main+0x378>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	49a3      	ldr	r1, [pc, #652]	; (80027ac <main+0x38c>)
 8002520:	4ba0      	ldr	r3, [pc, #640]	; (80027a4 <main+0x384>)
 8002522:	0018      	movs	r0, r3
 8002524:	f004 fb3c 	bl	8006ba0 <siprintf>
		  HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 8002528:	23fa      	movs	r3, #250	; 0xfa
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	499d      	ldr	r1, [pc, #628]	; (80027a4 <main+0x384>)
 800252e:	489e      	ldr	r0, [pc, #632]	; (80027a8 <main+0x388>)
 8002530:	2219      	movs	r2, #25
 8002532:	f003 fb93 	bl	8005c5c <HAL_UART_Transmit>

		  for(int i=0; i<12; i++){ //recieve all 12 adc value bits
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	e052      	b.n	80025e2 <main+0x1c2>

			  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)){
 800253c:	4b97      	ldr	r3, [pc, #604]	; (800279c <main+0x37c>)
 800253e:	2102      	movs	r1, #2
 8002540:	0018      	movs	r0, r3
 8002542:	f002 f8b5 	bl	80046b0 <HAL_GPIO_ReadPin>
 8002546:	1e03      	subs	r3, r0, #0
 8002548:	d031      	beq.n	80025ae <main+0x18e>
			  			  sprintf(buffer, "adcBit:%d\r\n\r\n", 1);
 800254a:	4999      	ldr	r1, [pc, #612]	; (80027b0 <main+0x390>)
 800254c:	4b95      	ldr	r3, [pc, #596]	; (80027a4 <main+0x384>)
 800254e:	2201      	movs	r2, #1
 8002550:	0018      	movs	r0, r3
 8002552:	f004 fb25 	bl	8006ba0 <siprintf>
			  			  HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 8002556:	23fa      	movs	r3, #250	; 0xfa
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4992      	ldr	r1, [pc, #584]	; (80027a4 <main+0x384>)
 800255c:	4892      	ldr	r0, [pc, #584]	; (80027a8 <main+0x388>)
 800255e:	2219      	movs	r2, #25
 8002560:	f003 fb7c 	bl	8005c5c <HAL_UART_Transmit>
			  			  adcValRec += pow(2, i); //convert from binary back to decimal
 8002564:	68b8      	ldr	r0, [r7, #8]
 8002566:	f7ff fe9f 	bl	80022a8 <__aeabi_i2d>
 800256a:	0002      	movs	r2, r0
 800256c:	000b      	movs	r3, r1
 800256e:	2000      	movs	r0, #0
 8002570:	2180      	movs	r1, #128	; 0x80
 8002572:	05c9      	lsls	r1, r1, #23
 8002574:	f007 f914 	bl	80097a0 <pow>
 8002578:	0004      	movs	r4, r0
 800257a:	000d      	movs	r5, r1
 800257c:	4b84      	ldr	r3, [pc, #528]	; (8002790 <main+0x370>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	0018      	movs	r0, r3
 8002582:	f7ff fec1 	bl	8002308 <__aeabi_ui2d>
 8002586:	0002      	movs	r2, r0
 8002588:	000b      	movs	r3, r1
 800258a:	0020      	movs	r0, r4
 800258c:	0029      	movs	r1, r5
 800258e:	f7fe f8fb 	bl	8000788 <__aeabi_dadd>
 8002592:	0002      	movs	r2, r0
 8002594:	000b      	movs	r3, r1
 8002596:	0010      	movs	r0, r2
 8002598:	0019      	movs	r1, r3
 800259a:	f7fd ff7d 	bl	8000498 <__aeabi_d2uiz>
 800259e:	0002      	movs	r2, r0
 80025a0:	4b7b      	ldr	r3, [pc, #492]	; (8002790 <main+0x370>)
 80025a2:	601a      	str	r2, [r3, #0]
			  			  oneCounter++; //increments parity counter by 1
 80025a4:	4b7b      	ldr	r3, [pc, #492]	; (8002794 <main+0x374>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	4b7a      	ldr	r3, [pc, #488]	; (8002794 <main+0x374>)
 80025ac:	601a      	str	r2, [r3, #0]
			  		      }
			  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)==0){
 80025ae:	4b7b      	ldr	r3, [pc, #492]	; (800279c <main+0x37c>)
 80025b0:	2102      	movs	r1, #2
 80025b2:	0018      	movs	r0, r3
 80025b4:	f002 f87c 	bl	80046b0 <HAL_GPIO_ReadPin>
 80025b8:	1e03      	subs	r3, r0, #0
 80025ba:	d10c      	bne.n	80025d6 <main+0x1b6>
			  			  sprintf(buffer, "adcBit:%d\r\n\r\n", 0);
 80025bc:	497c      	ldr	r1, [pc, #496]	; (80027b0 <main+0x390>)
 80025be:	4b79      	ldr	r3, [pc, #484]	; (80027a4 <main+0x384>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	0018      	movs	r0, r3
 80025c4:	f004 faec 	bl	8006ba0 <siprintf>
			  			  HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 80025c8:	23fa      	movs	r3, #250	; 0xfa
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4975      	ldr	r1, [pc, #468]	; (80027a4 <main+0x384>)
 80025ce:	4876      	ldr	r0, [pc, #472]	; (80027a8 <main+0x388>)
 80025d0:	2219      	movs	r2, #25
 80025d2:	f003 fb43 	bl	8005c5c <HAL_UART_Transmit>
			  			  }

			  HAL_Delay(100); //1s delay
 80025d6:	2064      	movs	r0, #100	; 0x64
 80025d8:	f000 fedc 	bl	8003394 <HAL_Delay>
		  for(int i=0; i<12; i++){ //recieve all 12 adc value bits
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	3301      	adds	r3, #1
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b0b      	cmp	r3, #11
 80025e6:	dda9      	ble.n	800253c <main+0x11c>

			}
		  	sprintf(buffer, "adcVal:%d\r\n\r\n", adcValRec); // transmit the adc value recieved over UART
 80025e8:	4b69      	ldr	r3, [pc, #420]	; (8002790 <main+0x370>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4971      	ldr	r1, [pc, #452]	; (80027b4 <main+0x394>)
 80025ee:	4b6d      	ldr	r3, [pc, #436]	; (80027a4 <main+0x384>)
 80025f0:	0018      	movs	r0, r3
 80025f2:	f004 fad5 	bl	8006ba0 <siprintf>
		  	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 80025f6:	23fa      	movs	r3, #250	; 0xfa
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	496a      	ldr	r1, [pc, #424]	; (80027a4 <main+0x384>)
 80025fc:	486a      	ldr	r0, [pc, #424]	; (80027a8 <main+0x388>)
 80025fe:	2219      	movs	r2, #25
 8002600:	f003 fb2c 	bl	8005c5c <HAL_UART_Transmit>

		  	voltage = adcValRec*3/4095.0f;//convert adc value to a voltage
 8002604:	4b62      	ldr	r3, [pc, #392]	; (8002790 <main+0x370>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	0013      	movs	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	189b      	adds	r3, r3, r2
 800260e:	0018      	movs	r0, r3
 8002610:	f7fe f878 	bl	8000704 <__aeabi_ui2f>
 8002614:	1c03      	adds	r3, r0, #0
 8002616:	4968      	ldr	r1, [pc, #416]	; (80027b8 <main+0x398>)
 8002618:	1c18      	adds	r0, r3, #0
 800261a:	f7fd ff5b 	bl	80004d4 <__aeabi_fdiv>
 800261e:	1c03      	adds	r3, r0, #0
 8002620:	1c1a      	adds	r2, r3, #0
 8002622:	4b66      	ldr	r3, [pc, #408]	; (80027bc <main+0x39c>)
 8002624:	601a      	str	r2, [r3, #0]
		  	gcvt(voltage, 3, buf); //convert float to string to transmit over UART
 8002626:	4b65      	ldr	r3, [pc, #404]	; (80027bc <main+0x39c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	1c18      	adds	r0, r3, #0
 800262c:	f7ff fe92 	bl	8002354 <__aeabi_f2d>
 8002630:	4b63      	ldr	r3, [pc, #396]	; (80027c0 <main+0x3a0>)
 8002632:	2203      	movs	r2, #3
 8002634:	f004 fa5c 	bl	8006af0 <gcvt>

		  	sprintf(buffer, "Voltage:%sV\r\n\r\n", buf); // transmit the adc value recieved over UART
 8002638:	4a61      	ldr	r2, [pc, #388]	; (80027c0 <main+0x3a0>)
 800263a:	4962      	ldr	r1, [pc, #392]	; (80027c4 <main+0x3a4>)
 800263c:	4b59      	ldr	r3, [pc, #356]	; (80027a4 <main+0x384>)
 800263e:	0018      	movs	r0, r3
 8002640:	f004 faae 	bl	8006ba0 <siprintf>
		  	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 8002644:	23fa      	movs	r3, #250	; 0xfa
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4956      	ldr	r1, [pc, #344]	; (80027a4 <main+0x384>)
 800264a:	4857      	ldr	r0, [pc, #348]	; (80027a8 <main+0x388>)
 800264c:	2219      	movs	r2, #25
 800264e:	f003 fb05 	bl	8005c5c <HAL_UART_Transmit>
		  	for(int i=0; i<1; i++){ //recieve parity bit
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	e032      	b.n	80026be <main+0x29e>

		  		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)){
 8002658:	4b50      	ldr	r3, [pc, #320]	; (800279c <main+0x37c>)
 800265a:	2102      	movs	r1, #2
 800265c:	0018      	movs	r0, r3
 800265e:	f002 f827 	bl	80046b0 <HAL_GPIO_ReadPin>
 8002662:	1e03      	subs	r3, r0, #0
 8002664:	d011      	beq.n	800268a <main+0x26a>
		  				  sprintf(buffer, "Parity:%d\r\n\r\n", 1);
 8002666:	4958      	ldr	r1, [pc, #352]	; (80027c8 <main+0x3a8>)
 8002668:	4b4e      	ldr	r3, [pc, #312]	; (80027a4 <main+0x384>)
 800266a:	2201      	movs	r2, #1
 800266c:	0018      	movs	r0, r3
 800266e:	f004 fa97 	bl	8006ba0 <siprintf>
		  				  HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 8002672:	23fa      	movs	r3, #250	; 0xfa
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	494b      	ldr	r1, [pc, #300]	; (80027a4 <main+0x384>)
 8002678:	484b      	ldr	r0, [pc, #300]	; (80027a8 <main+0x388>)
 800267a:	2219      	movs	r2, #25
 800267c:	f003 faee 	bl	8005c5c <HAL_UART_Transmit>
		  				  oneCounter++; //increments parity counter by 1
 8002680:	4b44      	ldr	r3, [pc, #272]	; (8002794 <main+0x374>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	4b43      	ldr	r3, [pc, #268]	; (8002794 <main+0x374>)
 8002688:	601a      	str	r2, [r3, #0]
		  				  }
		  		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)==0){
 800268a:	4b44      	ldr	r3, [pc, #272]	; (800279c <main+0x37c>)
 800268c:	2102      	movs	r1, #2
 800268e:	0018      	movs	r0, r3
 8002690:	f002 f80e 	bl	80046b0 <HAL_GPIO_ReadPin>
 8002694:	1e03      	subs	r3, r0, #0
 8002696:	d10c      	bne.n	80026b2 <main+0x292>
		  				  sprintf(buffer, "Parity:%d\r\n\r\n", 0);
 8002698:	494b      	ldr	r1, [pc, #300]	; (80027c8 <main+0x3a8>)
 800269a:	4b42      	ldr	r3, [pc, #264]	; (80027a4 <main+0x384>)
 800269c:	2200      	movs	r2, #0
 800269e:	0018      	movs	r0, r3
 80026a0:	f004 fa7e 	bl	8006ba0 <siprintf>
		  				  HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 80026a4:	23fa      	movs	r3, #250	; 0xfa
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	493e      	ldr	r1, [pc, #248]	; (80027a4 <main+0x384>)
 80026aa:	483f      	ldr	r0, [pc, #252]	; (80027a8 <main+0x388>)
 80026ac:	2219      	movs	r2, #25
 80026ae:	f003 fad5 	bl	8005c5c <HAL_UART_Transmit>
		  				  }


		  		HAL_Delay(100); //1s delay
 80026b2:	2064      	movs	r0, #100	; 0x64
 80026b4:	f000 fe6e 	bl	8003394 <HAL_Delay>
		  	for(int i=0; i<1; i++){ //recieve parity bit
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3301      	adds	r3, #1
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	ddc9      	ble.n	8002658 <main+0x238>

		  		}
		  	sprintf(buffer, "ParityCounter:%d\r\n\r\n", oneCounter);
 80026c4:	4b33      	ldr	r3, [pc, #204]	; (8002794 <main+0x374>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4940      	ldr	r1, [pc, #256]	; (80027cc <main+0x3ac>)
 80026ca:	4b36      	ldr	r3, [pc, #216]	; (80027a4 <main+0x384>)
 80026cc:	0018      	movs	r0, r3
 80026ce:	f004 fa67 	bl	8006ba0 <siprintf>
		  	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 80026d2:	23fa      	movs	r3, #250	; 0xfa
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4933      	ldr	r1, [pc, #204]	; (80027a4 <main+0x384>)
 80026d8:	4833      	ldr	r0, [pc, #204]	; (80027a8 <main+0x388>)
 80026da:	2219      	movs	r2, #25
 80026dc:	f003 fabe 	bl	8005c5c <HAL_UART_Transmit>

		  	if(oneCounter%2 != 0){ //triggers error if the message recieved had a odd number of 1's
 80026e0:	4b2c      	ldr	r3, [pc, #176]	; (8002794 <main+0x374>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2201      	movs	r2, #1
 80026e6:	4013      	ands	r3, r2
 80026e8:	d012      	beq.n	8002710 <main+0x2f0>
		  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 80026ea:	2380      	movs	r3, #128	; 0x80
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	482b      	ldr	r0, [pc, #172]	; (800279c <main+0x37c>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	0019      	movs	r1, r3
 80026f4:	f001 fff9 	bl	80046ea <HAL_GPIO_WritePin>
		  		HAL_Delay(1000);
 80026f8:	23fa      	movs	r3, #250	; 0xfa
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	0018      	movs	r0, r3
 80026fe:	f000 fe49 	bl	8003394 <HAL_Delay>
		  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 8002702:	2380      	movs	r3, #128	; 0x80
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4825      	ldr	r0, [pc, #148]	; (800279c <main+0x37c>)
 8002708:	2200      	movs	r2, #0
 800270a:	0019      	movs	r1, r3
 800270c:	f001 ffed 	bl	80046ea <HAL_GPIO_WritePin>

		  	}


		  	sprintf(buffer, "storedCount:%d\r\n\r\n", countStored); //transmit current stored count value
 8002710:	4b2f      	ldr	r3, [pc, #188]	; (80027d0 <main+0x3b0>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	492f      	ldr	r1, [pc, #188]	; (80027d4 <main+0x3b4>)
 8002716:	4b23      	ldr	r3, [pc, #140]	; (80027a4 <main+0x384>)
 8002718:	0018      	movs	r0, r3
 800271a:	f004 fa41 	bl	8006ba0 <siprintf>
		  	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 800271e:	23fa      	movs	r3, #250	; 0xfa
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4920      	ldr	r1, [pc, #128]	; (80027a4 <main+0x384>)
 8002724:	4820      	ldr	r0, [pc, #128]	; (80027a8 <main+0x388>)
 8002726:	2219      	movs	r2, #25
 8002728:	f003 fa98 	bl	8005c5c <HAL_UART_Transmit>
		  	sprintf(buffer, "recievedCount:%d\r\n\r\n", countRecieved);//transmit the count value recieved in the message
 800272c:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <main+0x378>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4929      	ldr	r1, [pc, #164]	; (80027d8 <main+0x3b8>)
 8002732:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <main+0x384>)
 8002734:	0018      	movs	r0, r3
 8002736:	f004 fa33 	bl	8006ba0 <siprintf>
		  	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 800273a:	23fa      	movs	r3, #250	; 0xfa
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4919      	ldr	r1, [pc, #100]	; (80027a4 <main+0x384>)
 8002740:	4819      	ldr	r0, [pc, #100]	; (80027a8 <main+0x388>)
 8002742:	2219      	movs	r2, #25
 8002744:	f003 fa8a 	bl	8005c5c <HAL_UART_Transmit>

		  	if(countStored != countRecieved){ //if statement to check that countStored equals countRecieved
 8002748:	4b21      	ldr	r3, [pc, #132]	; (80027d0 <main+0x3b0>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4b12      	ldr	r3, [pc, #72]	; (8002798 <main+0x378>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d016      	beq.n	8002782 <main+0x362>
		  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8002754:	2380      	movs	r3, #128	; 0x80
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4810      	ldr	r0, [pc, #64]	; (800279c <main+0x37c>)
 800275a:	2201      	movs	r2, #1
 800275c:	0019      	movs	r1, r3
 800275e:	f001 ffc4 	bl	80046ea <HAL_GPIO_WritePin>
		  		HAL_Delay(2000);
 8002762:	23fa      	movs	r3, #250	; 0xfa
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	0018      	movs	r0, r3
 8002768:	f000 fe14 	bl	8003394 <HAL_Delay>
		  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	480a      	ldr	r0, [pc, #40]	; (800279c <main+0x37c>)
 8002772:	2200      	movs	r2, #0
 8002774:	0019      	movs	r1, r3
 8002776:	f001 ffb8 	bl	80046ea <HAL_GPIO_WritePin>
		  		countStored = countRecieved; //sets count stored to equal count recieved if they did not match
 800277a:	4b07      	ldr	r3, [pc, #28]	; (8002798 <main+0x378>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <main+0x3b0>)
 8002780:	601a      	str	r2, [r3, #0]

		  	}
		  	countStored++;//increment stored count value to match the number of messages recieved
 8002782:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <main+0x3b0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <main+0x3b0>)
 800278a:	601a      	str	r2, [r3, #0]
	  adcValRec = 0;
 800278c:	e659      	b.n	8002442 <main+0x22>
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	20000250 	.word	0x20000250
 8002794:	20000258 	.word	0x20000258
 8002798:	20000254 	.word	0x20000254
 800279c:	48000800 	.word	0x48000800
 80027a0:	0800a578 	.word	0x0800a578
 80027a4:	20000224 	.word	0x20000224
 80027a8:	2000015c 	.word	0x2000015c
 80027ac:	0800a588 	.word	0x0800a588
 80027b0:	0800a598 	.word	0x0800a598
 80027b4:	0800a5a8 	.word	0x0800a5a8
 80027b8:	457ff000 	.word	0x457ff000
 80027bc:	2000025c 	.word	0x2000025c
 80027c0:	20000260 	.word	0x20000260
 80027c4:	0800a5b8 	.word	0x0800a5b8
 80027c8:	0800a5c8 	.word	0x0800a5c8
 80027cc:	0800a5d8 	.word	0x0800a5d8
 80027d0:	20000000 	.word	0x20000000
 80027d4:	0800a5f0 	.word	0x0800a5f0
 80027d8:	0800a604 	.word	0x0800a604

080027dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027dc:	b590      	push	{r4, r7, lr}
 80027de:	b091      	sub	sp, #68	; 0x44
 80027e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027e2:	2410      	movs	r4, #16
 80027e4:	193b      	adds	r3, r7, r4
 80027e6:	0018      	movs	r0, r3
 80027e8:	2330      	movs	r3, #48	; 0x30
 80027ea:	001a      	movs	r2, r3
 80027ec:	2100      	movs	r1, #0
 80027ee:	f004 f9cf 	bl	8006b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027f2:	003b      	movs	r3, r7
 80027f4:	0018      	movs	r0, r3
 80027f6:	2310      	movs	r3, #16
 80027f8:	001a      	movs	r2, r3
 80027fa:	2100      	movs	r1, #0
 80027fc:	f004 f9c8 	bl	8006b90 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002800:	0021      	movs	r1, r4
 8002802:	187b      	adds	r3, r7, r1
 8002804:	2212      	movs	r2, #18
 8002806:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002808:	187b      	adds	r3, r7, r1
 800280a:	2201      	movs	r2, #1
 800280c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800280e:	187b      	adds	r3, r7, r1
 8002810:	2201      	movs	r2, #1
 8002812:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002814:	187b      	adds	r3, r7, r1
 8002816:	2210      	movs	r2, #16
 8002818:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800281a:	187b      	adds	r3, r7, r1
 800281c:	2210      	movs	r2, #16
 800281e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002820:	187b      	adds	r3, r7, r1
 8002822:	2202      	movs	r2, #2
 8002824:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002826:	187b      	adds	r3, r7, r1
 8002828:	2200      	movs	r2, #0
 800282a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800282c:	187b      	adds	r3, r7, r1
 800282e:	22a0      	movs	r2, #160	; 0xa0
 8002830:	0392      	lsls	r2, r2, #14
 8002832:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002834:	187b      	adds	r3, r7, r1
 8002836:	2200      	movs	r2, #0
 8002838:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800283a:	187b      	adds	r3, r7, r1
 800283c:	0018      	movs	r0, r3
 800283e:	f001 ff97 	bl	8004770 <HAL_RCC_OscConfig>
 8002842:	1e03      	subs	r3, r0, #0
 8002844:	d001      	beq.n	800284a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002846:	f000 fa8b 	bl	8002d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800284a:	003b      	movs	r3, r7
 800284c:	2207      	movs	r2, #7
 800284e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002850:	003b      	movs	r3, r7
 8002852:	2202      	movs	r2, #2
 8002854:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002856:	003b      	movs	r3, r7
 8002858:	2200      	movs	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800285c:	003b      	movs	r3, r7
 800285e:	2200      	movs	r2, #0
 8002860:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002862:	003b      	movs	r3, r7
 8002864:	2101      	movs	r1, #1
 8002866:	0018      	movs	r0, r3
 8002868:	f002 fa9c 	bl	8004da4 <HAL_RCC_ClockConfig>
 800286c:	1e03      	subs	r3, r0, #0
 800286e:	d001      	beq.n	8002874 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002870:	f000 fa76 	bl	8002d60 <Error_Handler>
  }
}
 8002874:	46c0      	nop			; (mov r8, r8)
 8002876:	46bd      	mov	sp, r7
 8002878:	b011      	add	sp, #68	; 0x44
 800287a:	bd90      	pop	{r4, r7, pc}

0800287c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002882:	1d3b      	adds	r3, r7, #4
 8002884:	0018      	movs	r0, r3
 8002886:	230c      	movs	r3, #12
 8002888:	001a      	movs	r2, r3
 800288a:	2100      	movs	r1, #0
 800288c:	f004 f980 	bl	8006b90 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002890:	4b26      	ldr	r3, [pc, #152]	; (800292c <MX_ADC_Init+0xb0>)
 8002892:	4a27      	ldr	r2, [pc, #156]	; (8002930 <MX_ADC_Init+0xb4>)
 8002894:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002896:	4b25      	ldr	r3, [pc, #148]	; (800292c <MX_ADC_Init+0xb0>)
 8002898:	2200      	movs	r2, #0
 800289a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800289c:	4b23      	ldr	r3, [pc, #140]	; (800292c <MX_ADC_Init+0xb0>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028a2:	4b22      	ldr	r3, [pc, #136]	; (800292c <MX_ADC_Init+0xb0>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80028a8:	4b20      	ldr	r3, [pc, #128]	; (800292c <MX_ADC_Init+0xb0>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028ae:	4b1f      	ldr	r3, [pc, #124]	; (800292c <MX_ADC_Init+0xb0>)
 80028b0:	2204      	movs	r2, #4
 80028b2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80028b4:	4b1d      	ldr	r3, [pc, #116]	; (800292c <MX_ADC_Init+0xb0>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80028ba:	4b1c      	ldr	r3, [pc, #112]	; (800292c <MX_ADC_Init+0xb0>)
 80028bc:	2200      	movs	r2, #0
 80028be:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80028c0:	4b1a      	ldr	r3, [pc, #104]	; (800292c <MX_ADC_Init+0xb0>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80028c6:	4b19      	ldr	r3, [pc, #100]	; (800292c <MX_ADC_Init+0xb0>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028cc:	4b17      	ldr	r3, [pc, #92]	; (800292c <MX_ADC_Init+0xb0>)
 80028ce:	22c2      	movs	r2, #194	; 0xc2
 80028d0:	32ff      	adds	r2, #255	; 0xff
 80028d2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028d4:	4b15      	ldr	r3, [pc, #84]	; (800292c <MX_ADC_Init+0xb0>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80028da:	4b14      	ldr	r3, [pc, #80]	; (800292c <MX_ADC_Init+0xb0>)
 80028dc:	2224      	movs	r2, #36	; 0x24
 80028de:	2100      	movs	r1, #0
 80028e0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80028e2:	4b12      	ldr	r3, [pc, #72]	; (800292c <MX_ADC_Init+0xb0>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80028e8:	4b10      	ldr	r3, [pc, #64]	; (800292c <MX_ADC_Init+0xb0>)
 80028ea:	0018      	movs	r0, r3
 80028ec:	f000 fd76 	bl	80033dc <HAL_ADC_Init>
 80028f0:	1e03      	subs	r3, r0, #0
 80028f2:	d001      	beq.n	80028f8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80028f4:	f000 fa34 	bl	8002d60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80028f8:	1d3b      	adds	r3, r7, #4
 80028fa:	2207      	movs	r2, #7
 80028fc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	2280      	movs	r2, #128	; 0x80
 8002902:	0152      	lsls	r2, r2, #5
 8002904:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	2280      	movs	r2, #128	; 0x80
 800290a:	0552      	lsls	r2, r2, #21
 800290c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800290e:	1d3a      	adds	r2, r7, #4
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <MX_ADC_Init+0xb0>)
 8002912:	0011      	movs	r1, r2
 8002914:	0018      	movs	r0, r3
 8002916:	f001 f8a9 	bl	8003a6c <HAL_ADC_ConfigChannel>
 800291a:	1e03      	subs	r3, r0, #0
 800291c:	d001      	beq.n	8002922 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800291e:	f000 fa1f 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	46bd      	mov	sp, r7
 8002926:	b004      	add	sp, #16
 8002928:	bd80      	pop	{r7, pc}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	20000090 	.word	0x20000090
 8002930:	40012400 	.word	0x40012400

08002934 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08e      	sub	sp, #56	; 0x38
 8002938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800293a:	2328      	movs	r3, #40	; 0x28
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	0018      	movs	r0, r3
 8002940:	2310      	movs	r3, #16
 8002942:	001a      	movs	r2, r3
 8002944:	2100      	movs	r1, #0
 8002946:	f004 f923 	bl	8006b90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800294a:	2320      	movs	r3, #32
 800294c:	18fb      	adds	r3, r7, r3
 800294e:	0018      	movs	r0, r3
 8002950:	2308      	movs	r3, #8
 8002952:	001a      	movs	r2, r3
 8002954:	2100      	movs	r1, #0
 8002956:	f004 f91b 	bl	8006b90 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800295a:	1d3b      	adds	r3, r7, #4
 800295c:	0018      	movs	r0, r3
 800295e:	231c      	movs	r3, #28
 8002960:	001a      	movs	r2, r3
 8002962:	2100      	movs	r1, #0
 8002964:	f004 f914 	bl	8006b90 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002968:	4b2f      	ldr	r3, [pc, #188]	; (8002a28 <MX_TIM3_Init+0xf4>)
 800296a:	4a30      	ldr	r2, [pc, #192]	; (8002a2c <MX_TIM3_Init+0xf8>)
 800296c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800296e:	4b2e      	ldr	r3, [pc, #184]	; (8002a28 <MX_TIM3_Init+0xf4>)
 8002970:	2200      	movs	r2, #0
 8002972:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002974:	4b2c      	ldr	r3, [pc, #176]	; (8002a28 <MX_TIM3_Init+0xf4>)
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 47999;
 800297a:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <MX_TIM3_Init+0xf4>)
 800297c:	4a2c      	ldr	r2, [pc, #176]	; (8002a30 <MX_TIM3_Init+0xfc>)
 800297e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002980:	4b29      	ldr	r3, [pc, #164]	; (8002a28 <MX_TIM3_Init+0xf4>)
 8002982:	2200      	movs	r2, #0
 8002984:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002986:	4b28      	ldr	r3, [pc, #160]	; (8002a28 <MX_TIM3_Init+0xf4>)
 8002988:	2280      	movs	r2, #128	; 0x80
 800298a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800298c:	4b26      	ldr	r3, [pc, #152]	; (8002a28 <MX_TIM3_Init+0xf4>)
 800298e:	0018      	movs	r0, r3
 8002990:	f002 fb5a 	bl	8005048 <HAL_TIM_Base_Init>
 8002994:	1e03      	subs	r3, r0, #0
 8002996:	d001      	beq.n	800299c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002998:	f000 f9e2 	bl	8002d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800299c:	2128      	movs	r1, #40	; 0x28
 800299e:	187b      	adds	r3, r7, r1
 80029a0:	2280      	movs	r2, #128	; 0x80
 80029a2:	0152      	lsls	r2, r2, #5
 80029a4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029a6:	187a      	adds	r2, r7, r1
 80029a8:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <MX_TIM3_Init+0xf4>)
 80029aa:	0011      	movs	r1, r2
 80029ac:	0018      	movs	r0, r3
 80029ae:	f002 fcb9 	bl	8005324 <HAL_TIM_ConfigClockSource>
 80029b2:	1e03      	subs	r3, r0, #0
 80029b4:	d001      	beq.n	80029ba <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80029b6:	f000 f9d3 	bl	8002d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80029ba:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <MX_TIM3_Init+0xf4>)
 80029bc:	0018      	movs	r0, r3
 80029be:	f002 fb93 	bl	80050e8 <HAL_TIM_PWM_Init>
 80029c2:	1e03      	subs	r3, r0, #0
 80029c4:	d001      	beq.n	80029ca <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80029c6:	f000 f9cb 	bl	8002d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ca:	2120      	movs	r1, #32
 80029cc:	187b      	adds	r3, r7, r1
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029d2:	187b      	adds	r3, r7, r1
 80029d4:	2200      	movs	r2, #0
 80029d6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029d8:	187a      	adds	r2, r7, r1
 80029da:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <MX_TIM3_Init+0xf4>)
 80029dc:	0011      	movs	r1, r2
 80029de:	0018      	movs	r0, r3
 80029e0:	f003 f88a 	bl	8005af8 <HAL_TIMEx_MasterConfigSynchronization>
 80029e4:	1e03      	subs	r3, r0, #0
 80029e6:	d001      	beq.n	80029ec <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80029e8:	f000 f9ba 	bl	8002d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029ec:	1d3b      	adds	r3, r7, #4
 80029ee:	2260      	movs	r2, #96	; 0x60
 80029f0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	2200      	movs	r2, #0
 80029f6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029fe:	1d3b      	adds	r3, r7, #4
 8002a00:	2200      	movs	r2, #0
 8002a02:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a04:	1d39      	adds	r1, r7, #4
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <MX_TIM3_Init+0xf4>)
 8002a08:	220c      	movs	r2, #12
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f002 fbc4 	bl	8005198 <HAL_TIM_PWM_ConfigChannel>
 8002a10:	1e03      	subs	r3, r0, #0
 8002a12:	d001      	beq.n	8002a18 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8002a14:	f000 f9a4 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a18:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <MX_TIM3_Init+0xf4>)
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f000 fa62 	bl	8002ee4 <HAL_TIM_MspPostInit>

}
 8002a20:	46c0      	nop			; (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b00e      	add	sp, #56	; 0x38
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000114 	.word	0x20000114
 8002a2c:	40000400 	.word	0x40000400
 8002a30:	0000bb7f 	.word	0x0000bb7f

08002a34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a38:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <MX_USART2_UART_Init+0x58>)
 8002a3a:	4a15      	ldr	r2, [pc, #84]	; (8002a90 <MX_USART2_UART_Init+0x5c>)
 8002a3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002a3e:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <MX_USART2_UART_Init+0x58>)
 8002a40:	2296      	movs	r2, #150	; 0x96
 8002a42:	0192      	lsls	r2, r2, #6
 8002a44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a46:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <MX_USART2_UART_Init+0x58>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <MX_USART2_UART_Init+0x58>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a52:	4b0e      	ldr	r3, [pc, #56]	; (8002a8c <MX_USART2_UART_Init+0x58>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a58:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <MX_USART2_UART_Init+0x58>)
 8002a5a:	220c      	movs	r2, #12
 8002a5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <MX_USART2_UART_Init+0x58>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <MX_USART2_UART_Init+0x58>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a6a:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <MX_USART2_UART_Init+0x58>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <MX_USART2_UART_Init+0x58>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <MX_USART2_UART_Init+0x58>)
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f003 f89b 	bl	8005bb4 <HAL_UART_Init>
 8002a7e:	1e03      	subs	r3, r0, #0
 8002a80:	d001      	beq.n	8002a86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002a82:	f000 f96d 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	2000015c 	.word	0x2000015c
 8002a90:	40004400 	.word	0x40004400

08002a94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a9a:	4b10      	ldr	r3, [pc, #64]	; (8002adc <MX_DMA_Init+0x48>)
 8002a9c:	695a      	ldr	r2, [r3, #20]
 8002a9e:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <MX_DMA_Init+0x48>)
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	615a      	str	r2, [r3, #20]
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <MX_DMA_Init+0x48>)
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	4013      	ands	r3, r2
 8002aae:	607b      	str	r3, [r7, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	2009      	movs	r0, #9
 8002ab8:	f001 fad4 	bl	8004064 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002abc:	2009      	movs	r0, #9
 8002abe:	f001 fae6 	bl	800408e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	200b      	movs	r0, #11
 8002ac8:	f001 facc 	bl	8004064 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8002acc:	200b      	movs	r0, #11
 8002ace:	f001 fade 	bl	800408e <HAL_NVIC_EnableIRQ>

}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b002      	add	sp, #8
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	40021000 	.word	0x40021000

08002ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b08b      	sub	sp, #44	; 0x2c
 8002ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae6:	2414      	movs	r4, #20
 8002ae8:	193b      	adds	r3, r7, r4
 8002aea:	0018      	movs	r0, r3
 8002aec:	2314      	movs	r3, #20
 8002aee:	001a      	movs	r2, r3
 8002af0:	2100      	movs	r1, #0
 8002af2:	f004 f84d 	bl	8006b90 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002af6:	4b4b      	ldr	r3, [pc, #300]	; (8002c24 <MX_GPIO_Init+0x144>)
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	4b4a      	ldr	r3, [pc, #296]	; (8002c24 <MX_GPIO_Init+0x144>)
 8002afc:	2180      	movs	r1, #128	; 0x80
 8002afe:	03c9      	lsls	r1, r1, #15
 8002b00:	430a      	orrs	r2, r1
 8002b02:	615a      	str	r2, [r3, #20]
 8002b04:	4b47      	ldr	r3, [pc, #284]	; (8002c24 <MX_GPIO_Init+0x144>)
 8002b06:	695a      	ldr	r2, [r3, #20]
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	03db      	lsls	r3, r3, #15
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
 8002b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b12:	4b44      	ldr	r3, [pc, #272]	; (8002c24 <MX_GPIO_Init+0x144>)
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	4b43      	ldr	r3, [pc, #268]	; (8002c24 <MX_GPIO_Init+0x144>)
 8002b18:	2180      	movs	r1, #128	; 0x80
 8002b1a:	0309      	lsls	r1, r1, #12
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	615a      	str	r2, [r3, #20]
 8002b20:	4b40      	ldr	r3, [pc, #256]	; (8002c24 <MX_GPIO_Init+0x144>)
 8002b22:	695a      	ldr	r2, [r3, #20]
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	031b      	lsls	r3, r3, #12
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2e:	4b3d      	ldr	r3, [pc, #244]	; (8002c24 <MX_GPIO_Init+0x144>)
 8002b30:	695a      	ldr	r2, [r3, #20]
 8002b32:	4b3c      	ldr	r3, [pc, #240]	; (8002c24 <MX_GPIO_Init+0x144>)
 8002b34:	2180      	movs	r1, #128	; 0x80
 8002b36:	0289      	lsls	r1, r1, #10
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	615a      	str	r2, [r3, #20]
 8002b3c:	4b39      	ldr	r3, [pc, #228]	; (8002c24 <MX_GPIO_Init+0x144>)
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	029b      	lsls	r3, r3, #10
 8002b44:	4013      	ands	r3, r2
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b4a:	4b36      	ldr	r3, [pc, #216]	; (8002c24 <MX_GPIO_Init+0x144>)
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	4b35      	ldr	r3, [pc, #212]	; (8002c24 <MX_GPIO_Init+0x144>)
 8002b50:	2180      	movs	r1, #128	; 0x80
 8002b52:	02c9      	lsls	r1, r1, #11
 8002b54:	430a      	orrs	r2, r1
 8002b56:	615a      	str	r2, [r3, #20]
 8002b58:	4b32      	ldr	r3, [pc, #200]	; (8002c24 <MX_GPIO_Init+0x144>)
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	2380      	movs	r3, #128	; 0x80
 8002b5e:	02db      	lsls	r3, r3, #11
 8002b60:	4013      	ands	r3, r2
 8002b62:	607b      	str	r3, [r7, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8002b66:	2380      	movs	r3, #128	; 0x80
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	482f      	ldr	r0, [pc, #188]	; (8002c28 <MX_GPIO_Init+0x148>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	0019      	movs	r1, r3
 8002b70:	f001 fdbb 	bl	80046ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b74:	193b      	adds	r3, r7, r4
 8002b76:	2202      	movs	r2, #2
 8002b78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b7a:	193b      	adds	r3, r7, r4
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b80:	193b      	adds	r3, r7, r4
 8002b82:	2202      	movs	r2, #2
 8002b84:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b86:	193b      	adds	r3, r7, r4
 8002b88:	4a27      	ldr	r2, [pc, #156]	; (8002c28 <MX_GPIO_Init+0x148>)
 8002b8a:	0019      	movs	r1, r3
 8002b8c:	0010      	movs	r0, r2
 8002b8e:	f001 fc1f 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b92:	193b      	adds	r3, r7, r4
 8002b94:	2201      	movs	r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b98:	193b      	adds	r3, r7, r4
 8002b9a:	2284      	movs	r2, #132	; 0x84
 8002b9c:	0392      	lsls	r2, r2, #14
 8002b9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	193b      	adds	r3, r7, r4
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ba6:	193a      	adds	r2, r7, r4
 8002ba8:	2390      	movs	r3, #144	; 0x90
 8002baa:	05db      	lsls	r3, r3, #23
 8002bac:	0011      	movs	r1, r2
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f001 fc0e 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8002bb4:	0021      	movs	r1, r4
 8002bb6:	187b      	adds	r3, r7, r1
 8002bb8:	2280      	movs	r2, #128	; 0x80
 8002bba:	0052      	lsls	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bbe:	000c      	movs	r4, r1
 8002bc0:	193b      	adds	r3, r7, r4
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	193b      	adds	r3, r7, r4
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bcc:	193b      	adds	r3, r7, r4
 8002bce:	2200      	movs	r2, #0
 8002bd0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8002bd2:	193b      	adds	r3, r7, r4
 8002bd4:	4a14      	ldr	r2, [pc, #80]	; (8002c28 <MX_GPIO_Init+0x148>)
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	0010      	movs	r0, r2
 8002bda:	f001 fbf9 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bde:	0021      	movs	r1, r4
 8002be0:	187b      	adds	r3, r7, r1
 8002be2:	22c0      	movs	r2, #192	; 0xc0
 8002be4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002be6:	187b      	adds	r3, r7, r1
 8002be8:	2212      	movs	r2, #18
 8002bea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	187b      	adds	r3, r7, r1
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bf2:	187b      	adds	r3, r7, r1
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002bf8:	187b      	adds	r3, r7, r1
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bfe:	187b      	adds	r3, r7, r1
 8002c00:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <MX_GPIO_Init+0x14c>)
 8002c02:	0019      	movs	r1, r3
 8002c04:	0010      	movs	r0, r2
 8002c06:	f001 fbe3 	bl	80043d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	2005      	movs	r0, #5
 8002c10:	f001 fa28 	bl	8004064 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002c14:	2005      	movs	r0, #5
 8002c16:	f001 fa3a 	bl	800408e <HAL_NVIC_EnableIRQ>

}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	b00b      	add	sp, #44	; 0x2c
 8002c20:	bd90      	pop	{r4, r7, pc}
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	40021000 	.word	0x40021000
 8002c28:	48000800 	.word	0x48000800
 8002c2c:	48000400 	.word	0x48000400

08002c30 <EXTI0_1_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI0_1_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
	//TO DO:
	//TASK 1
	//Switch delay frequency

	int currentMillis = HAL_GetTick();
 8002c36:	f000 fba3 	bl	8003380 <HAL_GetTick>
 8002c3a:	0003      	movs	r3, r0
 8002c3c:	60bb      	str	r3, [r7, #8]
	if(currentMillis - previousMillis > 200){ //Used to add 10ms delay for button debouncing
 8002c3e:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <EXTI0_1_IRQHandler+0xd0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2bc8      	cmp	r3, #200	; 0xc8
 8002c48:	dd52      	ble.n	8002cf0 <EXTI0_1_IRQHandler+0xc0>
		int ADCVal = pollADC(); // calls pollADC function and assigns adc value to variable
 8002c4a:	f000 f86b 	bl	8002d24 <pollADC>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	607b      	str	r3, [r7, #4]
		sprintf(buffer, "ADCVal:%d\r\n\r\n", ADCVal);
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	492b      	ldr	r1, [pc, #172]	; (8002d04 <EXTI0_1_IRQHandler+0xd4>)
 8002c56:	4b2c      	ldr	r3, [pc, #176]	; (8002d08 <EXTI0_1_IRQHandler+0xd8>)
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f003 ffa1 	bl	8006ba0 <siprintf>
		HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000); //Transmits the ADC Value over UART
 8002c5e:	23fa      	movs	r3, #250	; 0xfa
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4929      	ldr	r1, [pc, #164]	; (8002d08 <EXTI0_1_IRQHandler+0xd8>)
 8002c64:	4829      	ldr	r0, [pc, #164]	; (8002d0c <EXTI0_1_IRQHandler+0xdc>)
 8002c66:	2219      	movs	r2, #25
 8002c68:	f002 fff8 	bl	8005c5c <HAL_UART_Transmit>

		number = ADCVal;
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	4b28      	ldr	r3, [pc, #160]	; (8002d10 <EXTI0_1_IRQHandler+0xe0>)
 8002c70:	601a      	str	r2, [r3, #0]

		  	  for(int j =0; j<12; j++){
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	e030      	b.n	8002cda <EXTI0_1_IRQHandler+0xaa>
		  		  if(number & 1){
 8002c78:	4b25      	ldr	r3, [pc, #148]	; (8002d10 <EXTI0_1_IRQHandler+0xe0>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d00a      	beq.n	8002c98 <EXTI0_1_IRQHandler+0x68>
		  			  binaryVal = 1;
 8002c82:	4b24      	ldr	r3, [pc, #144]	; (8002d14 <EXTI0_1_IRQHandler+0xe4>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	701a      	strb	r2, [r3, #0]
		  			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	4822      	ldr	r0, [pc, #136]	; (8002d18 <EXTI0_1_IRQHandler+0xe8>)
 8002c8e:	2201      	movs	r2, #1
 8002c90:	0019      	movs	r1, r3
 8002c92:	f001 fd2a 	bl	80046ea <HAL_GPIO_WritePin>
 8002c96:	e009      	b.n	8002cac <EXTI0_1_IRQHandler+0x7c>
		  		  }
		  		  else{
		  			  binaryVal = 0;
 8002c98:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <EXTI0_1_IRQHandler+0xe4>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
		  			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 8002c9e:	2380      	movs	r3, #128	; 0x80
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	481d      	ldr	r0, [pc, #116]	; (8002d18 <EXTI0_1_IRQHandler+0xe8>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	f001 fd1f 	bl	80046ea <HAL_GPIO_WritePin>
		  		  }
		  		sprintf(buffer, "BinaryVal:%d\r\n\r\n", binaryVal);
 8002cac:	4b19      	ldr	r3, [pc, #100]	; (8002d14 <EXTI0_1_IRQHandler+0xe4>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	001a      	movs	r2, r3
 8002cb2:	491a      	ldr	r1, [pc, #104]	; (8002d1c <EXTI0_1_IRQHandler+0xec>)
 8002cb4:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <EXTI0_1_IRQHandler+0xd8>)
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f003 ff72 	bl	8006ba0 <siprintf>
		  		HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000); //Transmits the ADC Value over UART
 8002cbc:	23fa      	movs	r3, #250	; 0xfa
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4911      	ldr	r1, [pc, #68]	; (8002d08 <EXTI0_1_IRQHandler+0xd8>)
 8002cc2:	4812      	ldr	r0, [pc, #72]	; (8002d0c <EXTI0_1_IRQHandler+0xdc>)
 8002cc4:	2219      	movs	r2, #25
 8002cc6:	f002 ffc9 	bl	8005c5c <HAL_UART_Transmit>
		  		number>>= 1;
 8002cca:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <EXTI0_1_IRQHandler+0xe0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	085a      	lsrs	r2, r3, #1
 8002cd0:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <EXTI0_1_IRQHandler+0xe0>)
 8002cd2:	601a      	str	r2, [r3, #0]
		  	  for(int j =0; j<12; j++){
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b0b      	cmp	r3, #11
 8002cde:	ddcb      	ble.n	8002c78 <EXTI0_1_IRQHandler+0x48>
		  		//HAL_Delay(1000);
		  	  }
		previousMillis = currentMillis;
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <EXTI0_1_IRQHandler+0xd0>)
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	601a      	str	r2, [r3, #0]

		numMessages++;//Increment numMessages to track how many messages have been transmitted
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <EXTI0_1_IRQHandler+0xf0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <EXTI0_1_IRQHandler+0xf0>)
 8002cee:	601a      	str	r2, [r3, #0]
	}



	HAL_GPIO_EXTI_IRQHandler(B1_Pin); // Clear interrupt flags
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	f001 fd17 	bl	8004724 <HAL_GPIO_EXTI_IRQHandler>
}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b004      	add	sp, #16
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	20000240 	.word	0x20000240
 8002d04:	0800a61c 	.word	0x0800a61c
 8002d08:	20000224 	.word	0x20000224
 8002d0c:	2000015c 	.word	0x2000015c
 8002d10:	20000248 	.word	0x20000248
 8002d14:	2000024c 	.word	0x2000024c
 8002d18:	48000800 	.word	0x48000800
 8002d1c:	0800a62c 	.word	0x0800a62c
 8002d20:	20000244 	.word	0x20000244

08002d24 <pollADC>:

uint32_t pollADC(void){
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
	//TO DO:
	//TASK 2
	// Complete the function body
	HAL_ADC_Start(&hadc);
 8002d2a:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <pollADC+0x38>)
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f000 fc95 	bl	800365c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 1);
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <pollADC+0x38>)
 8002d34:	2101      	movs	r1, #1
 8002d36:	0018      	movs	r0, r3
 8002d38:	f000 fd24 	bl	8003784 <HAL_ADC_PollForConversion>
	int val = HAL_ADC_GetValue(&hadc);
 8002d3c:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <pollADC+0x38>)
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f000 fdb8 	bl	80038b4 <HAL_ADC_GetValue>
 8002d44:	0003      	movs	r3, r0
 8002d46:	607b      	str	r3, [r7, #4]
	HAL_ADC_Stop(&hadc);
 8002d48:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <pollADC+0x38>)
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f000 fcda 	bl	8003704 <HAL_ADC_Stop>
	return val;
 8002d50:	687b      	ldr	r3, [r7, #4]
}
 8002d52:	0018      	movs	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	b002      	add	sp, #8
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	20000090 	.word	0x20000090

08002d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d64:	b672      	cpsid	i
}
 8002d66:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d68:	e7fe      	b.n	8002d68 <Error_Handler+0x8>
	...

08002d6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d72:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <HAL_MspInit+0x44>)
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	4b0e      	ldr	r3, [pc, #56]	; (8002db0 <HAL_MspInit+0x44>)
 8002d78:	2101      	movs	r1, #1
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	619a      	str	r2, [r3, #24]
 8002d7e:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <HAL_MspInit+0x44>)
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	2201      	movs	r2, #1
 8002d84:	4013      	ands	r3, r2
 8002d86:	607b      	str	r3, [r7, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d8a:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <HAL_MspInit+0x44>)
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <HAL_MspInit+0x44>)
 8002d90:	2180      	movs	r1, #128	; 0x80
 8002d92:	0549      	lsls	r1, r1, #21
 8002d94:	430a      	orrs	r2, r1
 8002d96:	61da      	str	r2, [r3, #28]
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <HAL_MspInit+0x44>)
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	2380      	movs	r3, #128	; 0x80
 8002d9e:	055b      	lsls	r3, r3, #21
 8002da0:	4013      	ands	r3, r2
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b002      	add	sp, #8
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	40021000 	.word	0x40021000

08002db4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002db4:	b590      	push	{r4, r7, lr}
 8002db6:	b08b      	sub	sp, #44	; 0x2c
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dbc:	2414      	movs	r4, #20
 8002dbe:	193b      	adds	r3, r7, r4
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	2314      	movs	r3, #20
 8002dc4:	001a      	movs	r2, r3
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	f003 fee2 	bl	8006b90 <memset>
  if(hadc->Instance==ADC1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a31      	ldr	r2, [pc, #196]	; (8002e98 <HAL_ADC_MspInit+0xe4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d15b      	bne.n	8002e8e <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002dd6:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <HAL_ADC_MspInit+0xe8>)
 8002dd8:	699a      	ldr	r2, [r3, #24]
 8002dda:	4b30      	ldr	r3, [pc, #192]	; (8002e9c <HAL_ADC_MspInit+0xe8>)
 8002ddc:	2180      	movs	r1, #128	; 0x80
 8002dde:	0089      	lsls	r1, r1, #2
 8002de0:	430a      	orrs	r2, r1
 8002de2:	619a      	str	r2, [r3, #24]
 8002de4:	4b2d      	ldr	r3, [pc, #180]	; (8002e9c <HAL_ADC_MspInit+0xe8>)
 8002de6:	699a      	ldr	r2, [r3, #24]
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4013      	ands	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df2:	4b2a      	ldr	r3, [pc, #168]	; (8002e9c <HAL_ADC_MspInit+0xe8>)
 8002df4:	695a      	ldr	r2, [r3, #20]
 8002df6:	4b29      	ldr	r3, [pc, #164]	; (8002e9c <HAL_ADC_MspInit+0xe8>)
 8002df8:	2180      	movs	r1, #128	; 0x80
 8002dfa:	0289      	lsls	r1, r1, #10
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	615a      	str	r2, [r3, #20]
 8002e00:	4b26      	ldr	r3, [pc, #152]	; (8002e9c <HAL_ADC_MspInit+0xe8>)
 8002e02:	695a      	ldr	r2, [r3, #20]
 8002e04:	2380      	movs	r3, #128	; 0x80
 8002e06:	029b      	lsls	r3, r3, #10
 8002e08:	4013      	ands	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002e0e:	193b      	adds	r3, r7, r4
 8002e10:	2280      	movs	r2, #128	; 0x80
 8002e12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e14:	193b      	adds	r3, r7, r4
 8002e16:	2203      	movs	r2, #3
 8002e18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1a:	193b      	adds	r3, r7, r4
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e20:	193a      	adds	r2, r7, r4
 8002e22:	2390      	movs	r3, #144	; 0x90
 8002e24:	05db      	lsls	r3, r3, #23
 8002e26:	0011      	movs	r1, r2
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f001 fad1 	bl	80043d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002e2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ea0 <HAL_ADC_MspInit+0xec>)
 8002e30:	4a1c      	ldr	r2, [pc, #112]	; (8002ea4 <HAL_ADC_MspInit+0xf0>)
 8002e32:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e34:	4b1a      	ldr	r3, [pc, #104]	; (8002ea0 <HAL_ADC_MspInit+0xec>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e3a:	4b19      	ldr	r3, [pc, #100]	; (8002ea0 <HAL_ADC_MspInit+0xec>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002e40:	4b17      	ldr	r3, [pc, #92]	; (8002ea0 <HAL_ADC_MspInit+0xec>)
 8002e42:	2280      	movs	r2, #128	; 0x80
 8002e44:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e46:	4b16      	ldr	r3, [pc, #88]	; (8002ea0 <HAL_ADC_MspInit+0xec>)
 8002e48:	2280      	movs	r2, #128	; 0x80
 8002e4a:	0052      	lsls	r2, r2, #1
 8002e4c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e4e:	4b14      	ldr	r3, [pc, #80]	; (8002ea0 <HAL_ADC_MspInit+0xec>)
 8002e50:	2280      	movs	r2, #128	; 0x80
 8002e52:	00d2      	lsls	r2, r2, #3
 8002e54:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8002e56:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <HAL_ADC_MspInit+0xec>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002e5c:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <HAL_ADC_MspInit+0xec>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002e62:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <HAL_ADC_MspInit+0xec>)
 8002e64:	0018      	movs	r0, r3
 8002e66:	f001 f92f 	bl	80040c8 <HAL_DMA_Init>
 8002e6a:	1e03      	subs	r3, r0, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8002e6e:	f7ff ff77 	bl	8002d60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <HAL_ADC_MspInit+0xec>)
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
 8002e78:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <HAL_ADC_MspInit+0xec>)
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2100      	movs	r1, #0
 8002e82:	200c      	movs	r0, #12
 8002e84:	f001 f8ee 	bl	8004064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8002e88:	200c      	movs	r0, #12
 8002e8a:	f001 f900 	bl	800408e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b00b      	add	sp, #44	; 0x2c
 8002e94:	bd90      	pop	{r4, r7, pc}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	40012400 	.word	0x40012400
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	200000d0 	.word	0x200000d0
 8002ea4:	40020008 	.word	0x40020008

08002ea8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a09      	ldr	r2, [pc, #36]	; (8002edc <HAL_TIM_Base_MspInit+0x34>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d10b      	bne.n	8002ed2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002eba:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <HAL_TIM_Base_MspInit+0x38>)
 8002ebc:	69da      	ldr	r2, [r3, #28]
 8002ebe:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <HAL_TIM_Base_MspInit+0x38>)
 8002ec0:	2102      	movs	r1, #2
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	61da      	str	r2, [r3, #28]
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <HAL_TIM_Base_MspInit+0x38>)
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b004      	add	sp, #16
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	40000400 	.word	0x40000400
 8002ee0:	40021000 	.word	0x40021000

08002ee4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ee4:	b590      	push	{r4, r7, lr}
 8002ee6:	b089      	sub	sp, #36	; 0x24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eec:	240c      	movs	r4, #12
 8002eee:	193b      	adds	r3, r7, r4
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	2314      	movs	r3, #20
 8002ef4:	001a      	movs	r2, r3
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	f003 fe4a 	bl	8006b90 <memset>
  if(htim->Instance==TIM3)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a15      	ldr	r2, [pc, #84]	; (8002f58 <HAL_TIM_MspPostInit+0x74>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d124      	bne.n	8002f50 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f06:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <HAL_TIM_MspPostInit+0x78>)
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <HAL_TIM_MspPostInit+0x78>)
 8002f0c:	2180      	movs	r1, #128	; 0x80
 8002f0e:	0309      	lsls	r1, r1, #12
 8002f10:	430a      	orrs	r2, r1
 8002f12:	615a      	str	r2, [r3, #20]
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <HAL_TIM_MspPostInit+0x78>)
 8002f16:	695a      	ldr	r2, [r3, #20]
 8002f18:	2380      	movs	r3, #128	; 0x80
 8002f1a:	031b      	lsls	r3, r3, #12
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60bb      	str	r3, [r7, #8]
 8002f20:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f22:	193b      	adds	r3, r7, r4
 8002f24:	2280      	movs	r2, #128	; 0x80
 8002f26:	0092      	lsls	r2, r2, #2
 8002f28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2a:	0021      	movs	r1, r4
 8002f2c:	187b      	adds	r3, r7, r1
 8002f2e:	2202      	movs	r2, #2
 8002f30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	187b      	adds	r3, r7, r1
 8002f34:	2200      	movs	r2, #0
 8002f36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f38:	187b      	adds	r3, r7, r1
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002f3e:	187b      	adds	r3, r7, r1
 8002f40:	2200      	movs	r2, #0
 8002f42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f44:	187b      	adds	r3, r7, r1
 8002f46:	4a06      	ldr	r2, [pc, #24]	; (8002f60 <HAL_TIM_MspPostInit+0x7c>)
 8002f48:	0019      	movs	r1, r3
 8002f4a:	0010      	movs	r0, r2
 8002f4c:	f001 fa40 	bl	80043d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b009      	add	sp, #36	; 0x24
 8002f56:	bd90      	pop	{r4, r7, pc}
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	48000800 	.word	0x48000800

08002f64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f64:	b590      	push	{r4, r7, lr}
 8002f66:	b08b      	sub	sp, #44	; 0x2c
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6c:	2414      	movs	r4, #20
 8002f6e:	193b      	adds	r3, r7, r4
 8002f70:	0018      	movs	r0, r3
 8002f72:	2314      	movs	r3, #20
 8002f74:	001a      	movs	r2, r3
 8002f76:	2100      	movs	r1, #0
 8002f78:	f003 fe0a 	bl	8006b90 <memset>
  if(huart->Instance==USART2)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a33      	ldr	r2, [pc, #204]	; (8003050 <HAL_UART_MspInit+0xec>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d160      	bne.n	8003048 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f86:	4b33      	ldr	r3, [pc, #204]	; (8003054 <HAL_UART_MspInit+0xf0>)
 8002f88:	69da      	ldr	r2, [r3, #28]
 8002f8a:	4b32      	ldr	r3, [pc, #200]	; (8003054 <HAL_UART_MspInit+0xf0>)
 8002f8c:	2180      	movs	r1, #128	; 0x80
 8002f8e:	0289      	lsls	r1, r1, #10
 8002f90:	430a      	orrs	r2, r1
 8002f92:	61da      	str	r2, [r3, #28]
 8002f94:	4b2f      	ldr	r3, [pc, #188]	; (8003054 <HAL_UART_MspInit+0xf0>)
 8002f96:	69da      	ldr	r2, [r3, #28]
 8002f98:	2380      	movs	r3, #128	; 0x80
 8002f9a:	029b      	lsls	r3, r3, #10
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa2:	4b2c      	ldr	r3, [pc, #176]	; (8003054 <HAL_UART_MspInit+0xf0>)
 8002fa4:	695a      	ldr	r2, [r3, #20]
 8002fa6:	4b2b      	ldr	r3, [pc, #172]	; (8003054 <HAL_UART_MspInit+0xf0>)
 8002fa8:	2180      	movs	r1, #128	; 0x80
 8002faa:	0289      	lsls	r1, r1, #10
 8002fac:	430a      	orrs	r2, r1
 8002fae:	615a      	str	r2, [r3, #20]
 8002fb0:	4b28      	ldr	r3, [pc, #160]	; (8003054 <HAL_UART_MspInit+0xf0>)
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	029b      	lsls	r3, r3, #10
 8002fb8:	4013      	ands	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002fbe:	0021      	movs	r1, r4
 8002fc0:	187b      	adds	r3, r7, r1
 8002fc2:	220c      	movs	r2, #12
 8002fc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc6:	187b      	adds	r3, r7, r1
 8002fc8:	2202      	movs	r2, #2
 8002fca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fcc:	187b      	adds	r3, r7, r1
 8002fce:	2200      	movs	r2, #0
 8002fd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fd2:	187b      	adds	r3, r7, r1
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002fd8:	187b      	adds	r3, r7, r1
 8002fda:	2201      	movs	r2, #1
 8002fdc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fde:	187a      	adds	r2, r7, r1
 8002fe0:	2390      	movs	r3, #144	; 0x90
 8002fe2:	05db      	lsls	r3, r3, #23
 8002fe4:	0011      	movs	r1, r2
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f001 f9f2 	bl	80043d0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8002fec:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <HAL_UART_MspInit+0xf4>)
 8002fee:	4a1b      	ldr	r2, [pc, #108]	; (800305c <HAL_UART_MspInit+0xf8>)
 8002ff0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ff2:	4b19      	ldr	r3, [pc, #100]	; (8003058 <HAL_UART_MspInit+0xf4>)
 8002ff4:	2210      	movs	r2, #16
 8002ff6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ff8:	4b17      	ldr	r3, [pc, #92]	; (8003058 <HAL_UART_MspInit+0xf4>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ffe:	4b16      	ldr	r3, [pc, #88]	; (8003058 <HAL_UART_MspInit+0xf4>)
 8003000:	2280      	movs	r2, #128	; 0x80
 8003002:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003004:	4b14      	ldr	r3, [pc, #80]	; (8003058 <HAL_UART_MspInit+0xf4>)
 8003006:	2200      	movs	r2, #0
 8003008:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800300a:	4b13      	ldr	r3, [pc, #76]	; (8003058 <HAL_UART_MspInit+0xf4>)
 800300c:	2200      	movs	r2, #0
 800300e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003010:	4b11      	ldr	r3, [pc, #68]	; (8003058 <HAL_UART_MspInit+0xf4>)
 8003012:	2200      	movs	r2, #0
 8003014:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003016:	4b10      	ldr	r3, [pc, #64]	; (8003058 <HAL_UART_MspInit+0xf4>)
 8003018:	2200      	movs	r2, #0
 800301a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800301c:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <HAL_UART_MspInit+0xf4>)
 800301e:	0018      	movs	r0, r3
 8003020:	f001 f852 	bl	80040c8 <HAL_DMA_Init>
 8003024:	1e03      	subs	r3, r0, #0
 8003026:	d001      	beq.n	800302c <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8003028:	f7ff fe9a 	bl	8002d60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <HAL_UART_MspInit+0xf4>)
 8003030:	66da      	str	r2, [r3, #108]	; 0x6c
 8003032:	4b09      	ldr	r3, [pc, #36]	; (8003058 <HAL_UART_MspInit+0xf4>)
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003038:	2200      	movs	r2, #0
 800303a:	2100      	movs	r1, #0
 800303c:	201c      	movs	r0, #28
 800303e:	f001 f811 	bl	8004064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003042:	201c      	movs	r0, #28
 8003044:	f001 f823 	bl	800408e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003048:	46c0      	nop			; (mov r8, r8)
 800304a:	46bd      	mov	sp, r7
 800304c:	b00b      	add	sp, #44	; 0x2c
 800304e:	bd90      	pop	{r4, r7, pc}
 8003050:	40004400 	.word	0x40004400
 8003054:	40021000 	.word	0x40021000
 8003058:	200001e0 	.word	0x200001e0
 800305c:	40020044 	.word	0x40020044

08003060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003064:	e7fe      	b.n	8003064 <NMI_Handler+0x4>

08003066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800306a:	e7fe      	b.n	800306a <HardFault_Handler+0x4>

0800306c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003070:	46c0      	nop			; (mov r8, r8)
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003084:	f000 f96a 	bl	800335c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003088:	46c0      	nop			; (mov r8, r8)
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003094:	4b03      	ldr	r3, [pc, #12]	; (80030a4 <DMA1_Channel1_IRQHandler+0x14>)
 8003096:	0018      	movs	r0, r3
 8003098:	f001 f8db 	bl	8004252 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800309c:	46c0      	nop			; (mov r8, r8)
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	200000d0 	.word	0x200000d0

080030a8 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80030ac:	4b03      	ldr	r3, [pc, #12]	; (80030bc <DMA1_Channel4_5_IRQHandler+0x14>)
 80030ae:	0018      	movs	r0, r3
 80030b0:	f001 f8cf 	bl	8004252 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80030b4:	46c0      	nop			; (mov r8, r8)
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	200001e0 	.word	0x200001e0

080030c0 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80030c4:	4b03      	ldr	r3, [pc, #12]	; (80030d4 <ADC1_COMP_IRQHandler+0x14>)
 80030c6:	0018      	movs	r0, r3
 80030c8:	f000 fc00 	bl	80038cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80030cc:	46c0      	nop			; (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	20000090 	.word	0x20000090

080030d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80030dc:	4b03      	ldr	r3, [pc, #12]	; (80030ec <USART2_IRQHandler+0x14>)
 80030de:	0018      	movs	r0, r3
 80030e0:	f002 fe66 	bl	8005db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80030e4:	46c0      	nop			; (mov r8, r8)
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	2000015c 	.word	0x2000015c

080030f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
	return 1;
 80030f4:	2301      	movs	r3, #1
}
 80030f6:	0018      	movs	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <_kill>:

int _kill(int pid, int sig)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003106:	f003 fd19 	bl	8006b3c <__errno>
 800310a:	0003      	movs	r3, r0
 800310c:	2216      	movs	r2, #22
 800310e:	601a      	str	r2, [r3, #0]
	return -1;
 8003110:	2301      	movs	r3, #1
 8003112:	425b      	negs	r3, r3
}
 8003114:	0018      	movs	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	b002      	add	sp, #8
 800311a:	bd80      	pop	{r7, pc}

0800311c <_exit>:

void _exit (int status)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003124:	2301      	movs	r3, #1
 8003126:	425a      	negs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	0011      	movs	r1, r2
 800312c:	0018      	movs	r0, r3
 800312e:	f7ff ffe5 	bl	80030fc <_kill>
	while (1) {}		/* Make sure we hang here */
 8003132:	e7fe      	b.n	8003132 <_exit+0x16>

08003134 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	e00a      	b.n	800315c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003146:	e000      	b.n	800314a <_read+0x16>
 8003148:	bf00      	nop
 800314a:	0001      	movs	r1, r0
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	60ba      	str	r2, [r7, #8]
 8003152:	b2ca      	uxtb	r2, r1
 8003154:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	3301      	adds	r3, #1
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	429a      	cmp	r2, r3
 8003162:	dbf0      	blt.n	8003146 <_read+0x12>
	}

return len;
 8003164:	687b      	ldr	r3, [r7, #4]
}
 8003166:	0018      	movs	r0, r3
 8003168:	46bd      	mov	sp, r7
 800316a:	b006      	add	sp, #24
 800316c:	bd80      	pop	{r7, pc}

0800316e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b086      	sub	sp, #24
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	e009      	b.n	8003194 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	60ba      	str	r2, [r7, #8]
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	0018      	movs	r0, r3
 800318a:	e000      	b.n	800318e <_write+0x20>
 800318c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	3301      	adds	r3, #1
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	429a      	cmp	r2, r3
 800319a:	dbf1      	blt.n	8003180 <_write+0x12>
	}
	return len;
 800319c:	687b      	ldr	r3, [r7, #4]
}
 800319e:	0018      	movs	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b006      	add	sp, #24
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <_close>:

int _close(int file)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
	return -1;
 80031ae:	2301      	movs	r3, #1
 80031b0:	425b      	negs	r3, r3
}
 80031b2:	0018      	movs	r0, r3
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b002      	add	sp, #8
 80031b8:	bd80      	pop	{r7, pc}

080031ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b082      	sub	sp, #8
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2280      	movs	r2, #128	; 0x80
 80031c8:	0192      	lsls	r2, r2, #6
 80031ca:	605a      	str	r2, [r3, #4]
	return 0;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	0018      	movs	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b002      	add	sp, #8
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <_isatty>:

int _isatty(int file)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
	return 1;
 80031de:	2301      	movs	r3, #1
}
 80031e0:	0018      	movs	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b002      	add	sp, #8
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
	return 0;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	0018      	movs	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b004      	add	sp, #16
 80031fc:	bd80      	pop	{r7, pc}
	...

08003200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003208:	4a14      	ldr	r2, [pc, #80]	; (800325c <_sbrk+0x5c>)
 800320a:	4b15      	ldr	r3, [pc, #84]	; (8003260 <_sbrk+0x60>)
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003214:	4b13      	ldr	r3, [pc, #76]	; (8003264 <_sbrk+0x64>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d102      	bne.n	8003222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800321c:	4b11      	ldr	r3, [pc, #68]	; (8003264 <_sbrk+0x64>)
 800321e:	4a12      	ldr	r2, [pc, #72]	; (8003268 <_sbrk+0x68>)
 8003220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003222:	4b10      	ldr	r3, [pc, #64]	; (8003264 <_sbrk+0x64>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	18d3      	adds	r3, r2, r3
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	429a      	cmp	r2, r3
 800322e:	d207      	bcs.n	8003240 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003230:	f003 fc84 	bl	8006b3c <__errno>
 8003234:	0003      	movs	r3, r0
 8003236:	220c      	movs	r2, #12
 8003238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800323a:	2301      	movs	r3, #1
 800323c:	425b      	negs	r3, r3
 800323e:	e009      	b.n	8003254 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003240:	4b08      	ldr	r3, [pc, #32]	; (8003264 <_sbrk+0x64>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003246:	4b07      	ldr	r3, [pc, #28]	; (8003264 <_sbrk+0x64>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	18d2      	adds	r2, r2, r3
 800324e:	4b05      	ldr	r3, [pc, #20]	; (8003264 <_sbrk+0x64>)
 8003250:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003252:	68fb      	ldr	r3, [r7, #12]
}
 8003254:	0018      	movs	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	b006      	add	sp, #24
 800325a:	bd80      	pop	{r7, pc}
 800325c:	20002000 	.word	0x20002000
 8003260:	00000400 	.word	0x00000400
 8003264:	200002c4 	.word	0x200002c4
 8003268:	200002e0 	.word	0x200002e0

0800326c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003270:	46c0      	nop			; (mov r8, r8)
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
	...

08003278 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003278:	480d      	ldr	r0, [pc, #52]	; (80032b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800327a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800327c:	480d      	ldr	r0, [pc, #52]	; (80032b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800327e:	490e      	ldr	r1, [pc, #56]	; (80032b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003280:	4a0e      	ldr	r2, [pc, #56]	; (80032bc <LoopForever+0xe>)
  movs r3, #0
 8003282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003284:	e002      	b.n	800328c <LoopCopyDataInit>

08003286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800328a:	3304      	adds	r3, #4

0800328c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800328c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800328e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003290:	d3f9      	bcc.n	8003286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003292:	4a0b      	ldr	r2, [pc, #44]	; (80032c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003294:	4c0b      	ldr	r4, [pc, #44]	; (80032c4 <LoopForever+0x16>)
  movs r3, #0
 8003296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003298:	e001      	b.n	800329e <LoopFillZerobss>

0800329a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800329a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800329c:	3204      	adds	r2, #4

0800329e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800329e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032a0:	d3fb      	bcc.n	800329a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80032a2:	f7ff ffe3 	bl	800326c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80032a6:	f003 fc4f 	bl	8006b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032aa:	f7ff f8b9 	bl	8002420 <main>

080032ae <LoopForever>:

LoopForever:
    b LoopForever
 80032ae:	e7fe      	b.n	80032ae <LoopForever>
  ldr   r0, =_estack
 80032b0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80032b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032b8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80032bc:	0800aa70 	.word	0x0800aa70
  ldr r2, =_sbss
 80032c0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80032c4:	200002dc 	.word	0x200002dc

080032c8 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032c8:	e7fe      	b.n	80032c8 <CEC_CAN_IRQHandler>
	...

080032cc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032d0:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <HAL_Init+0x24>)
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <HAL_Init+0x24>)
 80032d6:	2110      	movs	r1, #16
 80032d8:	430a      	orrs	r2, r1
 80032da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80032dc:	2000      	movs	r0, #0
 80032de:	f000 f809 	bl	80032f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032e2:	f7ff fd43 	bl	8002d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	0018      	movs	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	40022000 	.word	0x40022000

080032f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032f4:	b590      	push	{r4, r7, lr}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032fc:	4b14      	ldr	r3, [pc, #80]	; (8003350 <HAL_InitTick+0x5c>)
 80032fe:	681c      	ldr	r4, [r3, #0]
 8003300:	4b14      	ldr	r3, [pc, #80]	; (8003354 <HAL_InitTick+0x60>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	0019      	movs	r1, r3
 8003306:	23fa      	movs	r3, #250	; 0xfa
 8003308:	0098      	lsls	r0, r3, #2
 800330a:	f7fc ff11 	bl	8000130 <__udivsi3>
 800330e:	0003      	movs	r3, r0
 8003310:	0019      	movs	r1, r3
 8003312:	0020      	movs	r0, r4
 8003314:	f7fc ff0c 	bl	8000130 <__udivsi3>
 8003318:	0003      	movs	r3, r0
 800331a:	0018      	movs	r0, r3
 800331c:	f000 fec7 	bl	80040ae <HAL_SYSTICK_Config>
 8003320:	1e03      	subs	r3, r0, #0
 8003322:	d001      	beq.n	8003328 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e00f      	b.n	8003348 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b03      	cmp	r3, #3
 800332c:	d80b      	bhi.n	8003346 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	2301      	movs	r3, #1
 8003332:	425b      	negs	r3, r3
 8003334:	2200      	movs	r2, #0
 8003336:	0018      	movs	r0, r3
 8003338:	f000 fe94 	bl	8004064 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <HAL_InitTick+0x64>)
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	e000      	b.n	8003348 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
}
 8003348:	0018      	movs	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	b003      	add	sp, #12
 800334e:	bd90      	pop	{r4, r7, pc}
 8003350:	20000004 	.word	0x20000004
 8003354:	2000000c 	.word	0x2000000c
 8003358:	20000008 	.word	0x20000008

0800335c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003360:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_IncTick+0x1c>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	001a      	movs	r2, r3
 8003366:	4b05      	ldr	r3, [pc, #20]	; (800337c <HAL_IncTick+0x20>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	18d2      	adds	r2, r2, r3
 800336c:	4b03      	ldr	r3, [pc, #12]	; (800337c <HAL_IncTick+0x20>)
 800336e:	601a      	str	r2, [r3, #0]
}
 8003370:	46c0      	nop			; (mov r8, r8)
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	2000000c 	.word	0x2000000c
 800337c:	200002c8 	.word	0x200002c8

08003380 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  return uwTick;
 8003384:	4b02      	ldr	r3, [pc, #8]	; (8003390 <HAL_GetTick+0x10>)
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	0018      	movs	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	200002c8 	.word	0x200002c8

08003394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800339c:	f7ff fff0 	bl	8003380 <HAL_GetTick>
 80033a0:	0003      	movs	r3, r0
 80033a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	3301      	adds	r3, #1
 80033ac:	d005      	beq.n	80033ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ae:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <HAL_Delay+0x44>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	001a      	movs	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	189b      	adds	r3, r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	f7ff ffe0 	bl	8003380 <HAL_GetTick>
 80033c0:	0002      	movs	r2, r0
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d8f7      	bhi.n	80033bc <HAL_Delay+0x28>
  {
  }
}
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	46bd      	mov	sp, r7
 80033d2:	b004      	add	sp, #16
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	2000000c 	.word	0x2000000c

080033dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033e4:	230f      	movs	r3, #15
 80033e6:	18fb      	adds	r3, r7, r3
 80033e8:	2200      	movs	r2, #0
 80033ea:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e125      	b.n	8003646 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10a      	bne.n	8003418 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2234      	movs	r2, #52	; 0x34
 800340c:	2100      	movs	r1, #0
 800340e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	0018      	movs	r0, r3
 8003414:	f7ff fcce 	bl	8002db4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341c:	2210      	movs	r2, #16
 800341e:	4013      	ands	r3, r2
 8003420:	d000      	beq.n	8003424 <HAL_ADC_Init+0x48>
 8003422:	e103      	b.n	800362c <HAL_ADC_Init+0x250>
 8003424:	230f      	movs	r3, #15
 8003426:	18fb      	adds	r3, r7, r3
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d000      	beq.n	8003430 <HAL_ADC_Init+0x54>
 800342e:	e0fd      	b.n	800362c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2204      	movs	r2, #4
 8003438:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800343a:	d000      	beq.n	800343e <HAL_ADC_Init+0x62>
 800343c:	e0f6      	b.n	800362c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003442:	4a83      	ldr	r2, [pc, #524]	; (8003650 <HAL_ADC_Init+0x274>)
 8003444:	4013      	ands	r3, r2
 8003446:	2202      	movs	r2, #2
 8003448:	431a      	orrs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2203      	movs	r2, #3
 8003456:	4013      	ands	r3, r2
 8003458:	2b01      	cmp	r3, #1
 800345a:	d112      	bne.n	8003482 <HAL_ADC_Init+0xa6>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2201      	movs	r2, #1
 8003464:	4013      	ands	r3, r2
 8003466:	2b01      	cmp	r3, #1
 8003468:	d009      	beq.n	800347e <HAL_ADC_Init+0xa2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	2380      	movs	r3, #128	; 0x80
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	401a      	ands	r2, r3
 8003476:	2380      	movs	r3, #128	; 0x80
 8003478:	021b      	lsls	r3, r3, #8
 800347a:	429a      	cmp	r2, r3
 800347c:	d101      	bne.n	8003482 <HAL_ADC_Init+0xa6>
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <HAL_ADC_Init+0xa8>
 8003482:	2300      	movs	r3, #0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d116      	bne.n	80034b6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	2218      	movs	r2, #24
 8003490:	4393      	bics	r3, r2
 8003492:	0019      	movs	r1, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	0899      	lsrs	r1, r3, #2
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4964      	ldr	r1, [pc, #400]	; (8003654 <HAL_ADC_Init+0x278>)
 80034c2:	400a      	ands	r2, r1
 80034c4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	7e1b      	ldrb	r3, [r3, #24]
 80034ca:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	7e5b      	ldrb	r3, [r3, #25]
 80034d0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034d2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	7e9b      	ldrb	r3, [r3, #26]
 80034d8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80034da:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d002      	beq.n	80034ea <HAL_ADC_Init+0x10e>
 80034e4:	2380      	movs	r3, #128	; 0x80
 80034e6:	015b      	lsls	r3, r3, #5
 80034e8:	e000      	b.n	80034ec <HAL_ADC_Init+0x110>
 80034ea:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80034ec:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80034f2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d101      	bne.n	8003500 <HAL_ADC_Init+0x124>
 80034fc:	2304      	movs	r3, #4
 80034fe:	e000      	b.n	8003502 <HAL_ADC_Init+0x126>
 8003500:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003502:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2124      	movs	r1, #36	; 0x24
 8003508:	5c5b      	ldrb	r3, [r3, r1]
 800350a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800350c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	4313      	orrs	r3, r2
 8003512:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	7edb      	ldrb	r3, [r3, #27]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d115      	bne.n	8003548 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	7e9b      	ldrb	r3, [r3, #26]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d105      	bne.n	8003530 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2280      	movs	r2, #128	; 0x80
 8003528:	0252      	lsls	r2, r2, #9
 800352a:	4313      	orrs	r3, r2
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	e00b      	b.n	8003548 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	2220      	movs	r2, #32
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003540:	2201      	movs	r2, #1
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69da      	ldr	r2, [r3, #28]
 800354c:	23c2      	movs	r3, #194	; 0xc2
 800354e:	33ff      	adds	r3, #255	; 0xff
 8003550:	429a      	cmp	r2, r3
 8003552:	d007      	beq.n	8003564 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800355c:	4313      	orrs	r3, r2
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	4313      	orrs	r3, r2
 8003562:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68d9      	ldr	r1, [r3, #12]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	430a      	orrs	r2, r1
 8003572:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	055b      	lsls	r3, r3, #21
 800357c:	429a      	cmp	r2, r3
 800357e:	d01b      	beq.n	80035b8 <HAL_ADC_Init+0x1dc>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	2b01      	cmp	r3, #1
 8003586:	d017      	beq.n	80035b8 <HAL_ADC_Init+0x1dc>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	2b02      	cmp	r3, #2
 800358e:	d013      	beq.n	80035b8 <HAL_ADC_Init+0x1dc>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	2b03      	cmp	r3, #3
 8003596:	d00f      	beq.n	80035b8 <HAL_ADC_Init+0x1dc>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359c:	2b04      	cmp	r3, #4
 800359e:	d00b      	beq.n	80035b8 <HAL_ADC_Init+0x1dc>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	2b05      	cmp	r3, #5
 80035a6:	d007      	beq.n	80035b8 <HAL_ADC_Init+0x1dc>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	2b06      	cmp	r3, #6
 80035ae:	d003      	beq.n	80035b8 <HAL_ADC_Init+0x1dc>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	2b07      	cmp	r3, #7
 80035b6:	d112      	bne.n	80035de <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695a      	ldr	r2, [r3, #20]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2107      	movs	r1, #7
 80035c4:	438a      	bics	r2, r1
 80035c6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6959      	ldr	r1, [r3, #20]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	2207      	movs	r2, #7
 80035d4:	401a      	ands	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4a1c      	ldr	r2, [pc, #112]	; (8003658 <HAL_ADC_Init+0x27c>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d10b      	bne.n	8003606 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f8:	2203      	movs	r2, #3
 80035fa:	4393      	bics	r3, r2
 80035fc:	2201      	movs	r2, #1
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003604:	e01c      	b.n	8003640 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360a:	2212      	movs	r2, #18
 800360c:	4393      	bics	r3, r2
 800360e:	2210      	movs	r2, #16
 8003610:	431a      	orrs	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361a:	2201      	movs	r2, #1
 800361c:	431a      	orrs	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003622:	230f      	movs	r3, #15
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	2201      	movs	r2, #1
 8003628:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800362a:	e009      	b.n	8003640 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003630:	2210      	movs	r2, #16
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003638:	230f      	movs	r3, #15
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	2201      	movs	r2, #1
 800363e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003640:	230f      	movs	r3, #15
 8003642:	18fb      	adds	r3, r7, r3
 8003644:	781b      	ldrb	r3, [r3, #0]
}
 8003646:	0018      	movs	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	b004      	add	sp, #16
 800364c:	bd80      	pop	{r7, pc}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	fffffefd 	.word	0xfffffefd
 8003654:	fffe0219 	.word	0xfffe0219
 8003658:	833fffe7 	.word	0x833fffe7

0800365c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800365c:	b590      	push	{r4, r7, lr}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003664:	230f      	movs	r3, #15
 8003666:	18fb      	adds	r3, r7, r3
 8003668:	2200      	movs	r2, #0
 800366a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2204      	movs	r2, #4
 8003674:	4013      	ands	r3, r2
 8003676:	d138      	bne.n	80036ea <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2234      	movs	r2, #52	; 0x34
 800367c:	5c9b      	ldrb	r3, [r3, r2]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <HAL_ADC_Start+0x2a>
 8003682:	2302      	movs	r3, #2
 8003684:	e038      	b.n	80036f8 <HAL_ADC_Start+0x9c>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2234      	movs	r2, #52	; 0x34
 800368a:	2101      	movs	r1, #1
 800368c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	7e5b      	ldrb	r3, [r3, #25]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d007      	beq.n	80036a6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003696:	230f      	movs	r3, #15
 8003698:	18fc      	adds	r4, r7, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	0018      	movs	r0, r3
 800369e:	f000 faf3 	bl	8003c88 <ADC_Enable>
 80036a2:	0003      	movs	r3, r0
 80036a4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80036a6:	230f      	movs	r3, #15
 80036a8:	18fb      	adds	r3, r7, r3
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d120      	bne.n	80036f2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b4:	4a12      	ldr	r2, [pc, #72]	; (8003700 <HAL_ADC_Start+0xa4>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	2280      	movs	r2, #128	; 0x80
 80036ba:	0052      	lsls	r2, r2, #1
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2234      	movs	r2, #52	; 0x34
 80036cc:	2100      	movs	r1, #0
 80036ce:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	221c      	movs	r2, #28
 80036d6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2104      	movs	r1, #4
 80036e4:	430a      	orrs	r2, r1
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	e003      	b.n	80036f2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80036ea:	230f      	movs	r3, #15
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	2202      	movs	r2, #2
 80036f0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80036f2:	230f      	movs	r3, #15
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	781b      	ldrb	r3, [r3, #0]
}
 80036f8:	0018      	movs	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b005      	add	sp, #20
 80036fe:	bd90      	pop	{r4, r7, pc}
 8003700:	fffff0fe 	.word	0xfffff0fe

08003704 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8003704:	b5b0      	push	{r4, r5, r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800370c:	230f      	movs	r3, #15
 800370e:	18fb      	adds	r3, r7, r3
 8003710:	2200      	movs	r2, #0
 8003712:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2234      	movs	r2, #52	; 0x34
 8003718:	5c9b      	ldrb	r3, [r3, r2]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <HAL_ADC_Stop+0x1e>
 800371e:	2302      	movs	r3, #2
 8003720:	e029      	b.n	8003776 <HAL_ADC_Stop+0x72>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2234      	movs	r2, #52	; 0x34
 8003726:	2101      	movs	r1, #1
 8003728:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800372a:	250f      	movs	r5, #15
 800372c:	197c      	adds	r4, r7, r5
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	0018      	movs	r0, r3
 8003732:	f000 fb9e 	bl	8003e72 <ADC_ConversionStop>
 8003736:	0003      	movs	r3, r0
 8003738:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800373a:	197b      	adds	r3, r7, r5
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d112      	bne.n	8003768 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003742:	197c      	adds	r4, r7, r5
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	0018      	movs	r0, r3
 8003748:	f000 fb22 	bl	8003d90 <ADC_Disable>
 800374c:	0003      	movs	r3, r0
 800374e:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003750:	197b      	adds	r3, r7, r5
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d107      	bne.n	8003768 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	4a08      	ldr	r2, [pc, #32]	; (8003780 <HAL_ADC_Stop+0x7c>)
 800375e:	4013      	ands	r3, r2
 8003760:	2201      	movs	r2, #1
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2234      	movs	r2, #52	; 0x34
 800376c:	2100      	movs	r1, #0
 800376e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003770:	230f      	movs	r3, #15
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	781b      	ldrb	r3, [r3, #0]
}
 8003776:	0018      	movs	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	b004      	add	sp, #16
 800377c:	bdb0      	pop	{r4, r5, r7, pc}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	fffffefe 	.word	0xfffffefe

08003784 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	2b08      	cmp	r3, #8
 8003794:	d102      	bne.n	800379c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003796:	2308      	movs	r3, #8
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	e014      	b.n	80037c6 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	2201      	movs	r2, #1
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d10b      	bne.n	80037c2 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ae:	2220      	movs	r2, #32
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2234      	movs	r2, #52	; 0x34
 80037ba:	2100      	movs	r1, #0
 80037bc:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e071      	b.n	80038a6 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80037c2:	230c      	movs	r3, #12
 80037c4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80037c6:	f7ff fddb 	bl	8003380 <HAL_GetTick>
 80037ca:	0003      	movs	r3, r0
 80037cc:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80037ce:	e01f      	b.n	8003810 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	3301      	adds	r3, #1
 80037d4:	d01c      	beq.n	8003810 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d007      	beq.n	80037ec <HAL_ADC_PollForConversion+0x68>
 80037dc:	f7ff fdd0 	bl	8003380 <HAL_GetTick>
 80037e0:	0002      	movs	r2, r0
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d211      	bcs.n	8003810 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4013      	ands	r3, r2
 80037f6:	d10b      	bne.n	8003810 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fc:	2204      	movs	r2, #4
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2234      	movs	r2, #52	; 0x34
 8003808:	2100      	movs	r1, #0
 800380a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e04a      	b.n	80038a6 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4013      	ands	r3, r2
 800381a:	d0d9      	beq.n	80037d0 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	2280      	movs	r2, #128	; 0x80
 8003822:	0092      	lsls	r2, r2, #2
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	23c0      	movs	r3, #192	; 0xc0
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	4013      	ands	r3, r2
 8003836:	d12d      	bne.n	8003894 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800383c:	2b00      	cmp	r3, #0
 800383e:	d129      	bne.n	8003894 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2208      	movs	r2, #8
 8003848:	4013      	ands	r3, r2
 800384a:	2b08      	cmp	r3, #8
 800384c:	d122      	bne.n	8003894 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2204      	movs	r2, #4
 8003856:	4013      	ands	r3, r2
 8003858:	d110      	bne.n	800387c <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	210c      	movs	r1, #12
 8003866:	438a      	bics	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386e:	4a10      	ldr	r2, [pc, #64]	; (80038b0 <HAL_ADC_PollForConversion+0x12c>)
 8003870:	4013      	ands	r3, r2
 8003872:	2201      	movs	r2, #1
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	639a      	str	r2, [r3, #56]	; 0x38
 800387a:	e00b      	b.n	8003894 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003880:	2220      	movs	r2, #32
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388c:	2201      	movs	r2, #1
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	7e1b      	ldrb	r3, [r3, #24]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d103      	bne.n	80038a4 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	220c      	movs	r2, #12
 80038a2:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	0018      	movs	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b004      	add	sp, #16
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	fffffefe 	.word	0xfffffefe

080038b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80038c2:	0018      	movs	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	b002      	add	sp, #8
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2204      	movs	r2, #4
 80038dc:	4013      	ands	r3, r2
 80038de:	2b04      	cmp	r3, #4
 80038e0:	d106      	bne.n	80038f0 <HAL_ADC_IRQHandler+0x24>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2204      	movs	r2, #4
 80038ea:	4013      	ands	r3, r2
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d00d      	beq.n	800390c <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2208      	movs	r2, #8
 80038f8:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d14f      	bne.n	800399e <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2208      	movs	r2, #8
 8003906:	4013      	ands	r3, r2
 8003908:	2b08      	cmp	r3, #8
 800390a:	d148      	bne.n	800399e <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003910:	2210      	movs	r2, #16
 8003912:	4013      	ands	r3, r2
 8003914:	d106      	bne.n	8003924 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391a:	2280      	movs	r2, #128	; 0x80
 800391c:	0092      	lsls	r2, r2, #2
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	23c0      	movs	r3, #192	; 0xc0
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	4013      	ands	r3, r2
 8003930:	d12d      	bne.n	800398e <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003936:	2b00      	cmp	r3, #0
 8003938:	d129      	bne.n	800398e <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2208      	movs	r2, #8
 8003942:	4013      	ands	r3, r2
 8003944:	2b08      	cmp	r3, #8
 8003946:	d122      	bne.n	800398e <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	2204      	movs	r2, #4
 8003950:	4013      	ands	r3, r2
 8003952:	d110      	bne.n	8003976 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	210c      	movs	r1, #12
 8003960:	438a      	bics	r2, r1
 8003962:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003968:	4a33      	ldr	r2, [pc, #204]	; (8003a38 <HAL_ADC_IRQHandler+0x16c>)
 800396a:	4013      	ands	r3, r2
 800396c:	2201      	movs	r2, #1
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	639a      	str	r2, [r3, #56]	; 0x38
 8003974:	e00b      	b.n	800398e <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397a:	2220      	movs	r2, #32
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003986:	2201      	movs	r2, #1
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	0018      	movs	r0, r3
 8003992:	f000 f853 	bl	8003a3c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	220c      	movs	r2, #12
 800399c:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2280      	movs	r2, #128	; 0x80
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b80      	cmp	r3, #128	; 0x80
 80039aa:	d115      	bne.n	80039d8 <HAL_ADC_IRQHandler+0x10c>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2280      	movs	r2, #128	; 0x80
 80039b4:	4013      	ands	r3, r2
 80039b6:	2b80      	cmp	r3, #128	; 0x80
 80039b8:	d10e      	bne.n	80039d8 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	2280      	movs	r2, #128	; 0x80
 80039c0:	0252      	lsls	r2, r2, #9
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	0018      	movs	r0, r3
 80039cc:	f000 f83e 	bl	8003a4c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2280      	movs	r2, #128	; 0x80
 80039d6:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2210      	movs	r2, #16
 80039e0:	4013      	ands	r3, r2
 80039e2:	2b10      	cmp	r3, #16
 80039e4:	d123      	bne.n	8003a2e <HAL_ADC_IRQHandler+0x162>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2210      	movs	r2, #16
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b10      	cmp	r3, #16
 80039f2:	d11c      	bne.n	8003a2e <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d006      	beq.n	8003a0a <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	2201      	movs	r2, #1
 8003a04:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d10d      	bne.n	8003a26 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0e:	2202      	movs	r2, #2
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2210      	movs	r2, #16
 8003a1c:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	0018      	movs	r0, r3
 8003a22:	f000 f81b 	bl	8003a5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2210      	movs	r2, #16
 8003a2c:	601a      	str	r2, [r3, #0]
  }

}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b002      	add	sp, #8
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	fffffefe 	.word	0xfffffefe

08003a3c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003a44:	46c0      	nop			; (mov r8, r8)
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b002      	add	sp, #8
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003a54:	46c0      	nop			; (mov r8, r8)
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b002      	add	sp, #8
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a64:	46c0      	nop			; (mov r8, r8)
 8003a66:	46bd      	mov	sp, r7
 8003a68:	b002      	add	sp, #8
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a76:	230f      	movs	r3, #15
 8003a78:	18fb      	adds	r3, r7, r3
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a86:	2380      	movs	r3, #128	; 0x80
 8003a88:	055b      	lsls	r3, r3, #21
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d011      	beq.n	8003ab2 <HAL_ADC_ConfigChannel+0x46>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d00d      	beq.n	8003ab2 <HAL_ADC_ConfigChannel+0x46>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d009      	beq.n	8003ab2 <HAL_ADC_ConfigChannel+0x46>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d005      	beq.n	8003ab2 <HAL_ADC_ConfigChannel+0x46>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d001      	beq.n	8003ab2 <HAL_ADC_ConfigChannel+0x46>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2234      	movs	r2, #52	; 0x34
 8003ab6:	5c9b      	ldrb	r3, [r3, r2]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x54>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e0d0      	b.n	8003c62 <HAL_ADC_ConfigChannel+0x1f6>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2234      	movs	r2, #52	; 0x34
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2204      	movs	r2, #4
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	d000      	beq.n	8003ad6 <HAL_ADC_ConfigChannel+0x6a>
 8003ad4:	e0b4      	b.n	8003c40 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	4a64      	ldr	r2, [pc, #400]	; (8003c6c <HAL_ADC_ConfigChannel+0x200>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d100      	bne.n	8003ae2 <HAL_ADC_ConfigChannel+0x76>
 8003ae0:	e082      	b.n	8003be8 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2201      	movs	r2, #1
 8003aee:	409a      	lsls	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afc:	2380      	movs	r3, #128	; 0x80
 8003afe:	055b      	lsls	r3, r3, #21
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d037      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x108>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d033      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x108>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d02f      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x108>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	d02b      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x108>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d027      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x108>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	2b05      	cmp	r3, #5
 8003b2a:	d023      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x108>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	2b06      	cmp	r3, #6
 8003b32:	d01f      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x108>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b38:	2b07      	cmp	r3, #7
 8003b3a:	d01b      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	2107      	movs	r1, #7
 8003b48:	400b      	ands	r3, r1
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d012      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695a      	ldr	r2, [r3, #20]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2107      	movs	r1, #7
 8003b5a:	438a      	bics	r2, r1
 8003b5c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6959      	ldr	r1, [r3, #20]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2207      	movs	r2, #7
 8003b6a:	401a      	ands	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b10      	cmp	r3, #16
 8003b7a:	d007      	beq.n	8003b8c <HAL_ADC_ConfigChannel+0x120>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b11      	cmp	r3, #17
 8003b82:	d003      	beq.n	8003b8c <HAL_ADC_ConfigChannel+0x120>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b12      	cmp	r3, #18
 8003b8a:	d163      	bne.n	8003c54 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003b8c:	4b38      	ldr	r3, [pc, #224]	; (8003c70 <HAL_ADC_ConfigChannel+0x204>)
 8003b8e:	6819      	ldr	r1, [r3, #0]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	d009      	beq.n	8003bac <HAL_ADC_ConfigChannel+0x140>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b11      	cmp	r3, #17
 8003b9e:	d102      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0x13a>
 8003ba0:	2380      	movs	r3, #128	; 0x80
 8003ba2:	03db      	lsls	r3, r3, #15
 8003ba4:	e004      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0x144>
 8003ba6:	2380      	movs	r3, #128	; 0x80
 8003ba8:	045b      	lsls	r3, r3, #17
 8003baa:	e001      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0x144>
 8003bac:	2380      	movs	r3, #128	; 0x80
 8003bae:	041b      	lsls	r3, r3, #16
 8003bb0:	4a2f      	ldr	r2, [pc, #188]	; (8003c70 <HAL_ADC_ConfigChannel+0x204>)
 8003bb2:	430b      	orrs	r3, r1
 8003bb4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b10      	cmp	r3, #16
 8003bbc:	d14a      	bne.n	8003c54 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003bbe:	4b2d      	ldr	r3, [pc, #180]	; (8003c74 <HAL_ADC_ConfigChannel+0x208>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	492d      	ldr	r1, [pc, #180]	; (8003c78 <HAL_ADC_ConfigChannel+0x20c>)
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	f7fc fab3 	bl	8000130 <__udivsi3>
 8003bca:	0003      	movs	r3, r0
 8003bcc:	001a      	movs	r2, r3
 8003bce:	0013      	movs	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	189b      	adds	r3, r3, r2
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003bd8:	e002      	b.n	8003be0 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f9      	bne.n	8003bda <HAL_ADC_ConfigChannel+0x16e>
 8003be6:	e035      	b.n	8003c54 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	4099      	lsls	r1, r3
 8003bf6:	000b      	movs	r3, r1
 8003bf8:	43d9      	mvns	r1, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	400a      	ands	r2, r1
 8003c00:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b10      	cmp	r3, #16
 8003c08:	d007      	beq.n	8003c1a <HAL_ADC_ConfigChannel+0x1ae>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b11      	cmp	r3, #17
 8003c10:	d003      	beq.n	8003c1a <HAL_ADC_ConfigChannel+0x1ae>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b12      	cmp	r3, #18
 8003c18:	d11c      	bne.n	8003c54 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003c1a:	4b15      	ldr	r3, [pc, #84]	; (8003c70 <HAL_ADC_ConfigChannel+0x204>)
 8003c1c:	6819      	ldr	r1, [r3, #0]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b10      	cmp	r3, #16
 8003c24:	d007      	beq.n	8003c36 <HAL_ADC_ConfigChannel+0x1ca>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b11      	cmp	r3, #17
 8003c2c:	d101      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x1c6>
 8003c2e:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <HAL_ADC_ConfigChannel+0x210>)
 8003c30:	e002      	b.n	8003c38 <HAL_ADC_ConfigChannel+0x1cc>
 8003c32:	4b13      	ldr	r3, [pc, #76]	; (8003c80 <HAL_ADC_ConfigChannel+0x214>)
 8003c34:	e000      	b.n	8003c38 <HAL_ADC_ConfigChannel+0x1cc>
 8003c36:	4b13      	ldr	r3, [pc, #76]	; (8003c84 <HAL_ADC_ConfigChannel+0x218>)
 8003c38:	4a0d      	ldr	r2, [pc, #52]	; (8003c70 <HAL_ADC_ConfigChannel+0x204>)
 8003c3a:	400b      	ands	r3, r1
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	e009      	b.n	8003c54 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c44:	2220      	movs	r2, #32
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003c4c:	230f      	movs	r3, #15
 8003c4e:	18fb      	adds	r3, r7, r3
 8003c50:	2201      	movs	r2, #1
 8003c52:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2234      	movs	r2, #52	; 0x34
 8003c58:	2100      	movs	r1, #0
 8003c5a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003c5c:	230f      	movs	r3, #15
 8003c5e:	18fb      	adds	r3, r7, r3
 8003c60:	781b      	ldrb	r3, [r3, #0]
}
 8003c62:	0018      	movs	r0, r3
 8003c64:	46bd      	mov	sp, r7
 8003c66:	b004      	add	sp, #16
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	00001001 	.word	0x00001001
 8003c70:	40012708 	.word	0x40012708
 8003c74:	20000004 	.word	0x20000004
 8003c78:	000f4240 	.word	0x000f4240
 8003c7c:	ffbfffff 	.word	0xffbfffff
 8003c80:	feffffff 	.word	0xfeffffff
 8003c84:	ff7fffff 	.word	0xff7fffff

08003c88 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2203      	movs	r2, #3
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d112      	bne.n	8003ccc <ADC_Enable+0x44>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2201      	movs	r2, #1
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d009      	beq.n	8003cc8 <ADC_Enable+0x40>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	2380      	movs	r3, #128	; 0x80
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	401a      	ands	r2, r3
 8003cc0:	2380      	movs	r3, #128	; 0x80
 8003cc2:	021b      	lsls	r3, r3, #8
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d101      	bne.n	8003ccc <ADC_Enable+0x44>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e000      	b.n	8003cce <ADC_Enable+0x46>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d152      	bne.n	8003d78 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	4a2a      	ldr	r2, [pc, #168]	; (8003d84 <ADC_Enable+0xfc>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	d00d      	beq.n	8003cfa <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce2:	2210      	movs	r2, #16
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cee:	2201      	movs	r2, #1
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e03f      	b.n	8003d7a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2101      	movs	r1, #1
 8003d06:	430a      	orrs	r2, r1
 8003d08:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d0a:	4b1f      	ldr	r3, [pc, #124]	; (8003d88 <ADC_Enable+0x100>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	491f      	ldr	r1, [pc, #124]	; (8003d8c <ADC_Enable+0x104>)
 8003d10:	0018      	movs	r0, r3
 8003d12:	f7fc fa0d 	bl	8000130 <__udivsi3>
 8003d16:	0003      	movs	r3, r0
 8003d18:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003d1a:	e002      	b.n	8003d22 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f9      	bne.n	8003d1c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d28:	f7ff fb2a 	bl	8003380 <HAL_GetTick>
 8003d2c:	0003      	movs	r3, r0
 8003d2e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003d30:	e01b      	b.n	8003d6a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d32:	f7ff fb25 	bl	8003380 <HAL_GetTick>
 8003d36:	0002      	movs	r2, r0
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d914      	bls.n	8003d6a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2201      	movs	r2, #1
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d00d      	beq.n	8003d6a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d52:	2210      	movs	r2, #16
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5e:	2201      	movs	r2, #1
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e007      	b.n	8003d7a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2201      	movs	r2, #1
 8003d72:	4013      	ands	r3, r2
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d1dc      	bne.n	8003d32 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b004      	add	sp, #16
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	80000017 	.word	0x80000017
 8003d88:	20000004 	.word	0x20000004
 8003d8c:	000f4240 	.word	0x000f4240

08003d90 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2203      	movs	r2, #3
 8003da4:	4013      	ands	r3, r2
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d112      	bne.n	8003dd0 <ADC_Disable+0x40>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2201      	movs	r2, #1
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d009      	beq.n	8003dcc <ADC_Disable+0x3c>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	021b      	lsls	r3, r3, #8
 8003dc2:	401a      	ands	r2, r3
 8003dc4:	2380      	movs	r3, #128	; 0x80
 8003dc6:	021b      	lsls	r3, r3, #8
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d101      	bne.n	8003dd0 <ADC_Disable+0x40>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e000      	b.n	8003dd2 <ADC_Disable+0x42>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d048      	beq.n	8003e68 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2205      	movs	r2, #5
 8003dde:	4013      	ands	r3, r2
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d110      	bne.n	8003e06 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2102      	movs	r1, #2
 8003df0:	430a      	orrs	r2, r1
 8003df2:	609a      	str	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2203      	movs	r2, #3
 8003dfa:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003dfc:	f7ff fac0 	bl	8003380 <HAL_GetTick>
 8003e00:	0003      	movs	r3, r0
 8003e02:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003e04:	e029      	b.n	8003e5a <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	2210      	movs	r2, #16
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e16:	2201      	movs	r2, #1
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e023      	b.n	8003e6a <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e22:	f7ff faad 	bl	8003380 <HAL_GetTick>
 8003e26:	0002      	movs	r2, r0
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d914      	bls.n	8003e5a <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	2201      	movs	r2, #1
 8003e38:	4013      	ands	r3, r2
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d10d      	bne.n	8003e5a <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	2210      	movs	r2, #16
 8003e44:	431a      	orrs	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4e:	2201      	movs	r2, #1
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e007      	b.n	8003e6a <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2201      	movs	r2, #1
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d0dc      	beq.n	8003e22 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b004      	add	sp, #16
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b084      	sub	sp, #16
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	2204      	movs	r2, #4
 8003e86:	4013      	ands	r3, r2
 8003e88:	d03a      	beq.n	8003f00 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2204      	movs	r2, #4
 8003e92:	4013      	ands	r3, r2
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d10d      	bne.n	8003eb4 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003ea2:	d107      	bne.n	8003eb4 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2110      	movs	r1, #16
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003eb4:	f7ff fa64 	bl	8003380 <HAL_GetTick>
 8003eb8:	0003      	movs	r3, r0
 8003eba:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003ebc:	e01a      	b.n	8003ef4 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003ebe:	f7ff fa5f 	bl	8003380 <HAL_GetTick>
 8003ec2:	0002      	movs	r2, r0
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d913      	bls.n	8003ef4 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2204      	movs	r2, #4
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d00d      	beq.n	8003ef4 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003edc:	2210      	movs	r2, #16
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee8:	2201      	movs	r2, #1
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e006      	b.n	8003f02 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2204      	movs	r2, #4
 8003efc:	4013      	ands	r3, r2
 8003efe:	d1de      	bne.n	8003ebe <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	0018      	movs	r0, r3
 8003f04:	46bd      	mov	sp, r7
 8003f06:	b004      	add	sp, #16
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	0002      	movs	r2, r0
 8003f14:	1dfb      	adds	r3, r7, #7
 8003f16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f18:	1dfb      	adds	r3, r7, #7
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b7f      	cmp	r3, #127	; 0x7f
 8003f1e:	d809      	bhi.n	8003f34 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f20:	1dfb      	adds	r3, r7, #7
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	001a      	movs	r2, r3
 8003f26:	231f      	movs	r3, #31
 8003f28:	401a      	ands	r2, r3
 8003f2a:	4b04      	ldr	r3, [pc, #16]	; (8003f3c <__NVIC_EnableIRQ+0x30>)
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	4091      	lsls	r1, r2
 8003f30:	000a      	movs	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]
  }
}
 8003f34:	46c0      	nop			; (mov r8, r8)
 8003f36:	46bd      	mov	sp, r7
 8003f38:	b002      	add	sp, #8
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	e000e100 	.word	0xe000e100

08003f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f40:	b590      	push	{r4, r7, lr}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	0002      	movs	r2, r0
 8003f48:	6039      	str	r1, [r7, #0]
 8003f4a:	1dfb      	adds	r3, r7, #7
 8003f4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f4e:	1dfb      	adds	r3, r7, #7
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b7f      	cmp	r3, #127	; 0x7f
 8003f54:	d828      	bhi.n	8003fa8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f56:	4a2f      	ldr	r2, [pc, #188]	; (8004014 <__NVIC_SetPriority+0xd4>)
 8003f58:	1dfb      	adds	r3, r7, #7
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	b25b      	sxtb	r3, r3
 8003f5e:	089b      	lsrs	r3, r3, #2
 8003f60:	33c0      	adds	r3, #192	; 0xc0
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	589b      	ldr	r3, [r3, r2]
 8003f66:	1dfa      	adds	r2, r7, #7
 8003f68:	7812      	ldrb	r2, [r2, #0]
 8003f6a:	0011      	movs	r1, r2
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	400a      	ands	r2, r1
 8003f70:	00d2      	lsls	r2, r2, #3
 8003f72:	21ff      	movs	r1, #255	; 0xff
 8003f74:	4091      	lsls	r1, r2
 8003f76:	000a      	movs	r2, r1
 8003f78:	43d2      	mvns	r2, r2
 8003f7a:	401a      	ands	r2, r3
 8003f7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	019b      	lsls	r3, r3, #6
 8003f82:	22ff      	movs	r2, #255	; 0xff
 8003f84:	401a      	ands	r2, r3
 8003f86:	1dfb      	adds	r3, r7, #7
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	4003      	ands	r3, r0
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f94:	481f      	ldr	r0, [pc, #124]	; (8004014 <__NVIC_SetPriority+0xd4>)
 8003f96:	1dfb      	adds	r3, r7, #7
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	b25b      	sxtb	r3, r3
 8003f9c:	089b      	lsrs	r3, r3, #2
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	33c0      	adds	r3, #192	; 0xc0
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003fa6:	e031      	b.n	800400c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fa8:	4a1b      	ldr	r2, [pc, #108]	; (8004018 <__NVIC_SetPriority+0xd8>)
 8003faa:	1dfb      	adds	r3, r7, #7
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	0019      	movs	r1, r3
 8003fb0:	230f      	movs	r3, #15
 8003fb2:	400b      	ands	r3, r1
 8003fb4:	3b08      	subs	r3, #8
 8003fb6:	089b      	lsrs	r3, r3, #2
 8003fb8:	3306      	adds	r3, #6
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	18d3      	adds	r3, r2, r3
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	1dfa      	adds	r2, r7, #7
 8003fc4:	7812      	ldrb	r2, [r2, #0]
 8003fc6:	0011      	movs	r1, r2
 8003fc8:	2203      	movs	r2, #3
 8003fca:	400a      	ands	r2, r1
 8003fcc:	00d2      	lsls	r2, r2, #3
 8003fce:	21ff      	movs	r1, #255	; 0xff
 8003fd0:	4091      	lsls	r1, r2
 8003fd2:	000a      	movs	r2, r1
 8003fd4:	43d2      	mvns	r2, r2
 8003fd6:	401a      	ands	r2, r3
 8003fd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	019b      	lsls	r3, r3, #6
 8003fde:	22ff      	movs	r2, #255	; 0xff
 8003fe0:	401a      	ands	r2, r3
 8003fe2:	1dfb      	adds	r3, r7, #7
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	2303      	movs	r3, #3
 8003fea:	4003      	ands	r3, r0
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ff0:	4809      	ldr	r0, [pc, #36]	; (8004018 <__NVIC_SetPriority+0xd8>)
 8003ff2:	1dfb      	adds	r3, r7, #7
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	001c      	movs	r4, r3
 8003ff8:	230f      	movs	r3, #15
 8003ffa:	4023      	ands	r3, r4
 8003ffc:	3b08      	subs	r3, #8
 8003ffe:	089b      	lsrs	r3, r3, #2
 8004000:	430a      	orrs	r2, r1
 8004002:	3306      	adds	r3, #6
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	18c3      	adds	r3, r0, r3
 8004008:	3304      	adds	r3, #4
 800400a:	601a      	str	r2, [r3, #0]
}
 800400c:	46c0      	nop			; (mov r8, r8)
 800400e:	46bd      	mov	sp, r7
 8004010:	b003      	add	sp, #12
 8004012:	bd90      	pop	{r4, r7, pc}
 8004014:	e000e100 	.word	0xe000e100
 8004018:	e000ed00 	.word	0xe000ed00

0800401c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	1e5a      	subs	r2, r3, #1
 8004028:	2380      	movs	r3, #128	; 0x80
 800402a:	045b      	lsls	r3, r3, #17
 800402c:	429a      	cmp	r2, r3
 800402e:	d301      	bcc.n	8004034 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004030:	2301      	movs	r3, #1
 8004032:	e010      	b.n	8004056 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004034:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <SysTick_Config+0x44>)
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	3a01      	subs	r2, #1
 800403a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800403c:	2301      	movs	r3, #1
 800403e:	425b      	negs	r3, r3
 8004040:	2103      	movs	r1, #3
 8004042:	0018      	movs	r0, r3
 8004044:	f7ff ff7c 	bl	8003f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004048:	4b05      	ldr	r3, [pc, #20]	; (8004060 <SysTick_Config+0x44>)
 800404a:	2200      	movs	r2, #0
 800404c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800404e:	4b04      	ldr	r3, [pc, #16]	; (8004060 <SysTick_Config+0x44>)
 8004050:	2207      	movs	r2, #7
 8004052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004054:	2300      	movs	r3, #0
}
 8004056:	0018      	movs	r0, r3
 8004058:	46bd      	mov	sp, r7
 800405a:	b002      	add	sp, #8
 800405c:	bd80      	pop	{r7, pc}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	e000e010 	.word	0xe000e010

08004064 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	210f      	movs	r1, #15
 8004070:	187b      	adds	r3, r7, r1
 8004072:	1c02      	adds	r2, r0, #0
 8004074:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	187b      	adds	r3, r7, r1
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	b25b      	sxtb	r3, r3
 800407e:	0011      	movs	r1, r2
 8004080:	0018      	movs	r0, r3
 8004082:	f7ff ff5d 	bl	8003f40 <__NVIC_SetPriority>
}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	46bd      	mov	sp, r7
 800408a:	b004      	add	sp, #16
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	0002      	movs	r2, r0
 8004096:	1dfb      	adds	r3, r7, #7
 8004098:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800409a:	1dfb      	adds	r3, r7, #7
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	b25b      	sxtb	r3, r3
 80040a0:	0018      	movs	r0, r3
 80040a2:	f7ff ff33 	bl	8003f0c <__NVIC_EnableIRQ>
}
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	46bd      	mov	sp, r7
 80040aa:	b002      	add	sp, #8
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	0018      	movs	r0, r3
 80040ba:	f7ff ffaf 	bl	800401c <SysTick_Config>
 80040be:	0003      	movs	r3, r0
}
 80040c0:	0018      	movs	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b002      	add	sp, #8
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e036      	b.n	800414c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2221      	movs	r2, #33	; 0x21
 80040e2:	2102      	movs	r1, #2
 80040e4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4a18      	ldr	r2, [pc, #96]	; (8004154 <HAL_DMA_Init+0x8c>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80040fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800410a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004116:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4313      	orrs	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	0018      	movs	r0, r3
 8004130:	f000 f932 	bl	8004398 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2221      	movs	r2, #33	; 0x21
 800413e:	2101      	movs	r1, #1
 8004140:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	2100      	movs	r1, #0
 8004148:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}  
 800414c:	0018      	movs	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	b004      	add	sp, #16
 8004152:	bd80      	pop	{r7, pc}
 8004154:	ffffc00f 	.word	0xffffc00f

08004158 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2221      	movs	r2, #33	; 0x21
 8004164:	5c9b      	ldrb	r3, [r3, r2]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d008      	beq.n	800417e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2204      	movs	r2, #4
 8004170:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2220      	movs	r2, #32
 8004176:	2100      	movs	r1, #0
 8004178:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e020      	b.n	80041c0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	210e      	movs	r1, #14
 800418a:	438a      	bics	r2, r1
 800418c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2101      	movs	r1, #1
 800419a:	438a      	bics	r2, r1
 800419c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a6:	2101      	movs	r1, #1
 80041a8:	4091      	lsls	r1, r2
 80041aa:	000a      	movs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2221      	movs	r2, #33	; 0x21
 80041b2:	2101      	movs	r1, #1
 80041b4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	2100      	movs	r1, #0
 80041bc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	0018      	movs	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	b002      	add	sp, #8
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041d0:	210f      	movs	r1, #15
 80041d2:	187b      	adds	r3, r7, r1
 80041d4:	2200      	movs	r2, #0
 80041d6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2221      	movs	r2, #33	; 0x21
 80041dc:	5c9b      	ldrb	r3, [r3, r2]
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d006      	beq.n	80041f2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2204      	movs	r2, #4
 80041e8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80041ea:	187b      	adds	r3, r7, r1
 80041ec:	2201      	movs	r2, #1
 80041ee:	701a      	strb	r2, [r3, #0]
 80041f0:	e028      	b.n	8004244 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	210e      	movs	r1, #14
 80041fe:	438a      	bics	r2, r1
 8004200:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2101      	movs	r1, #1
 800420e:	438a      	bics	r2, r1
 8004210:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421a:	2101      	movs	r1, #1
 800421c:	4091      	lsls	r1, r2
 800421e:	000a      	movs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2221      	movs	r2, #33	; 0x21
 8004226:	2101      	movs	r1, #1
 8004228:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2220      	movs	r2, #32
 800422e:	2100      	movs	r1, #0
 8004230:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004236:	2b00      	cmp	r3, #0
 8004238:	d004      	beq.n	8004244 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	0010      	movs	r0, r2
 8004242:	4798      	blx	r3
    } 
  }
  return status;
 8004244:	230f      	movs	r3, #15
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	781b      	ldrb	r3, [r3, #0]
}
 800424a:	0018      	movs	r0, r3
 800424c:	46bd      	mov	sp, r7
 800424e:	b004      	add	sp, #16
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	2204      	movs	r2, #4
 8004270:	409a      	lsls	r2, r3
 8004272:	0013      	movs	r3, r2
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4013      	ands	r3, r2
 8004278:	d024      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x72>
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2204      	movs	r2, #4
 800427e:	4013      	ands	r3, r2
 8004280:	d020      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2220      	movs	r2, #32
 800428a:	4013      	ands	r3, r2
 800428c:	d107      	bne.n	800429e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2104      	movs	r1, #4
 800429a:	438a      	bics	r2, r1
 800429c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a6:	2104      	movs	r1, #4
 80042a8:	4091      	lsls	r1, r2
 80042aa:	000a      	movs	r2, r1
 80042ac:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d100      	bne.n	80042b8 <HAL_DMA_IRQHandler+0x66>
 80042b6:	e06a      	b.n	800438e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	0010      	movs	r0, r2
 80042c0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80042c2:	e064      	b.n	800438e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	2202      	movs	r2, #2
 80042ca:	409a      	lsls	r2, r3
 80042cc:	0013      	movs	r3, r2
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4013      	ands	r3, r2
 80042d2:	d02b      	beq.n	800432c <HAL_DMA_IRQHandler+0xda>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2202      	movs	r2, #2
 80042d8:	4013      	ands	r3, r2
 80042da:	d027      	beq.n	800432c <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2220      	movs	r2, #32
 80042e4:	4013      	ands	r3, r2
 80042e6:	d10b      	bne.n	8004300 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	210a      	movs	r1, #10
 80042f4:	438a      	bics	r2, r1
 80042f6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2221      	movs	r2, #33	; 0x21
 80042fc:	2101      	movs	r1, #1
 80042fe:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004308:	2102      	movs	r1, #2
 800430a:	4091      	lsls	r1, r2
 800430c:	000a      	movs	r2, r1
 800430e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	2100      	movs	r1, #0
 8004316:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431c:	2b00      	cmp	r3, #0
 800431e:	d036      	beq.n	800438e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	0010      	movs	r0, r2
 8004328:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800432a:	e030      	b.n	800438e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004330:	2208      	movs	r2, #8
 8004332:	409a      	lsls	r2, r3
 8004334:	0013      	movs	r3, r2
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4013      	ands	r3, r2
 800433a:	d028      	beq.n	800438e <HAL_DMA_IRQHandler+0x13c>
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2208      	movs	r2, #8
 8004340:	4013      	ands	r3, r2
 8004342:	d024      	beq.n	800438e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	210e      	movs	r1, #14
 8004350:	438a      	bics	r2, r1
 8004352:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435c:	2101      	movs	r1, #1
 800435e:	4091      	lsls	r1, r2
 8004360:	000a      	movs	r2, r1
 8004362:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2221      	movs	r2, #33	; 0x21
 800436e:	2101      	movs	r1, #1
 8004370:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2220      	movs	r2, #32
 8004376:	2100      	movs	r1, #0
 8004378:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437e:	2b00      	cmp	r3, #0
 8004380:	d005      	beq.n	800438e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	0010      	movs	r0, r2
 800438a:	4798      	blx	r3
    }
   }
}  
 800438c:	e7ff      	b.n	800438e <HAL_DMA_IRQHandler+0x13c>
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	46bd      	mov	sp, r7
 8004392:	b004      	add	sp, #16
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a08      	ldr	r2, [pc, #32]	; (80043c8 <DMA_CalcBaseAndBitshift+0x30>)
 80043a6:	4694      	mov	ip, r2
 80043a8:	4463      	add	r3, ip
 80043aa:	2114      	movs	r1, #20
 80043ac:	0018      	movs	r0, r3
 80043ae:	f7fb febf 	bl	8000130 <__udivsi3>
 80043b2:	0003      	movs	r3, r0
 80043b4:	009a      	lsls	r2, r3, #2
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a03      	ldr	r2, [pc, #12]	; (80043cc <DMA_CalcBaseAndBitshift+0x34>)
 80043be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80043c0:	46c0      	nop			; (mov r8, r8)
 80043c2:	46bd      	mov	sp, r7
 80043c4:	b002      	add	sp, #8
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	bffdfff8 	.word	0xbffdfff8
 80043cc:	40020000 	.word	0x40020000

080043d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043de:	e14f      	b.n	8004680 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2101      	movs	r1, #1
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4091      	lsls	r1, r2
 80043ea:	000a      	movs	r2, r1
 80043ec:	4013      	ands	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d100      	bne.n	80043f8 <HAL_GPIO_Init+0x28>
 80043f6:	e140      	b.n	800467a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2203      	movs	r2, #3
 80043fe:	4013      	ands	r3, r2
 8004400:	2b01      	cmp	r3, #1
 8004402:	d005      	beq.n	8004410 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2203      	movs	r2, #3
 800440a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800440c:	2b02      	cmp	r3, #2
 800440e:	d130      	bne.n	8004472 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	2203      	movs	r2, #3
 800441c:	409a      	lsls	r2, r3
 800441e:	0013      	movs	r3, r2
 8004420:	43da      	mvns	r2, r3
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	4013      	ands	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	409a      	lsls	r2, r3
 8004432:	0013      	movs	r3, r2
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004446:	2201      	movs	r2, #1
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	409a      	lsls	r2, r3
 800444c:	0013      	movs	r3, r2
 800444e:	43da      	mvns	r2, r3
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	4013      	ands	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	2201      	movs	r2, #1
 800445e:	401a      	ands	r2, r3
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	409a      	lsls	r2, r3
 8004464:	0013      	movs	r3, r2
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2203      	movs	r2, #3
 8004478:	4013      	ands	r3, r2
 800447a:	2b03      	cmp	r3, #3
 800447c:	d017      	beq.n	80044ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	2203      	movs	r2, #3
 800448a:	409a      	lsls	r2, r3
 800448c:	0013      	movs	r3, r2
 800448e:	43da      	mvns	r2, r3
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	4013      	ands	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	409a      	lsls	r2, r3
 80044a0:	0013      	movs	r3, r2
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2203      	movs	r2, #3
 80044b4:	4013      	ands	r3, r2
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d123      	bne.n	8004502 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	08da      	lsrs	r2, r3, #3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3208      	adds	r2, #8
 80044c2:	0092      	lsls	r2, r2, #2
 80044c4:	58d3      	ldr	r3, [r2, r3]
 80044c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	2207      	movs	r2, #7
 80044cc:	4013      	ands	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	220f      	movs	r2, #15
 80044d2:	409a      	lsls	r2, r3
 80044d4:	0013      	movs	r3, r2
 80044d6:	43da      	mvns	r2, r3
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4013      	ands	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2107      	movs	r1, #7
 80044e6:	400b      	ands	r3, r1
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	409a      	lsls	r2, r3
 80044ec:	0013      	movs	r3, r2
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	08da      	lsrs	r2, r3, #3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3208      	adds	r2, #8
 80044fc:	0092      	lsls	r2, r2, #2
 80044fe:	6939      	ldr	r1, [r7, #16]
 8004500:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	2203      	movs	r2, #3
 800450e:	409a      	lsls	r2, r3
 8004510:	0013      	movs	r3, r2
 8004512:	43da      	mvns	r2, r3
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	4013      	ands	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2203      	movs	r2, #3
 8004520:	401a      	ands	r2, r3
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	409a      	lsls	r2, r3
 8004528:	0013      	movs	r3, r2
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	23c0      	movs	r3, #192	; 0xc0
 800453c:	029b      	lsls	r3, r3, #10
 800453e:	4013      	ands	r3, r2
 8004540:	d100      	bne.n	8004544 <HAL_GPIO_Init+0x174>
 8004542:	e09a      	b.n	800467a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004544:	4b54      	ldr	r3, [pc, #336]	; (8004698 <HAL_GPIO_Init+0x2c8>)
 8004546:	699a      	ldr	r2, [r3, #24]
 8004548:	4b53      	ldr	r3, [pc, #332]	; (8004698 <HAL_GPIO_Init+0x2c8>)
 800454a:	2101      	movs	r1, #1
 800454c:	430a      	orrs	r2, r1
 800454e:	619a      	str	r2, [r3, #24]
 8004550:	4b51      	ldr	r3, [pc, #324]	; (8004698 <HAL_GPIO_Init+0x2c8>)
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	2201      	movs	r2, #1
 8004556:	4013      	ands	r3, r2
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800455c:	4a4f      	ldr	r2, [pc, #316]	; (800469c <HAL_GPIO_Init+0x2cc>)
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	089b      	lsrs	r3, r3, #2
 8004562:	3302      	adds	r3, #2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	589b      	ldr	r3, [r3, r2]
 8004568:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2203      	movs	r2, #3
 800456e:	4013      	ands	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	220f      	movs	r2, #15
 8004574:	409a      	lsls	r2, r3
 8004576:	0013      	movs	r3, r2
 8004578:	43da      	mvns	r2, r3
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4013      	ands	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	2390      	movs	r3, #144	; 0x90
 8004584:	05db      	lsls	r3, r3, #23
 8004586:	429a      	cmp	r2, r3
 8004588:	d013      	beq.n	80045b2 <HAL_GPIO_Init+0x1e2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a44      	ldr	r2, [pc, #272]	; (80046a0 <HAL_GPIO_Init+0x2d0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d00d      	beq.n	80045ae <HAL_GPIO_Init+0x1de>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a43      	ldr	r2, [pc, #268]	; (80046a4 <HAL_GPIO_Init+0x2d4>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d007      	beq.n	80045aa <HAL_GPIO_Init+0x1da>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a42      	ldr	r2, [pc, #264]	; (80046a8 <HAL_GPIO_Init+0x2d8>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d101      	bne.n	80045a6 <HAL_GPIO_Init+0x1d6>
 80045a2:	2303      	movs	r3, #3
 80045a4:	e006      	b.n	80045b4 <HAL_GPIO_Init+0x1e4>
 80045a6:	2305      	movs	r3, #5
 80045a8:	e004      	b.n	80045b4 <HAL_GPIO_Init+0x1e4>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e002      	b.n	80045b4 <HAL_GPIO_Init+0x1e4>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <HAL_GPIO_Init+0x1e4>
 80045b2:	2300      	movs	r3, #0
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	2103      	movs	r1, #3
 80045b8:	400a      	ands	r2, r1
 80045ba:	0092      	lsls	r2, r2, #2
 80045bc:	4093      	lsls	r3, r2
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045c4:	4935      	ldr	r1, [pc, #212]	; (800469c <HAL_GPIO_Init+0x2cc>)
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	089b      	lsrs	r3, r3, #2
 80045ca:	3302      	adds	r3, #2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045d2:	4b36      	ldr	r3, [pc, #216]	; (80046ac <HAL_GPIO_Init+0x2dc>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	43da      	mvns	r2, r3
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4013      	ands	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	2380      	movs	r3, #128	; 0x80
 80045e8:	025b      	lsls	r3, r3, #9
 80045ea:	4013      	ands	r3, r2
 80045ec:	d003      	beq.n	80045f6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80045f6:	4b2d      	ldr	r3, [pc, #180]	; (80046ac <HAL_GPIO_Init+0x2dc>)
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80045fc:	4b2b      	ldr	r3, [pc, #172]	; (80046ac <HAL_GPIO_Init+0x2dc>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	43da      	mvns	r2, r3
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	4013      	ands	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	2380      	movs	r3, #128	; 0x80
 8004612:	029b      	lsls	r3, r3, #10
 8004614:	4013      	ands	r3, r2
 8004616:	d003      	beq.n	8004620 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004620:	4b22      	ldr	r3, [pc, #136]	; (80046ac <HAL_GPIO_Init+0x2dc>)
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004626:	4b21      	ldr	r3, [pc, #132]	; (80046ac <HAL_GPIO_Init+0x2dc>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	43da      	mvns	r2, r3
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4013      	ands	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	2380      	movs	r3, #128	; 0x80
 800463c:	035b      	lsls	r3, r3, #13
 800463e:	4013      	ands	r3, r2
 8004640:	d003      	beq.n	800464a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800464a:	4b18      	ldr	r3, [pc, #96]	; (80046ac <HAL_GPIO_Init+0x2dc>)
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004650:	4b16      	ldr	r3, [pc, #88]	; (80046ac <HAL_GPIO_Init+0x2dc>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	43da      	mvns	r2, r3
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	4013      	ands	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	2380      	movs	r3, #128	; 0x80
 8004666:	039b      	lsls	r3, r3, #14
 8004668:	4013      	ands	r3, r2
 800466a:	d003      	beq.n	8004674 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4313      	orrs	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004674:	4b0d      	ldr	r3, [pc, #52]	; (80046ac <HAL_GPIO_Init+0x2dc>)
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	3301      	adds	r3, #1
 800467e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	40da      	lsrs	r2, r3
 8004688:	1e13      	subs	r3, r2, #0
 800468a:	d000      	beq.n	800468e <HAL_GPIO_Init+0x2be>
 800468c:	e6a8      	b.n	80043e0 <HAL_GPIO_Init+0x10>
  } 
}
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	46c0      	nop			; (mov r8, r8)
 8004692:	46bd      	mov	sp, r7
 8004694:	b006      	add	sp, #24
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40021000 	.word	0x40021000
 800469c:	40010000 	.word	0x40010000
 80046a0:	48000400 	.word	0x48000400
 80046a4:	48000800 	.word	0x48000800
 80046a8:	48000c00 	.word	0x48000c00
 80046ac:	40010400 	.word	0x40010400

080046b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	000a      	movs	r2, r1
 80046ba:	1cbb      	adds	r3, r7, #2
 80046bc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	1cba      	adds	r2, r7, #2
 80046c4:	8812      	ldrh	r2, [r2, #0]
 80046c6:	4013      	ands	r3, r2
 80046c8:	d004      	beq.n	80046d4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80046ca:	230f      	movs	r3, #15
 80046cc:	18fb      	adds	r3, r7, r3
 80046ce:	2201      	movs	r2, #1
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	e003      	b.n	80046dc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046d4:	230f      	movs	r3, #15
 80046d6:	18fb      	adds	r3, r7, r3
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80046dc:	230f      	movs	r3, #15
 80046de:	18fb      	adds	r3, r7, r3
 80046e0:	781b      	ldrb	r3, [r3, #0]
  }
 80046e2:	0018      	movs	r0, r3
 80046e4:	46bd      	mov	sp, r7
 80046e6:	b004      	add	sp, #16
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	0008      	movs	r0, r1
 80046f4:	0011      	movs	r1, r2
 80046f6:	1cbb      	adds	r3, r7, #2
 80046f8:	1c02      	adds	r2, r0, #0
 80046fa:	801a      	strh	r2, [r3, #0]
 80046fc:	1c7b      	adds	r3, r7, #1
 80046fe:	1c0a      	adds	r2, r1, #0
 8004700:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004702:	1c7b      	adds	r3, r7, #1
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d004      	beq.n	8004714 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800470a:	1cbb      	adds	r3, r7, #2
 800470c:	881a      	ldrh	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004712:	e003      	b.n	800471c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004714:	1cbb      	adds	r3, r7, #2
 8004716:	881a      	ldrh	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800471c:	46c0      	nop			; (mov r8, r8)
 800471e:	46bd      	mov	sp, r7
 8004720:	b002      	add	sp, #8
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	0002      	movs	r2, r0
 800472c:	1dbb      	adds	r3, r7, #6
 800472e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004730:	4b09      	ldr	r3, [pc, #36]	; (8004758 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	1dba      	adds	r2, r7, #6
 8004736:	8812      	ldrh	r2, [r2, #0]
 8004738:	4013      	ands	r3, r2
 800473a:	d008      	beq.n	800474e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800473c:	4b06      	ldr	r3, [pc, #24]	; (8004758 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800473e:	1dba      	adds	r2, r7, #6
 8004740:	8812      	ldrh	r2, [r2, #0]
 8004742:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004744:	1dbb      	adds	r3, r7, #6
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	0018      	movs	r0, r3
 800474a:	f000 f807 	bl	800475c <HAL_GPIO_EXTI_Callback>
  }
}
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	46bd      	mov	sp, r7
 8004752:	b002      	add	sp, #8
 8004754:	bd80      	pop	{r7, pc}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	40010400 	.word	0x40010400

0800475c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	0002      	movs	r2, r0
 8004764:	1dbb      	adds	r3, r7, #6
 8004766:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8004768:	46c0      	nop			; (mov r8, r8)
 800476a:	46bd      	mov	sp, r7
 800476c:	b002      	add	sp, #8
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e301      	b.n	8004d86 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2201      	movs	r2, #1
 8004788:	4013      	ands	r3, r2
 800478a:	d100      	bne.n	800478e <HAL_RCC_OscConfig+0x1e>
 800478c:	e08d      	b.n	80048aa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800478e:	4bc3      	ldr	r3, [pc, #780]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	220c      	movs	r2, #12
 8004794:	4013      	ands	r3, r2
 8004796:	2b04      	cmp	r3, #4
 8004798:	d00e      	beq.n	80047b8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800479a:	4bc0      	ldr	r3, [pc, #768]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	220c      	movs	r2, #12
 80047a0:	4013      	ands	r3, r2
 80047a2:	2b08      	cmp	r3, #8
 80047a4:	d116      	bne.n	80047d4 <HAL_RCC_OscConfig+0x64>
 80047a6:	4bbd      	ldr	r3, [pc, #756]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	2380      	movs	r3, #128	; 0x80
 80047ac:	025b      	lsls	r3, r3, #9
 80047ae:	401a      	ands	r2, r3
 80047b0:	2380      	movs	r3, #128	; 0x80
 80047b2:	025b      	lsls	r3, r3, #9
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d10d      	bne.n	80047d4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047b8:	4bb8      	ldr	r3, [pc, #736]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	2380      	movs	r3, #128	; 0x80
 80047be:	029b      	lsls	r3, r3, #10
 80047c0:	4013      	ands	r3, r2
 80047c2:	d100      	bne.n	80047c6 <HAL_RCC_OscConfig+0x56>
 80047c4:	e070      	b.n	80048a8 <HAL_RCC_OscConfig+0x138>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d000      	beq.n	80047d0 <HAL_RCC_OscConfig+0x60>
 80047ce:	e06b      	b.n	80048a8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e2d8      	b.n	8004d86 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d107      	bne.n	80047ec <HAL_RCC_OscConfig+0x7c>
 80047dc:	4baf      	ldr	r3, [pc, #700]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	4bae      	ldr	r3, [pc, #696]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 80047e2:	2180      	movs	r1, #128	; 0x80
 80047e4:	0249      	lsls	r1, r1, #9
 80047e6:	430a      	orrs	r2, r1
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	e02f      	b.n	800484c <HAL_RCC_OscConfig+0xdc>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10c      	bne.n	800480e <HAL_RCC_OscConfig+0x9e>
 80047f4:	4ba9      	ldr	r3, [pc, #676]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	4ba8      	ldr	r3, [pc, #672]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 80047fa:	49a9      	ldr	r1, [pc, #676]	; (8004aa0 <HAL_RCC_OscConfig+0x330>)
 80047fc:	400a      	ands	r2, r1
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	4ba6      	ldr	r3, [pc, #664]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	4ba5      	ldr	r3, [pc, #660]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 8004806:	49a7      	ldr	r1, [pc, #668]	; (8004aa4 <HAL_RCC_OscConfig+0x334>)
 8004808:	400a      	ands	r2, r1
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	e01e      	b.n	800484c <HAL_RCC_OscConfig+0xdc>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b05      	cmp	r3, #5
 8004814:	d10e      	bne.n	8004834 <HAL_RCC_OscConfig+0xc4>
 8004816:	4ba1      	ldr	r3, [pc, #644]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	4ba0      	ldr	r3, [pc, #640]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 800481c:	2180      	movs	r1, #128	; 0x80
 800481e:	02c9      	lsls	r1, r1, #11
 8004820:	430a      	orrs	r2, r1
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	4b9d      	ldr	r3, [pc, #628]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	4b9c      	ldr	r3, [pc, #624]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 800482a:	2180      	movs	r1, #128	; 0x80
 800482c:	0249      	lsls	r1, r1, #9
 800482e:	430a      	orrs	r2, r1
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	e00b      	b.n	800484c <HAL_RCC_OscConfig+0xdc>
 8004834:	4b99      	ldr	r3, [pc, #612]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	4b98      	ldr	r3, [pc, #608]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 800483a:	4999      	ldr	r1, [pc, #612]	; (8004aa0 <HAL_RCC_OscConfig+0x330>)
 800483c:	400a      	ands	r2, r1
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	4b96      	ldr	r3, [pc, #600]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	4b95      	ldr	r3, [pc, #596]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 8004846:	4997      	ldr	r1, [pc, #604]	; (8004aa4 <HAL_RCC_OscConfig+0x334>)
 8004848:	400a      	ands	r2, r1
 800484a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d014      	beq.n	800487e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004854:	f7fe fd94 	bl	8003380 <HAL_GetTick>
 8004858:	0003      	movs	r3, r0
 800485a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800485e:	f7fe fd8f 	bl	8003380 <HAL_GetTick>
 8004862:	0002      	movs	r2, r0
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b64      	cmp	r3, #100	; 0x64
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e28a      	b.n	8004d86 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004870:	4b8a      	ldr	r3, [pc, #552]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	029b      	lsls	r3, r3, #10
 8004878:	4013      	ands	r3, r2
 800487a:	d0f0      	beq.n	800485e <HAL_RCC_OscConfig+0xee>
 800487c:	e015      	b.n	80048aa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487e:	f7fe fd7f 	bl	8003380 <HAL_GetTick>
 8004882:	0003      	movs	r3, r0
 8004884:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004888:	f7fe fd7a 	bl	8003380 <HAL_GetTick>
 800488c:	0002      	movs	r2, r0
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b64      	cmp	r3, #100	; 0x64
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e275      	b.n	8004d86 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800489a:	4b80      	ldr	r3, [pc, #512]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	2380      	movs	r3, #128	; 0x80
 80048a0:	029b      	lsls	r3, r3, #10
 80048a2:	4013      	ands	r3, r2
 80048a4:	d1f0      	bne.n	8004888 <HAL_RCC_OscConfig+0x118>
 80048a6:	e000      	b.n	80048aa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2202      	movs	r2, #2
 80048b0:	4013      	ands	r3, r2
 80048b2:	d100      	bne.n	80048b6 <HAL_RCC_OscConfig+0x146>
 80048b4:	e069      	b.n	800498a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80048b6:	4b79      	ldr	r3, [pc, #484]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	220c      	movs	r2, #12
 80048bc:	4013      	ands	r3, r2
 80048be:	d00b      	beq.n	80048d8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80048c0:	4b76      	ldr	r3, [pc, #472]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	220c      	movs	r2, #12
 80048c6:	4013      	ands	r3, r2
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d11c      	bne.n	8004906 <HAL_RCC_OscConfig+0x196>
 80048cc:	4b73      	ldr	r3, [pc, #460]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	2380      	movs	r3, #128	; 0x80
 80048d2:	025b      	lsls	r3, r3, #9
 80048d4:	4013      	ands	r3, r2
 80048d6:	d116      	bne.n	8004906 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048d8:	4b70      	ldr	r3, [pc, #448]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2202      	movs	r2, #2
 80048de:	4013      	ands	r3, r2
 80048e0:	d005      	beq.n	80048ee <HAL_RCC_OscConfig+0x17e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d001      	beq.n	80048ee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e24b      	b.n	8004d86 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ee:	4b6b      	ldr	r3, [pc, #428]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	22f8      	movs	r2, #248	; 0xf8
 80048f4:	4393      	bics	r3, r2
 80048f6:	0019      	movs	r1, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	00da      	lsls	r2, r3, #3
 80048fe:	4b67      	ldr	r3, [pc, #412]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 8004900:	430a      	orrs	r2, r1
 8004902:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004904:	e041      	b.n	800498a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d024      	beq.n	8004958 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800490e:	4b63      	ldr	r3, [pc, #396]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	4b62      	ldr	r3, [pc, #392]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 8004914:	2101      	movs	r1, #1
 8004916:	430a      	orrs	r2, r1
 8004918:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491a:	f7fe fd31 	bl	8003380 <HAL_GetTick>
 800491e:	0003      	movs	r3, r0
 8004920:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004924:	f7fe fd2c 	bl	8003380 <HAL_GetTick>
 8004928:	0002      	movs	r2, r0
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e227      	b.n	8004d86 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004936:	4b59      	ldr	r3, [pc, #356]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2202      	movs	r2, #2
 800493c:	4013      	ands	r3, r2
 800493e:	d0f1      	beq.n	8004924 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004940:	4b56      	ldr	r3, [pc, #344]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	22f8      	movs	r2, #248	; 0xf8
 8004946:	4393      	bics	r3, r2
 8004948:	0019      	movs	r1, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	00da      	lsls	r2, r3, #3
 8004950:	4b52      	ldr	r3, [pc, #328]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 8004952:	430a      	orrs	r2, r1
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	e018      	b.n	800498a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004958:	4b50      	ldr	r3, [pc, #320]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	4b4f      	ldr	r3, [pc, #316]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 800495e:	2101      	movs	r1, #1
 8004960:	438a      	bics	r2, r1
 8004962:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004964:	f7fe fd0c 	bl	8003380 <HAL_GetTick>
 8004968:	0003      	movs	r3, r0
 800496a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800496e:	f7fe fd07 	bl	8003380 <HAL_GetTick>
 8004972:	0002      	movs	r2, r0
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e202      	b.n	8004d86 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004980:	4b46      	ldr	r3, [pc, #280]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2202      	movs	r2, #2
 8004986:	4013      	ands	r3, r2
 8004988:	d1f1      	bne.n	800496e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2208      	movs	r2, #8
 8004990:	4013      	ands	r3, r2
 8004992:	d036      	beq.n	8004a02 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d019      	beq.n	80049d0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800499c:	4b3f      	ldr	r3, [pc, #252]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 800499e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049a0:	4b3e      	ldr	r3, [pc, #248]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 80049a2:	2101      	movs	r1, #1
 80049a4:	430a      	orrs	r2, r1
 80049a6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049a8:	f7fe fcea 	bl	8003380 <HAL_GetTick>
 80049ac:	0003      	movs	r3, r0
 80049ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b2:	f7fe fce5 	bl	8003380 <HAL_GetTick>
 80049b6:	0002      	movs	r2, r0
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e1e0      	b.n	8004d86 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049c4:	4b35      	ldr	r3, [pc, #212]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	2202      	movs	r2, #2
 80049ca:	4013      	ands	r3, r2
 80049cc:	d0f1      	beq.n	80049b2 <HAL_RCC_OscConfig+0x242>
 80049ce:	e018      	b.n	8004a02 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049d0:	4b32      	ldr	r3, [pc, #200]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 80049d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049d4:	4b31      	ldr	r3, [pc, #196]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 80049d6:	2101      	movs	r1, #1
 80049d8:	438a      	bics	r2, r1
 80049da:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049dc:	f7fe fcd0 	bl	8003380 <HAL_GetTick>
 80049e0:	0003      	movs	r3, r0
 80049e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049e6:	f7fe fccb 	bl	8003380 <HAL_GetTick>
 80049ea:	0002      	movs	r2, r0
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e1c6      	b.n	8004d86 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049f8:	4b28      	ldr	r3, [pc, #160]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	2202      	movs	r2, #2
 80049fe:	4013      	ands	r3, r2
 8004a00:	d1f1      	bne.n	80049e6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2204      	movs	r2, #4
 8004a08:	4013      	ands	r3, r2
 8004a0a:	d100      	bne.n	8004a0e <HAL_RCC_OscConfig+0x29e>
 8004a0c:	e0b4      	b.n	8004b78 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a0e:	201f      	movs	r0, #31
 8004a10:	183b      	adds	r3, r7, r0
 8004a12:	2200      	movs	r2, #0
 8004a14:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a16:	4b21      	ldr	r3, [pc, #132]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 8004a18:	69da      	ldr	r2, [r3, #28]
 8004a1a:	2380      	movs	r3, #128	; 0x80
 8004a1c:	055b      	lsls	r3, r3, #21
 8004a1e:	4013      	ands	r3, r2
 8004a20:	d110      	bne.n	8004a44 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a22:	4b1e      	ldr	r3, [pc, #120]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 8004a24:	69da      	ldr	r2, [r3, #28]
 8004a26:	4b1d      	ldr	r3, [pc, #116]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 8004a28:	2180      	movs	r1, #128	; 0x80
 8004a2a:	0549      	lsls	r1, r1, #21
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	61da      	str	r2, [r3, #28]
 8004a30:	4b1a      	ldr	r3, [pc, #104]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 8004a32:	69da      	ldr	r2, [r3, #28]
 8004a34:	2380      	movs	r3, #128	; 0x80
 8004a36:	055b      	lsls	r3, r3, #21
 8004a38:	4013      	ands	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a3e:	183b      	adds	r3, r7, r0
 8004a40:	2201      	movs	r2, #1
 8004a42:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a44:	4b18      	ldr	r3, [pc, #96]	; (8004aa8 <HAL_RCC_OscConfig+0x338>)
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	2380      	movs	r3, #128	; 0x80
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	d11a      	bne.n	8004a86 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a50:	4b15      	ldr	r3, [pc, #84]	; (8004aa8 <HAL_RCC_OscConfig+0x338>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	4b14      	ldr	r3, [pc, #80]	; (8004aa8 <HAL_RCC_OscConfig+0x338>)
 8004a56:	2180      	movs	r1, #128	; 0x80
 8004a58:	0049      	lsls	r1, r1, #1
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a5e:	f7fe fc8f 	bl	8003380 <HAL_GetTick>
 8004a62:	0003      	movs	r3, r0
 8004a64:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a68:	f7fe fc8a 	bl	8003380 <HAL_GetTick>
 8004a6c:	0002      	movs	r2, r0
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b64      	cmp	r3, #100	; 0x64
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e185      	b.n	8004d86 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a7a:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <HAL_RCC_OscConfig+0x338>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	2380      	movs	r3, #128	; 0x80
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	4013      	ands	r3, r2
 8004a84:	d0f0      	beq.n	8004a68 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d10e      	bne.n	8004aac <HAL_RCC_OscConfig+0x33c>
 8004a8e:	4b03      	ldr	r3, [pc, #12]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 8004a90:	6a1a      	ldr	r2, [r3, #32]
 8004a92:	4b02      	ldr	r3, [pc, #8]	; (8004a9c <HAL_RCC_OscConfig+0x32c>)
 8004a94:	2101      	movs	r1, #1
 8004a96:	430a      	orrs	r2, r1
 8004a98:	621a      	str	r2, [r3, #32]
 8004a9a:	e035      	b.n	8004b08 <HAL_RCC_OscConfig+0x398>
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	fffeffff 	.word	0xfffeffff
 8004aa4:	fffbffff 	.word	0xfffbffff
 8004aa8:	40007000 	.word	0x40007000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10c      	bne.n	8004ace <HAL_RCC_OscConfig+0x35e>
 8004ab4:	4bb6      	ldr	r3, [pc, #728]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004ab6:	6a1a      	ldr	r2, [r3, #32]
 8004ab8:	4bb5      	ldr	r3, [pc, #724]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004aba:	2101      	movs	r1, #1
 8004abc:	438a      	bics	r2, r1
 8004abe:	621a      	str	r2, [r3, #32]
 8004ac0:	4bb3      	ldr	r3, [pc, #716]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004ac2:	6a1a      	ldr	r2, [r3, #32]
 8004ac4:	4bb2      	ldr	r3, [pc, #712]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004ac6:	2104      	movs	r1, #4
 8004ac8:	438a      	bics	r2, r1
 8004aca:	621a      	str	r2, [r3, #32]
 8004acc:	e01c      	b.n	8004b08 <HAL_RCC_OscConfig+0x398>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	2b05      	cmp	r3, #5
 8004ad4:	d10c      	bne.n	8004af0 <HAL_RCC_OscConfig+0x380>
 8004ad6:	4bae      	ldr	r3, [pc, #696]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004ad8:	6a1a      	ldr	r2, [r3, #32]
 8004ada:	4bad      	ldr	r3, [pc, #692]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004adc:	2104      	movs	r1, #4
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	621a      	str	r2, [r3, #32]
 8004ae2:	4bab      	ldr	r3, [pc, #684]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004ae4:	6a1a      	ldr	r2, [r3, #32]
 8004ae6:	4baa      	ldr	r3, [pc, #680]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004ae8:	2101      	movs	r1, #1
 8004aea:	430a      	orrs	r2, r1
 8004aec:	621a      	str	r2, [r3, #32]
 8004aee:	e00b      	b.n	8004b08 <HAL_RCC_OscConfig+0x398>
 8004af0:	4ba7      	ldr	r3, [pc, #668]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004af2:	6a1a      	ldr	r2, [r3, #32]
 8004af4:	4ba6      	ldr	r3, [pc, #664]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004af6:	2101      	movs	r1, #1
 8004af8:	438a      	bics	r2, r1
 8004afa:	621a      	str	r2, [r3, #32]
 8004afc:	4ba4      	ldr	r3, [pc, #656]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004afe:	6a1a      	ldr	r2, [r3, #32]
 8004b00:	4ba3      	ldr	r3, [pc, #652]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004b02:	2104      	movs	r1, #4
 8004b04:	438a      	bics	r2, r1
 8004b06:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d014      	beq.n	8004b3a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b10:	f7fe fc36 	bl	8003380 <HAL_GetTick>
 8004b14:	0003      	movs	r3, r0
 8004b16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b18:	e009      	b.n	8004b2e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b1a:	f7fe fc31 	bl	8003380 <HAL_GetTick>
 8004b1e:	0002      	movs	r2, r0
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	4a9b      	ldr	r2, [pc, #620]	; (8004d94 <HAL_RCC_OscConfig+0x624>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e12b      	b.n	8004d86 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b2e:	4b98      	ldr	r3, [pc, #608]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	2202      	movs	r2, #2
 8004b34:	4013      	ands	r3, r2
 8004b36:	d0f0      	beq.n	8004b1a <HAL_RCC_OscConfig+0x3aa>
 8004b38:	e013      	b.n	8004b62 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b3a:	f7fe fc21 	bl	8003380 <HAL_GetTick>
 8004b3e:	0003      	movs	r3, r0
 8004b40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b42:	e009      	b.n	8004b58 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b44:	f7fe fc1c 	bl	8003380 <HAL_GetTick>
 8004b48:	0002      	movs	r2, r0
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	4a91      	ldr	r2, [pc, #580]	; (8004d94 <HAL_RCC_OscConfig+0x624>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e116      	b.n	8004d86 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b58:	4b8d      	ldr	r3, [pc, #564]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	4013      	ands	r3, r2
 8004b60:	d1f0      	bne.n	8004b44 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b62:	231f      	movs	r3, #31
 8004b64:	18fb      	adds	r3, r7, r3
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d105      	bne.n	8004b78 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b6c:	4b88      	ldr	r3, [pc, #544]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	4b87      	ldr	r3, [pc, #540]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004b72:	4989      	ldr	r1, [pc, #548]	; (8004d98 <HAL_RCC_OscConfig+0x628>)
 8004b74:	400a      	ands	r2, r1
 8004b76:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2210      	movs	r2, #16
 8004b7e:	4013      	ands	r3, r2
 8004b80:	d063      	beq.n	8004c4a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d12a      	bne.n	8004be0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004b8a:	4b81      	ldr	r3, [pc, #516]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b8e:	4b80      	ldr	r3, [pc, #512]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004b90:	2104      	movs	r1, #4
 8004b92:	430a      	orrs	r2, r1
 8004b94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004b96:	4b7e      	ldr	r3, [pc, #504]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b9a:	4b7d      	ldr	r3, [pc, #500]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ba2:	f7fe fbed 	bl	8003380 <HAL_GetTick>
 8004ba6:	0003      	movs	r3, r0
 8004ba8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004bac:	f7fe fbe8 	bl	8003380 <HAL_GetTick>
 8004bb0:	0002      	movs	r2, r0
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e0e3      	b.n	8004d86 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004bbe:	4b74      	ldr	r3, [pc, #464]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d0f1      	beq.n	8004bac <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004bc8:	4b71      	ldr	r3, [pc, #452]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bcc:	22f8      	movs	r2, #248	; 0xf8
 8004bce:	4393      	bics	r3, r2
 8004bd0:	0019      	movs	r1, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	00da      	lsls	r2, r3, #3
 8004bd8:	4b6d      	ldr	r3, [pc, #436]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	635a      	str	r2, [r3, #52]	; 0x34
 8004bde:	e034      	b.n	8004c4a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	3305      	adds	r3, #5
 8004be6:	d111      	bne.n	8004c0c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004be8:	4b69      	ldr	r3, [pc, #420]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bec:	4b68      	ldr	r3, [pc, #416]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004bee:	2104      	movs	r1, #4
 8004bf0:	438a      	bics	r2, r1
 8004bf2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004bf4:	4b66      	ldr	r3, [pc, #408]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf8:	22f8      	movs	r2, #248	; 0xf8
 8004bfa:	4393      	bics	r3, r2
 8004bfc:	0019      	movs	r1, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	00da      	lsls	r2, r3, #3
 8004c04:	4b62      	ldr	r3, [pc, #392]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004c06:	430a      	orrs	r2, r1
 8004c08:	635a      	str	r2, [r3, #52]	; 0x34
 8004c0a:	e01e      	b.n	8004c4a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004c0c:	4b60      	ldr	r3, [pc, #384]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c10:	4b5f      	ldr	r3, [pc, #380]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004c12:	2104      	movs	r1, #4
 8004c14:	430a      	orrs	r2, r1
 8004c16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004c18:	4b5d      	ldr	r3, [pc, #372]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c1c:	4b5c      	ldr	r3, [pc, #368]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004c1e:	2101      	movs	r1, #1
 8004c20:	438a      	bics	r2, r1
 8004c22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c24:	f7fe fbac 	bl	8003380 <HAL_GetTick>
 8004c28:	0003      	movs	r3, r0
 8004c2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004c2e:	f7fe fba7 	bl	8003380 <HAL_GetTick>
 8004c32:	0002      	movs	r2, r0
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e0a2      	b.n	8004d86 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004c40:	4b53      	ldr	r3, [pc, #332]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c44:	2202      	movs	r2, #2
 8004c46:	4013      	ands	r3, r2
 8004c48:	d1f1      	bne.n	8004c2e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d100      	bne.n	8004c54 <HAL_RCC_OscConfig+0x4e4>
 8004c52:	e097      	b.n	8004d84 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c54:	4b4e      	ldr	r3, [pc, #312]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	220c      	movs	r2, #12
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d100      	bne.n	8004c62 <HAL_RCC_OscConfig+0x4f2>
 8004c60:	e06b      	b.n	8004d3a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d14c      	bne.n	8004d04 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c6a:	4b49      	ldr	r3, [pc, #292]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	4b48      	ldr	r3, [pc, #288]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004c70:	494a      	ldr	r1, [pc, #296]	; (8004d9c <HAL_RCC_OscConfig+0x62c>)
 8004c72:	400a      	ands	r2, r1
 8004c74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c76:	f7fe fb83 	bl	8003380 <HAL_GetTick>
 8004c7a:	0003      	movs	r3, r0
 8004c7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c80:	f7fe fb7e 	bl	8003380 <HAL_GetTick>
 8004c84:	0002      	movs	r2, r0
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e079      	b.n	8004d86 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c92:	4b3f      	ldr	r3, [pc, #252]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	2380      	movs	r3, #128	; 0x80
 8004c98:	049b      	lsls	r3, r3, #18
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	d1f0      	bne.n	8004c80 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c9e:	4b3c      	ldr	r3, [pc, #240]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	220f      	movs	r2, #15
 8004ca4:	4393      	bics	r3, r2
 8004ca6:	0019      	movs	r1, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cac:	4b38      	ldr	r3, [pc, #224]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cb2:	4b37      	ldr	r3, [pc, #220]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	4a3a      	ldr	r2, [pc, #232]	; (8004da0 <HAL_RCC_OscConfig+0x630>)
 8004cb8:	4013      	ands	r3, r2
 8004cba:	0019      	movs	r1, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	4b32      	ldr	r3, [pc, #200]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ccc:	4b30      	ldr	r3, [pc, #192]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	4b2f      	ldr	r3, [pc, #188]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004cd2:	2180      	movs	r1, #128	; 0x80
 8004cd4:	0449      	lsls	r1, r1, #17
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cda:	f7fe fb51 	bl	8003380 <HAL_GetTick>
 8004cde:	0003      	movs	r3, r0
 8004ce0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce4:	f7fe fb4c 	bl	8003380 <HAL_GetTick>
 8004ce8:	0002      	movs	r2, r0
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e047      	b.n	8004d86 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cf6:	4b26      	ldr	r3, [pc, #152]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	2380      	movs	r3, #128	; 0x80
 8004cfc:	049b      	lsls	r3, r3, #18
 8004cfe:	4013      	ands	r3, r2
 8004d00:	d0f0      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x574>
 8004d02:	e03f      	b.n	8004d84 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d04:	4b22      	ldr	r3, [pc, #136]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	4b21      	ldr	r3, [pc, #132]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004d0a:	4924      	ldr	r1, [pc, #144]	; (8004d9c <HAL_RCC_OscConfig+0x62c>)
 8004d0c:	400a      	ands	r2, r1
 8004d0e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d10:	f7fe fb36 	bl	8003380 <HAL_GetTick>
 8004d14:	0003      	movs	r3, r0
 8004d16:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d1a:	f7fe fb31 	bl	8003380 <HAL_GetTick>
 8004d1e:	0002      	movs	r2, r0
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e02c      	b.n	8004d86 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d2c:	4b18      	ldr	r3, [pc, #96]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	2380      	movs	r3, #128	; 0x80
 8004d32:	049b      	lsls	r3, r3, #18
 8004d34:	4013      	ands	r3, r2
 8004d36:	d1f0      	bne.n	8004d1a <HAL_RCC_OscConfig+0x5aa>
 8004d38:	e024      	b.n	8004d84 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d101      	bne.n	8004d46 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e01f      	b.n	8004d86 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004d46:	4b12      	ldr	r3, [pc, #72]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004d4c:	4b10      	ldr	r3, [pc, #64]	; (8004d90 <HAL_RCC_OscConfig+0x620>)
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	2380      	movs	r3, #128	; 0x80
 8004d56:	025b      	lsls	r3, r3, #9
 8004d58:	401a      	ands	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d10e      	bne.n	8004d80 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	220f      	movs	r2, #15
 8004d66:	401a      	ands	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d107      	bne.n	8004d80 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	23f0      	movs	r3, #240	; 0xf0
 8004d74:	039b      	lsls	r3, r3, #14
 8004d76:	401a      	ands	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d001      	beq.n	8004d84 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e000      	b.n	8004d86 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	0018      	movs	r0, r3
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	b008      	add	sp, #32
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	46c0      	nop			; (mov r8, r8)
 8004d90:	40021000 	.word	0x40021000
 8004d94:	00001388 	.word	0x00001388
 8004d98:	efffffff 	.word	0xefffffff
 8004d9c:	feffffff 	.word	0xfeffffff
 8004da0:	ffc2ffff 	.word	0xffc2ffff

08004da4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e0b3      	b.n	8004f20 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004db8:	4b5b      	ldr	r3, [pc, #364]	; (8004f28 <HAL_RCC_ClockConfig+0x184>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d911      	bls.n	8004dea <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc6:	4b58      	ldr	r3, [pc, #352]	; (8004f28 <HAL_RCC_ClockConfig+0x184>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	4393      	bics	r3, r2
 8004dce:	0019      	movs	r1, r3
 8004dd0:	4b55      	ldr	r3, [pc, #340]	; (8004f28 <HAL_RCC_ClockConfig+0x184>)
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd8:	4b53      	ldr	r3, [pc, #332]	; (8004f28 <HAL_RCC_ClockConfig+0x184>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	4013      	ands	r3, r2
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d001      	beq.n	8004dea <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e09a      	b.n	8004f20 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2202      	movs	r2, #2
 8004df0:	4013      	ands	r3, r2
 8004df2:	d015      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2204      	movs	r2, #4
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	d006      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004dfe:	4b4b      	ldr	r3, [pc, #300]	; (8004f2c <HAL_RCC_ClockConfig+0x188>)
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	4b4a      	ldr	r3, [pc, #296]	; (8004f2c <HAL_RCC_ClockConfig+0x188>)
 8004e04:	21e0      	movs	r1, #224	; 0xe0
 8004e06:	00c9      	lsls	r1, r1, #3
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e0c:	4b47      	ldr	r3, [pc, #284]	; (8004f2c <HAL_RCC_ClockConfig+0x188>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	22f0      	movs	r2, #240	; 0xf0
 8004e12:	4393      	bics	r3, r2
 8004e14:	0019      	movs	r1, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	4b44      	ldr	r3, [pc, #272]	; (8004f2c <HAL_RCC_ClockConfig+0x188>)
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2201      	movs	r2, #1
 8004e26:	4013      	ands	r3, r2
 8004e28:	d040      	beq.n	8004eac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d107      	bne.n	8004e42 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e32:	4b3e      	ldr	r3, [pc, #248]	; (8004f2c <HAL_RCC_ClockConfig+0x188>)
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	2380      	movs	r3, #128	; 0x80
 8004e38:	029b      	lsls	r3, r3, #10
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	d114      	bne.n	8004e68 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e06e      	b.n	8004f20 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d107      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e4a:	4b38      	ldr	r3, [pc, #224]	; (8004f2c <HAL_RCC_ClockConfig+0x188>)
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	2380      	movs	r3, #128	; 0x80
 8004e50:	049b      	lsls	r3, r3, #18
 8004e52:	4013      	ands	r3, r2
 8004e54:	d108      	bne.n	8004e68 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e062      	b.n	8004f20 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5a:	4b34      	ldr	r3, [pc, #208]	; (8004f2c <HAL_RCC_ClockConfig+0x188>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	4013      	ands	r3, r2
 8004e62:	d101      	bne.n	8004e68 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e05b      	b.n	8004f20 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e68:	4b30      	ldr	r3, [pc, #192]	; (8004f2c <HAL_RCC_ClockConfig+0x188>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	2203      	movs	r2, #3
 8004e6e:	4393      	bics	r3, r2
 8004e70:	0019      	movs	r1, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	4b2d      	ldr	r3, [pc, #180]	; (8004f2c <HAL_RCC_ClockConfig+0x188>)
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e7c:	f7fe fa80 	bl	8003380 <HAL_GetTick>
 8004e80:	0003      	movs	r3, r0
 8004e82:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e84:	e009      	b.n	8004e9a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e86:	f7fe fa7b 	bl	8003380 <HAL_GetTick>
 8004e8a:	0002      	movs	r2, r0
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	4a27      	ldr	r2, [pc, #156]	; (8004f30 <HAL_RCC_ClockConfig+0x18c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e042      	b.n	8004f20 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9a:	4b24      	ldr	r3, [pc, #144]	; (8004f2c <HAL_RCC_ClockConfig+0x188>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	220c      	movs	r2, #12
 8004ea0:	401a      	ands	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d1ec      	bne.n	8004e86 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004eac:	4b1e      	ldr	r3, [pc, #120]	; (8004f28 <HAL_RCC_ClockConfig+0x184>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d211      	bcs.n	8004ede <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eba:	4b1b      	ldr	r3, [pc, #108]	; (8004f28 <HAL_RCC_ClockConfig+0x184>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	4393      	bics	r3, r2
 8004ec2:	0019      	movs	r1, r3
 8004ec4:	4b18      	ldr	r3, [pc, #96]	; (8004f28 <HAL_RCC_ClockConfig+0x184>)
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ecc:	4b16      	ldr	r3, [pc, #88]	; (8004f28 <HAL_RCC_ClockConfig+0x184>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d001      	beq.n	8004ede <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e020      	b.n	8004f20 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2204      	movs	r2, #4
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d009      	beq.n	8004efc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004ee8:	4b10      	ldr	r3, [pc, #64]	; (8004f2c <HAL_RCC_ClockConfig+0x188>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	4a11      	ldr	r2, [pc, #68]	; (8004f34 <HAL_RCC_ClockConfig+0x190>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	0019      	movs	r1, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <HAL_RCC_ClockConfig+0x188>)
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004efc:	f000 f820 	bl	8004f40 <HAL_RCC_GetSysClockFreq>
 8004f00:	0001      	movs	r1, r0
 8004f02:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <HAL_RCC_ClockConfig+0x188>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	091b      	lsrs	r3, r3, #4
 8004f08:	220f      	movs	r2, #15
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	4a0a      	ldr	r2, [pc, #40]	; (8004f38 <HAL_RCC_ClockConfig+0x194>)
 8004f0e:	5cd3      	ldrb	r3, [r2, r3]
 8004f10:	000a      	movs	r2, r1
 8004f12:	40da      	lsrs	r2, r3
 8004f14:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <HAL_RCC_ClockConfig+0x198>)
 8004f16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004f18:	2000      	movs	r0, #0
 8004f1a:	f7fe f9eb 	bl	80032f4 <HAL_InitTick>
  
  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	0018      	movs	r0, r3
 8004f22:	46bd      	mov	sp, r7
 8004f24:	b004      	add	sp, #16
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40022000 	.word	0x40022000
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	00001388 	.word	0x00001388
 8004f34:	fffff8ff 	.word	0xfffff8ff
 8004f38:	0800a760 	.word	0x0800a760
 8004f3c:	20000004 	.word	0x20000004

08004f40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f40:	b590      	push	{r4, r7, lr}
 8004f42:	b08f      	sub	sp, #60	; 0x3c
 8004f44:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004f46:	2314      	movs	r3, #20
 8004f48:	18fb      	adds	r3, r7, r3
 8004f4a:	4a2b      	ldr	r2, [pc, #172]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f4c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004f4e:	c313      	stmia	r3!, {r0, r1, r4}
 8004f50:	6812      	ldr	r2, [r2, #0]
 8004f52:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004f54:	1d3b      	adds	r3, r7, #4
 8004f56:	4a29      	ldr	r2, [pc, #164]	; (8004ffc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f58:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004f5a:	c313      	stmia	r3!, {r0, r1, r4}
 8004f5c:	6812      	ldr	r2, [r2, #0]
 8004f5e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f64:	2300      	movs	r3, #0
 8004f66:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f68:	2300      	movs	r3, #0
 8004f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004f74:	4b22      	ldr	r3, [pc, #136]	; (8005000 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7c:	220c      	movs	r2, #12
 8004f7e:	4013      	ands	r3, r2
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d002      	beq.n	8004f8a <HAL_RCC_GetSysClockFreq+0x4a>
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d003      	beq.n	8004f90 <HAL_RCC_GetSysClockFreq+0x50>
 8004f88:	e02d      	b.n	8004fe6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f8a:	4b1e      	ldr	r3, [pc, #120]	; (8005004 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f8c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004f8e:	e02d      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f92:	0c9b      	lsrs	r3, r3, #18
 8004f94:	220f      	movs	r2, #15
 8004f96:	4013      	ands	r3, r2
 8004f98:	2214      	movs	r2, #20
 8004f9a:	18ba      	adds	r2, r7, r2
 8004f9c:	5cd3      	ldrb	r3, [r2, r3]
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004fa0:	4b17      	ldr	r3, [pc, #92]	; (8005000 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa4:	220f      	movs	r2, #15
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	1d3a      	adds	r2, r7, #4
 8004faa:	5cd3      	ldrb	r3, [r2, r3]
 8004fac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fb0:	2380      	movs	r3, #128	; 0x80
 8004fb2:	025b      	lsls	r3, r3, #9
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	d009      	beq.n	8004fcc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004fb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fba:	4812      	ldr	r0, [pc, #72]	; (8005004 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004fbc:	f7fb f8b8 	bl	8000130 <__udivsi3>
 8004fc0:	0003      	movs	r3, r0
 8004fc2:	001a      	movs	r2, r3
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	4353      	muls	r3, r2
 8004fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8004fca:	e009      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004fcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fce:	000a      	movs	r2, r1
 8004fd0:	0152      	lsls	r2, r2, #5
 8004fd2:	1a52      	subs	r2, r2, r1
 8004fd4:	0193      	lsls	r3, r2, #6
 8004fd6:	1a9b      	subs	r3, r3, r2
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	185b      	adds	r3, r3, r1
 8004fdc:	021b      	lsls	r3, r3, #8
 8004fde:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004fe4:	e002      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004fe6:	4b07      	ldr	r3, [pc, #28]	; (8005004 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004fe8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004fea:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004fee:	0018      	movs	r0, r3
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	b00f      	add	sp, #60	; 0x3c
 8004ff4:	bd90      	pop	{r4, r7, pc}
 8004ff6:	46c0      	nop			; (mov r8, r8)
 8004ff8:	0800a640 	.word	0x0800a640
 8004ffc:	0800a650 	.word	0x0800a650
 8005000:	40021000 	.word	0x40021000
 8005004:	007a1200 	.word	0x007a1200

08005008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800500c:	4b02      	ldr	r3, [pc, #8]	; (8005018 <HAL_RCC_GetHCLKFreq+0x10>)
 800500e:	681b      	ldr	r3, [r3, #0]
}
 8005010:	0018      	movs	r0, r3
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	46c0      	nop			; (mov r8, r8)
 8005018:	20000004 	.word	0x20000004

0800501c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005020:	f7ff fff2 	bl	8005008 <HAL_RCC_GetHCLKFreq>
 8005024:	0001      	movs	r1, r0
 8005026:	4b06      	ldr	r3, [pc, #24]	; (8005040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	0a1b      	lsrs	r3, r3, #8
 800502c:	2207      	movs	r2, #7
 800502e:	4013      	ands	r3, r2
 8005030:	4a04      	ldr	r2, [pc, #16]	; (8005044 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005032:	5cd3      	ldrb	r3, [r2, r3]
 8005034:	40d9      	lsrs	r1, r3
 8005036:	000b      	movs	r3, r1
}    
 8005038:	0018      	movs	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	46c0      	nop			; (mov r8, r8)
 8005040:	40021000 	.word	0x40021000
 8005044:	0800a770 	.word	0x0800a770

08005048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e042      	b.n	80050e0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	223d      	movs	r2, #61	; 0x3d
 800505e:	5c9b      	ldrb	r3, [r3, r2]
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d107      	bne.n	8005076 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	223c      	movs	r2, #60	; 0x3c
 800506a:	2100      	movs	r1, #0
 800506c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	0018      	movs	r0, r3
 8005072:	f7fd ff19 	bl	8002ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	223d      	movs	r2, #61	; 0x3d
 800507a:	2102      	movs	r1, #2
 800507c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3304      	adds	r3, #4
 8005086:	0019      	movs	r1, r3
 8005088:	0010      	movs	r0, r2
 800508a:	f000 fa1f 	bl	80054cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2246      	movs	r2, #70	; 0x46
 8005092:	2101      	movs	r1, #1
 8005094:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	223e      	movs	r2, #62	; 0x3e
 800509a:	2101      	movs	r1, #1
 800509c:	5499      	strb	r1, [r3, r2]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	223f      	movs	r2, #63	; 0x3f
 80050a2:	2101      	movs	r1, #1
 80050a4:	5499      	strb	r1, [r3, r2]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2240      	movs	r2, #64	; 0x40
 80050aa:	2101      	movs	r1, #1
 80050ac:	5499      	strb	r1, [r3, r2]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2241      	movs	r2, #65	; 0x41
 80050b2:	2101      	movs	r1, #1
 80050b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2242      	movs	r2, #66	; 0x42
 80050ba:	2101      	movs	r1, #1
 80050bc:	5499      	strb	r1, [r3, r2]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2243      	movs	r2, #67	; 0x43
 80050c2:	2101      	movs	r1, #1
 80050c4:	5499      	strb	r1, [r3, r2]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2244      	movs	r2, #68	; 0x44
 80050ca:	2101      	movs	r1, #1
 80050cc:	5499      	strb	r1, [r3, r2]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2245      	movs	r2, #69	; 0x45
 80050d2:	2101      	movs	r1, #1
 80050d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	223d      	movs	r2, #61	; 0x3d
 80050da:	2101      	movs	r1, #1
 80050dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	0018      	movs	r0, r3
 80050e2:	46bd      	mov	sp, r7
 80050e4:	b002      	add	sp, #8
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e042      	b.n	8005180 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	223d      	movs	r2, #61	; 0x3d
 80050fe:	5c9b      	ldrb	r3, [r3, r2]
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d107      	bne.n	8005116 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	223c      	movs	r2, #60	; 0x3c
 800510a:	2100      	movs	r1, #0
 800510c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	0018      	movs	r0, r3
 8005112:	f000 f839 	bl	8005188 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	223d      	movs	r2, #61	; 0x3d
 800511a:	2102      	movs	r1, #2
 800511c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	3304      	adds	r3, #4
 8005126:	0019      	movs	r1, r3
 8005128:	0010      	movs	r0, r2
 800512a:	f000 f9cf 	bl	80054cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2246      	movs	r2, #70	; 0x46
 8005132:	2101      	movs	r1, #1
 8005134:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	223e      	movs	r2, #62	; 0x3e
 800513a:	2101      	movs	r1, #1
 800513c:	5499      	strb	r1, [r3, r2]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	223f      	movs	r2, #63	; 0x3f
 8005142:	2101      	movs	r1, #1
 8005144:	5499      	strb	r1, [r3, r2]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2240      	movs	r2, #64	; 0x40
 800514a:	2101      	movs	r1, #1
 800514c:	5499      	strb	r1, [r3, r2]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2241      	movs	r2, #65	; 0x41
 8005152:	2101      	movs	r1, #1
 8005154:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2242      	movs	r2, #66	; 0x42
 800515a:	2101      	movs	r1, #1
 800515c:	5499      	strb	r1, [r3, r2]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2243      	movs	r2, #67	; 0x43
 8005162:	2101      	movs	r1, #1
 8005164:	5499      	strb	r1, [r3, r2]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2244      	movs	r2, #68	; 0x44
 800516a:	2101      	movs	r1, #1
 800516c:	5499      	strb	r1, [r3, r2]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2245      	movs	r2, #69	; 0x45
 8005172:	2101      	movs	r1, #1
 8005174:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	223d      	movs	r2, #61	; 0x3d
 800517a:	2101      	movs	r1, #1
 800517c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	0018      	movs	r0, r3
 8005182:	46bd      	mov	sp, r7
 8005184:	b002      	add	sp, #8
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005190:	46c0      	nop			; (mov r8, r8)
 8005192:	46bd      	mov	sp, r7
 8005194:	b002      	add	sp, #8
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051a4:	2317      	movs	r3, #23
 80051a6:	18fb      	adds	r3, r7, r3
 80051a8:	2200      	movs	r2, #0
 80051aa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	223c      	movs	r2, #60	; 0x3c
 80051b0:	5c9b      	ldrb	r3, [r3, r2]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d101      	bne.n	80051ba <HAL_TIM_PWM_ConfigChannel+0x22>
 80051b6:	2302      	movs	r3, #2
 80051b8:	e0ad      	b.n	8005316 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	223c      	movs	r2, #60	; 0x3c
 80051be:	2101      	movs	r1, #1
 80051c0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b0c      	cmp	r3, #12
 80051c6:	d100      	bne.n	80051ca <HAL_TIM_PWM_ConfigChannel+0x32>
 80051c8:	e076      	b.n	80052b8 <HAL_TIM_PWM_ConfigChannel+0x120>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b0c      	cmp	r3, #12
 80051ce:	d900      	bls.n	80051d2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80051d0:	e095      	b.n	80052fe <HAL_TIM_PWM_ConfigChannel+0x166>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d04e      	beq.n	8005276 <HAL_TIM_PWM_ConfigChannel+0xde>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d900      	bls.n	80051e0 <HAL_TIM_PWM_ConfigChannel+0x48>
 80051de:	e08e      	b.n	80052fe <HAL_TIM_PWM_ConfigChannel+0x166>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_TIM_PWM_ConfigChannel+0x56>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	d021      	beq.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x98>
 80051ec:	e087      	b.n	80052fe <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	0011      	movs	r1, r2
 80051f6:	0018      	movs	r0, r3
 80051f8:	f000 f9e8 	bl	80055cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699a      	ldr	r2, [r3, #24]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2108      	movs	r1, #8
 8005208:	430a      	orrs	r2, r1
 800520a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2104      	movs	r1, #4
 8005218:	438a      	bics	r2, r1
 800521a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6999      	ldr	r1, [r3, #24]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	691a      	ldr	r2, [r3, #16]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	619a      	str	r2, [r3, #24]
      break;
 800522e:	e06b      	b.n	8005308 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	0011      	movs	r1, r2
 8005238:	0018      	movs	r0, r3
 800523a:	f000 fa4f 	bl	80056dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	699a      	ldr	r2, [r3, #24]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2180      	movs	r1, #128	; 0x80
 800524a:	0109      	lsls	r1, r1, #4
 800524c:	430a      	orrs	r2, r1
 800524e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699a      	ldr	r2, [r3, #24]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4931      	ldr	r1, [pc, #196]	; (8005320 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800525c:	400a      	ands	r2, r1
 800525e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6999      	ldr	r1, [r3, #24]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	021a      	lsls	r2, r3, #8
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	619a      	str	r2, [r3, #24]
      break;
 8005274:	e048      	b.n	8005308 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	0011      	movs	r1, r2
 800527e:	0018      	movs	r0, r3
 8005280:	f000 fab0 	bl	80057e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	69da      	ldr	r2, [r3, #28]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2108      	movs	r1, #8
 8005290:	430a      	orrs	r2, r1
 8005292:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69da      	ldr	r2, [r3, #28]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2104      	movs	r1, #4
 80052a0:	438a      	bics	r2, r1
 80052a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69d9      	ldr	r1, [r3, #28]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	691a      	ldr	r2, [r3, #16]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	61da      	str	r2, [r3, #28]
      break;
 80052b6:	e027      	b.n	8005308 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	0011      	movs	r1, r2
 80052c0:	0018      	movs	r0, r3
 80052c2:	f000 fb15 	bl	80058f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69da      	ldr	r2, [r3, #28]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2180      	movs	r1, #128	; 0x80
 80052d2:	0109      	lsls	r1, r1, #4
 80052d4:	430a      	orrs	r2, r1
 80052d6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	69da      	ldr	r2, [r3, #28]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	490f      	ldr	r1, [pc, #60]	; (8005320 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80052e4:	400a      	ands	r2, r1
 80052e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	69d9      	ldr	r1, [r3, #28]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	021a      	lsls	r2, r3, #8
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	61da      	str	r2, [r3, #28]
      break;
 80052fc:	e004      	b.n	8005308 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80052fe:	2317      	movs	r3, #23
 8005300:	18fb      	adds	r3, r7, r3
 8005302:	2201      	movs	r2, #1
 8005304:	701a      	strb	r2, [r3, #0]
      break;
 8005306:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	223c      	movs	r2, #60	; 0x3c
 800530c:	2100      	movs	r1, #0
 800530e:	5499      	strb	r1, [r3, r2]

  return status;
 8005310:	2317      	movs	r3, #23
 8005312:	18fb      	adds	r3, r7, r3
 8005314:	781b      	ldrb	r3, [r3, #0]
}
 8005316:	0018      	movs	r0, r3
 8005318:	46bd      	mov	sp, r7
 800531a:	b006      	add	sp, #24
 800531c:	bd80      	pop	{r7, pc}
 800531e:	46c0      	nop			; (mov r8, r8)
 8005320:	fffffbff 	.word	0xfffffbff

08005324 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800532e:	230f      	movs	r3, #15
 8005330:	18fb      	adds	r3, r7, r3
 8005332:	2200      	movs	r2, #0
 8005334:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	223c      	movs	r2, #60	; 0x3c
 800533a:	5c9b      	ldrb	r3, [r3, r2]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d101      	bne.n	8005344 <HAL_TIM_ConfigClockSource+0x20>
 8005340:	2302      	movs	r3, #2
 8005342:	e0bc      	b.n	80054be <HAL_TIM_ConfigClockSource+0x19a>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	223c      	movs	r2, #60	; 0x3c
 8005348:	2101      	movs	r1, #1
 800534a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	223d      	movs	r2, #61	; 0x3d
 8005350:	2102      	movs	r1, #2
 8005352:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2277      	movs	r2, #119	; 0x77
 8005360:	4393      	bics	r3, r2
 8005362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4a58      	ldr	r2, [pc, #352]	; (80054c8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005368:	4013      	ands	r3, r2
 800536a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2280      	movs	r2, #128	; 0x80
 800537a:	0192      	lsls	r2, r2, #6
 800537c:	4293      	cmp	r3, r2
 800537e:	d040      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0xde>
 8005380:	2280      	movs	r2, #128	; 0x80
 8005382:	0192      	lsls	r2, r2, #6
 8005384:	4293      	cmp	r3, r2
 8005386:	d900      	bls.n	800538a <HAL_TIM_ConfigClockSource+0x66>
 8005388:	e088      	b.n	800549c <HAL_TIM_ConfigClockSource+0x178>
 800538a:	2280      	movs	r2, #128	; 0x80
 800538c:	0152      	lsls	r2, r2, #5
 800538e:	4293      	cmp	r3, r2
 8005390:	d100      	bne.n	8005394 <HAL_TIM_ConfigClockSource+0x70>
 8005392:	e088      	b.n	80054a6 <HAL_TIM_ConfigClockSource+0x182>
 8005394:	2280      	movs	r2, #128	; 0x80
 8005396:	0152      	lsls	r2, r2, #5
 8005398:	4293      	cmp	r3, r2
 800539a:	d900      	bls.n	800539e <HAL_TIM_ConfigClockSource+0x7a>
 800539c:	e07e      	b.n	800549c <HAL_TIM_ConfigClockSource+0x178>
 800539e:	2b70      	cmp	r3, #112	; 0x70
 80053a0:	d018      	beq.n	80053d4 <HAL_TIM_ConfigClockSource+0xb0>
 80053a2:	d900      	bls.n	80053a6 <HAL_TIM_ConfigClockSource+0x82>
 80053a4:	e07a      	b.n	800549c <HAL_TIM_ConfigClockSource+0x178>
 80053a6:	2b60      	cmp	r3, #96	; 0x60
 80053a8:	d04f      	beq.n	800544a <HAL_TIM_ConfigClockSource+0x126>
 80053aa:	d900      	bls.n	80053ae <HAL_TIM_ConfigClockSource+0x8a>
 80053ac:	e076      	b.n	800549c <HAL_TIM_ConfigClockSource+0x178>
 80053ae:	2b50      	cmp	r3, #80	; 0x50
 80053b0:	d03b      	beq.n	800542a <HAL_TIM_ConfigClockSource+0x106>
 80053b2:	d900      	bls.n	80053b6 <HAL_TIM_ConfigClockSource+0x92>
 80053b4:	e072      	b.n	800549c <HAL_TIM_ConfigClockSource+0x178>
 80053b6:	2b40      	cmp	r3, #64	; 0x40
 80053b8:	d057      	beq.n	800546a <HAL_TIM_ConfigClockSource+0x146>
 80053ba:	d900      	bls.n	80053be <HAL_TIM_ConfigClockSource+0x9a>
 80053bc:	e06e      	b.n	800549c <HAL_TIM_ConfigClockSource+0x178>
 80053be:	2b30      	cmp	r3, #48	; 0x30
 80053c0:	d063      	beq.n	800548a <HAL_TIM_ConfigClockSource+0x166>
 80053c2:	d86b      	bhi.n	800549c <HAL_TIM_ConfigClockSource+0x178>
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d060      	beq.n	800548a <HAL_TIM_ConfigClockSource+0x166>
 80053c8:	d868      	bhi.n	800549c <HAL_TIM_ConfigClockSource+0x178>
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d05d      	beq.n	800548a <HAL_TIM_ConfigClockSource+0x166>
 80053ce:	2b10      	cmp	r3, #16
 80053d0:	d05b      	beq.n	800548a <HAL_TIM_ConfigClockSource+0x166>
 80053d2:	e063      	b.n	800549c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6818      	ldr	r0, [r3, #0]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	6899      	ldr	r1, [r3, #8]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f000 fb68 	bl	8005ab8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2277      	movs	r2, #119	; 0x77
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	609a      	str	r2, [r3, #8]
      break;
 8005400:	e052      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	6899      	ldr	r1, [r3, #8]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f000 fb51 	bl	8005ab8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2180      	movs	r1, #128	; 0x80
 8005422:	01c9      	lsls	r1, r1, #7
 8005424:	430a      	orrs	r2, r1
 8005426:	609a      	str	r2, [r3, #8]
      break;
 8005428:	e03e      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6818      	ldr	r0, [r3, #0]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	6859      	ldr	r1, [r3, #4]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	001a      	movs	r2, r3
 8005438:	f000 fac4 	bl	80059c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2150      	movs	r1, #80	; 0x50
 8005442:	0018      	movs	r0, r3
 8005444:	f000 fb1e 	bl	8005a84 <TIM_ITRx_SetConfig>
      break;
 8005448:	e02e      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6818      	ldr	r0, [r3, #0]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	6859      	ldr	r1, [r3, #4]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	001a      	movs	r2, r3
 8005458:	f000 fae2 	bl	8005a20 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2160      	movs	r1, #96	; 0x60
 8005462:	0018      	movs	r0, r3
 8005464:	f000 fb0e 	bl	8005a84 <TIM_ITRx_SetConfig>
      break;
 8005468:	e01e      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6818      	ldr	r0, [r3, #0]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	6859      	ldr	r1, [r3, #4]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	001a      	movs	r2, r3
 8005478:	f000 faa4 	bl	80059c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2140      	movs	r1, #64	; 0x40
 8005482:	0018      	movs	r0, r3
 8005484:	f000 fafe 	bl	8005a84 <TIM_ITRx_SetConfig>
      break;
 8005488:	e00e      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	0019      	movs	r1, r3
 8005494:	0010      	movs	r0, r2
 8005496:	f000 faf5 	bl	8005a84 <TIM_ITRx_SetConfig>
      break;
 800549a:	e005      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800549c:	230f      	movs	r3, #15
 800549e:	18fb      	adds	r3, r7, r3
 80054a0:	2201      	movs	r2, #1
 80054a2:	701a      	strb	r2, [r3, #0]
      break;
 80054a4:	e000      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80054a6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	223d      	movs	r2, #61	; 0x3d
 80054ac:	2101      	movs	r1, #1
 80054ae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	223c      	movs	r2, #60	; 0x3c
 80054b4:	2100      	movs	r1, #0
 80054b6:	5499      	strb	r1, [r3, r2]

  return status;
 80054b8:	230f      	movs	r3, #15
 80054ba:	18fb      	adds	r3, r7, r3
 80054bc:	781b      	ldrb	r3, [r3, #0]
}
 80054be:	0018      	movs	r0, r3
 80054c0:	46bd      	mov	sp, r7
 80054c2:	b004      	add	sp, #16
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	46c0      	nop			; (mov r8, r8)
 80054c8:	ffff00ff 	.word	0xffff00ff

080054cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a34      	ldr	r2, [pc, #208]	; (80055b0 <TIM_Base_SetConfig+0xe4>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d008      	beq.n	80054f6 <TIM_Base_SetConfig+0x2a>
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	2380      	movs	r3, #128	; 0x80
 80054e8:	05db      	lsls	r3, r3, #23
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d003      	beq.n	80054f6 <TIM_Base_SetConfig+0x2a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a30      	ldr	r2, [pc, #192]	; (80055b4 <TIM_Base_SetConfig+0xe8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d108      	bne.n	8005508 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2270      	movs	r2, #112	; 0x70
 80054fa:	4393      	bics	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a29      	ldr	r2, [pc, #164]	; (80055b0 <TIM_Base_SetConfig+0xe4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d018      	beq.n	8005542 <TIM_Base_SetConfig+0x76>
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	2380      	movs	r3, #128	; 0x80
 8005514:	05db      	lsls	r3, r3, #23
 8005516:	429a      	cmp	r2, r3
 8005518:	d013      	beq.n	8005542 <TIM_Base_SetConfig+0x76>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a25      	ldr	r2, [pc, #148]	; (80055b4 <TIM_Base_SetConfig+0xe8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d00f      	beq.n	8005542 <TIM_Base_SetConfig+0x76>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a24      	ldr	r2, [pc, #144]	; (80055b8 <TIM_Base_SetConfig+0xec>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00b      	beq.n	8005542 <TIM_Base_SetConfig+0x76>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a23      	ldr	r2, [pc, #140]	; (80055bc <TIM_Base_SetConfig+0xf0>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d007      	beq.n	8005542 <TIM_Base_SetConfig+0x76>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a22      	ldr	r2, [pc, #136]	; (80055c0 <TIM_Base_SetConfig+0xf4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d003      	beq.n	8005542 <TIM_Base_SetConfig+0x76>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a21      	ldr	r2, [pc, #132]	; (80055c4 <TIM_Base_SetConfig+0xf8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d108      	bne.n	8005554 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4a20      	ldr	r2, [pc, #128]	; (80055c8 <TIM_Base_SetConfig+0xfc>)
 8005546:	4013      	ands	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2280      	movs	r2, #128	; 0x80
 8005558:	4393      	bics	r3, r2
 800555a:	001a      	movs	r2, r3
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	689a      	ldr	r2, [r3, #8]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a0c      	ldr	r2, [pc, #48]	; (80055b0 <TIM_Base_SetConfig+0xe4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d00b      	beq.n	800559a <TIM_Base_SetConfig+0xce>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a0d      	ldr	r2, [pc, #52]	; (80055bc <TIM_Base_SetConfig+0xf0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d007      	beq.n	800559a <TIM_Base_SetConfig+0xce>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a0c      	ldr	r2, [pc, #48]	; (80055c0 <TIM_Base_SetConfig+0xf4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d003      	beq.n	800559a <TIM_Base_SetConfig+0xce>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a0b      	ldr	r2, [pc, #44]	; (80055c4 <TIM_Base_SetConfig+0xf8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d103      	bne.n	80055a2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	691a      	ldr	r2, [r3, #16]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	615a      	str	r2, [r3, #20]
}
 80055a8:	46c0      	nop			; (mov r8, r8)
 80055aa:	46bd      	mov	sp, r7
 80055ac:	b004      	add	sp, #16
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40012c00 	.word	0x40012c00
 80055b4:	40000400 	.word	0x40000400
 80055b8:	40002000 	.word	0x40002000
 80055bc:	40014000 	.word	0x40014000
 80055c0:	40014400 	.word	0x40014400
 80055c4:	40014800 	.word	0x40014800
 80055c8:	fffffcff 	.word	0xfffffcff

080055cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	2201      	movs	r2, #1
 80055dc:	4393      	bics	r3, r2
 80055de:	001a      	movs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2270      	movs	r2, #112	; 0x70
 80055fa:	4393      	bics	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2203      	movs	r2, #3
 8005602:	4393      	bics	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	4313      	orrs	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	2202      	movs	r2, #2
 8005614:	4393      	bics	r3, r2
 8005616:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	4313      	orrs	r3, r2
 8005620:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a27      	ldr	r2, [pc, #156]	; (80056c4 <TIM_OC1_SetConfig+0xf8>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d00b      	beq.n	8005642 <TIM_OC1_SetConfig+0x76>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a26      	ldr	r2, [pc, #152]	; (80056c8 <TIM_OC1_SetConfig+0xfc>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d007      	beq.n	8005642 <TIM_OC1_SetConfig+0x76>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a25      	ldr	r2, [pc, #148]	; (80056cc <TIM_OC1_SetConfig+0x100>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d003      	beq.n	8005642 <TIM_OC1_SetConfig+0x76>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a24      	ldr	r2, [pc, #144]	; (80056d0 <TIM_OC1_SetConfig+0x104>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d10c      	bne.n	800565c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2208      	movs	r2, #8
 8005646:	4393      	bics	r3, r2
 8005648:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	4313      	orrs	r3, r2
 8005652:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2204      	movs	r2, #4
 8005658:	4393      	bics	r3, r2
 800565a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a19      	ldr	r2, [pc, #100]	; (80056c4 <TIM_OC1_SetConfig+0xf8>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d00b      	beq.n	800567c <TIM_OC1_SetConfig+0xb0>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a18      	ldr	r2, [pc, #96]	; (80056c8 <TIM_OC1_SetConfig+0xfc>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d007      	beq.n	800567c <TIM_OC1_SetConfig+0xb0>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a17      	ldr	r2, [pc, #92]	; (80056cc <TIM_OC1_SetConfig+0x100>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d003      	beq.n	800567c <TIM_OC1_SetConfig+0xb0>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a16      	ldr	r2, [pc, #88]	; (80056d0 <TIM_OC1_SetConfig+0x104>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d111      	bne.n	80056a0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	4a15      	ldr	r2, [pc, #84]	; (80056d4 <TIM_OC1_SetConfig+0x108>)
 8005680:	4013      	ands	r3, r2
 8005682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4a14      	ldr	r2, [pc, #80]	; (80056d8 <TIM_OC1_SetConfig+0x10c>)
 8005688:	4013      	ands	r3, r2
 800568a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	4313      	orrs	r3, r2
 8005694:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	4313      	orrs	r3, r2
 800569e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	621a      	str	r2, [r3, #32]
}
 80056ba:	46c0      	nop			; (mov r8, r8)
 80056bc:	46bd      	mov	sp, r7
 80056be:	b006      	add	sp, #24
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	46c0      	nop			; (mov r8, r8)
 80056c4:	40012c00 	.word	0x40012c00
 80056c8:	40014000 	.word	0x40014000
 80056cc:	40014400 	.word	0x40014400
 80056d0:	40014800 	.word	0x40014800
 80056d4:	fffffeff 	.word	0xfffffeff
 80056d8:	fffffdff 	.word	0xfffffdff

080056dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	2210      	movs	r2, #16
 80056ec:	4393      	bics	r3, r2
 80056ee:	001a      	movs	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4a2e      	ldr	r2, [pc, #184]	; (80057c4 <TIM_OC2_SetConfig+0xe8>)
 800570a:	4013      	ands	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4a2d      	ldr	r2, [pc, #180]	; (80057c8 <TIM_OC2_SetConfig+0xec>)
 8005712:	4013      	ands	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	021b      	lsls	r3, r3, #8
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2220      	movs	r2, #32
 8005726:	4393      	bics	r3, r2
 8005728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a24      	ldr	r2, [pc, #144]	; (80057cc <TIM_OC2_SetConfig+0xf0>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d10d      	bne.n	800575a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2280      	movs	r2, #128	; 0x80
 8005742:	4393      	bics	r3, r2
 8005744:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	011b      	lsls	r3, r3, #4
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	4313      	orrs	r3, r2
 8005750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2240      	movs	r2, #64	; 0x40
 8005756:	4393      	bics	r3, r2
 8005758:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a1b      	ldr	r2, [pc, #108]	; (80057cc <TIM_OC2_SetConfig+0xf0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00b      	beq.n	800577a <TIM_OC2_SetConfig+0x9e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a1a      	ldr	r2, [pc, #104]	; (80057d0 <TIM_OC2_SetConfig+0xf4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d007      	beq.n	800577a <TIM_OC2_SetConfig+0x9e>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a19      	ldr	r2, [pc, #100]	; (80057d4 <TIM_OC2_SetConfig+0xf8>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d003      	beq.n	800577a <TIM_OC2_SetConfig+0x9e>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a18      	ldr	r2, [pc, #96]	; (80057d8 <TIM_OC2_SetConfig+0xfc>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d113      	bne.n	80057a2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	4a17      	ldr	r2, [pc, #92]	; (80057dc <TIM_OC2_SetConfig+0x100>)
 800577e:	4013      	ands	r3, r2
 8005780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	4a16      	ldr	r2, [pc, #88]	; (80057e0 <TIM_OC2_SetConfig+0x104>)
 8005786:	4013      	ands	r3, r2
 8005788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	621a      	str	r2, [r3, #32]
}
 80057bc:	46c0      	nop			; (mov r8, r8)
 80057be:	46bd      	mov	sp, r7
 80057c0:	b006      	add	sp, #24
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	ffff8fff 	.word	0xffff8fff
 80057c8:	fffffcff 	.word	0xfffffcff
 80057cc:	40012c00 	.word	0x40012c00
 80057d0:	40014000 	.word	0x40014000
 80057d4:	40014400 	.word	0x40014400
 80057d8:	40014800 	.word	0x40014800
 80057dc:	fffffbff 	.word	0xfffffbff
 80057e0:	fffff7ff 	.word	0xfffff7ff

080057e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	4a35      	ldr	r2, [pc, #212]	; (80058c8 <TIM_OC3_SetConfig+0xe4>)
 80057f4:	401a      	ands	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2270      	movs	r2, #112	; 0x70
 8005810:	4393      	bics	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2203      	movs	r2, #3
 8005818:	4393      	bics	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	4a28      	ldr	r2, [pc, #160]	; (80058cc <TIM_OC3_SetConfig+0xe8>)
 800582a:	4013      	ands	r3, r2
 800582c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	021b      	lsls	r3, r3, #8
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a24      	ldr	r2, [pc, #144]	; (80058d0 <TIM_OC3_SetConfig+0xec>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d10d      	bne.n	800585e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	4a23      	ldr	r2, [pc, #140]	; (80058d4 <TIM_OC3_SetConfig+0xf0>)
 8005846:	4013      	ands	r3, r2
 8005848:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	021b      	lsls	r3, r3, #8
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	4313      	orrs	r3, r2
 8005854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	4a1f      	ldr	r2, [pc, #124]	; (80058d8 <TIM_OC3_SetConfig+0xf4>)
 800585a:	4013      	ands	r3, r2
 800585c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a1b      	ldr	r2, [pc, #108]	; (80058d0 <TIM_OC3_SetConfig+0xec>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00b      	beq.n	800587e <TIM_OC3_SetConfig+0x9a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a1c      	ldr	r2, [pc, #112]	; (80058dc <TIM_OC3_SetConfig+0xf8>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d007      	beq.n	800587e <TIM_OC3_SetConfig+0x9a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a1b      	ldr	r2, [pc, #108]	; (80058e0 <TIM_OC3_SetConfig+0xfc>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d003      	beq.n	800587e <TIM_OC3_SetConfig+0x9a>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a1a      	ldr	r2, [pc, #104]	; (80058e4 <TIM_OC3_SetConfig+0x100>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d113      	bne.n	80058a6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	4a19      	ldr	r2, [pc, #100]	; (80058e8 <TIM_OC3_SetConfig+0x104>)
 8005882:	4013      	ands	r3, r2
 8005884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	4a18      	ldr	r2, [pc, #96]	; (80058ec <TIM_OC3_SetConfig+0x108>)
 800588a:	4013      	ands	r3, r2
 800588c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	011b      	lsls	r3, r3, #4
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	621a      	str	r2, [r3, #32]
}
 80058c0:	46c0      	nop			; (mov r8, r8)
 80058c2:	46bd      	mov	sp, r7
 80058c4:	b006      	add	sp, #24
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	fffffeff 	.word	0xfffffeff
 80058cc:	fffffdff 	.word	0xfffffdff
 80058d0:	40012c00 	.word	0x40012c00
 80058d4:	fffff7ff 	.word	0xfffff7ff
 80058d8:	fffffbff 	.word	0xfffffbff
 80058dc:	40014000 	.word	0x40014000
 80058e0:	40014400 	.word	0x40014400
 80058e4:	40014800 	.word	0x40014800
 80058e8:	ffffefff 	.word	0xffffefff
 80058ec:	ffffdfff 	.word	0xffffdfff

080058f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	4a28      	ldr	r2, [pc, #160]	; (80059a0 <TIM_OC4_SetConfig+0xb0>)
 8005900:	401a      	ands	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4a22      	ldr	r2, [pc, #136]	; (80059a4 <TIM_OC4_SetConfig+0xb4>)
 800591c:	4013      	ands	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4a21      	ldr	r2, [pc, #132]	; (80059a8 <TIM_OC4_SetConfig+0xb8>)
 8005924:	4013      	ands	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	021b      	lsls	r3, r3, #8
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4313      	orrs	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	4a1d      	ldr	r2, [pc, #116]	; (80059ac <TIM_OC4_SetConfig+0xbc>)
 8005938:	4013      	ands	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	031b      	lsls	r3, r3, #12
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	4313      	orrs	r3, r2
 8005946:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a19      	ldr	r2, [pc, #100]	; (80059b0 <TIM_OC4_SetConfig+0xc0>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d00b      	beq.n	8005968 <TIM_OC4_SetConfig+0x78>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a18      	ldr	r2, [pc, #96]	; (80059b4 <TIM_OC4_SetConfig+0xc4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d007      	beq.n	8005968 <TIM_OC4_SetConfig+0x78>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a17      	ldr	r2, [pc, #92]	; (80059b8 <TIM_OC4_SetConfig+0xc8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d003      	beq.n	8005968 <TIM_OC4_SetConfig+0x78>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a16      	ldr	r2, [pc, #88]	; (80059bc <TIM_OC4_SetConfig+0xcc>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d109      	bne.n	800597c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	4a15      	ldr	r2, [pc, #84]	; (80059c0 <TIM_OC4_SetConfig+0xd0>)
 800596c:	4013      	ands	r3, r2
 800596e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	019b      	lsls	r3, r3, #6
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	621a      	str	r2, [r3, #32]
}
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	46bd      	mov	sp, r7
 800599a:	b006      	add	sp, #24
 800599c:	bd80      	pop	{r7, pc}
 800599e:	46c0      	nop			; (mov r8, r8)
 80059a0:	ffffefff 	.word	0xffffefff
 80059a4:	ffff8fff 	.word	0xffff8fff
 80059a8:	fffffcff 	.word	0xfffffcff
 80059ac:	ffffdfff 	.word	0xffffdfff
 80059b0:	40012c00 	.word	0x40012c00
 80059b4:	40014000 	.word	0x40014000
 80059b8:	40014400 	.word	0x40014400
 80059bc:	40014800 	.word	0x40014800
 80059c0:	ffffbfff 	.word	0xffffbfff

080059c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	2201      	movs	r2, #1
 80059dc:	4393      	bics	r3, r2
 80059de:	001a      	movs	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	22f0      	movs	r2, #240	; 0xf0
 80059ee:	4393      	bics	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	220a      	movs	r2, #10
 8005a00:	4393      	bics	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	621a      	str	r2, [r3, #32]
}
 8005a18:	46c0      	nop			; (mov r8, r8)
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	b006      	add	sp, #24
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	2210      	movs	r2, #16
 8005a32:	4393      	bics	r3, r2
 8005a34:	001a      	movs	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	4a0d      	ldr	r2, [pc, #52]	; (8005a80 <TIM_TI2_ConfigInputStage+0x60>)
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	031b      	lsls	r3, r3, #12
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	22a0      	movs	r2, #160	; 0xa0
 8005a5c:	4393      	bics	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	011b      	lsls	r3, r3, #4
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	621a      	str	r2, [r3, #32]
}
 8005a76:	46c0      	nop			; (mov r8, r8)
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	b006      	add	sp, #24
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	46c0      	nop			; (mov r8, r8)
 8005a80:	ffff0fff 	.word	0xffff0fff

08005a84 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2270      	movs	r2, #112	; 0x70
 8005a98:	4393      	bics	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	2207      	movs	r2, #7
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	609a      	str	r2, [r3, #8]
}
 8005aae:	46c0      	nop			; (mov r8, r8)
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	b004      	add	sp, #16
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	4a09      	ldr	r2, [pc, #36]	; (8005af4 <TIM_ETR_SetConfig+0x3c>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	021a      	lsls	r2, r3, #8
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	431a      	orrs	r2, r3
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	609a      	str	r2, [r3, #8]
}
 8005aec:	46c0      	nop			; (mov r8, r8)
 8005aee:	46bd      	mov	sp, r7
 8005af0:	b006      	add	sp, #24
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	ffff00ff 	.word	0xffff00ff

08005af8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	223c      	movs	r2, #60	; 0x3c
 8005b06:	5c9b      	ldrb	r3, [r3, r2]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d101      	bne.n	8005b10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	e047      	b.n	8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	223c      	movs	r2, #60	; 0x3c
 8005b14:	2101      	movs	r1, #1
 8005b16:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	223d      	movs	r2, #61	; 0x3d
 8005b1c:	2102      	movs	r1, #2
 8005b1e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2270      	movs	r2, #112	; 0x70
 8005b34:	4393      	bics	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a16      	ldr	r2, [pc, #88]	; (8005ba8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d00f      	beq.n	8005b74 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	2380      	movs	r3, #128	; 0x80
 8005b5a:	05db      	lsls	r3, r3, #23
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d009      	beq.n	8005b74 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a11      	ldr	r2, [pc, #68]	; (8005bac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d004      	beq.n	8005b74 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a10      	ldr	r2, [pc, #64]	; (8005bb0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d10c      	bne.n	8005b8e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2280      	movs	r2, #128	; 0x80
 8005b78:	4393      	bics	r3, r2
 8005b7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	223d      	movs	r2, #61	; 0x3d
 8005b92:	2101      	movs	r1, #1
 8005b94:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	223c      	movs	r2, #60	; 0x3c
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	b004      	add	sp, #16
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	40012c00 	.word	0x40012c00
 8005bac:	40000400 	.word	0x40000400
 8005bb0:	40014000 	.word	0x40014000

08005bb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e044      	b.n	8005c50 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d107      	bne.n	8005bde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2274      	movs	r2, #116	; 0x74
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	0018      	movs	r0, r3
 8005bda:	f7fd f9c3 	bl	8002f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2224      	movs	r2, #36	; 0x24
 8005be2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2101      	movs	r1, #1
 8005bf0:	438a      	bics	r2, r1
 8005bf2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f000 fbce 	bl	8006398 <UART_SetConfig>
 8005bfc:	0003      	movs	r3, r0
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d101      	bne.n	8005c06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e024      	b.n	8005c50 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	0018      	movs	r0, r3
 8005c12:	f000 fd01 	bl	8006618 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	490d      	ldr	r1, [pc, #52]	; (8005c58 <HAL_UART_Init+0xa4>)
 8005c22:	400a      	ands	r2, r1
 8005c24:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	212a      	movs	r1, #42	; 0x2a
 8005c32:	438a      	bics	r2, r1
 8005c34:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2101      	movs	r1, #1
 8005c42:	430a      	orrs	r2, r1
 8005c44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f000 fd99 	bl	8006780 <UART_CheckIdleState>
 8005c4e:	0003      	movs	r3, r0
}
 8005c50:	0018      	movs	r0, r3
 8005c52:	46bd      	mov	sp, r7
 8005c54:	b002      	add	sp, #8
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	ffffb7ff 	.word	0xffffb7ff

08005c5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08a      	sub	sp, #40	; 0x28
 8005c60:	af02      	add	r7, sp, #8
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	603b      	str	r3, [r7, #0]
 8005c68:	1dbb      	adds	r3, r7, #6
 8005c6a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d000      	beq.n	8005c76 <HAL_UART_Transmit+0x1a>
 8005c74:	e096      	b.n	8005da4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <HAL_UART_Transmit+0x28>
 8005c7c:	1dbb      	adds	r3, r7, #6
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e08e      	b.n	8005da6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	2380      	movs	r3, #128	; 0x80
 8005c8e:	015b      	lsls	r3, r3, #5
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d109      	bne.n	8005ca8 <HAL_UART_Transmit+0x4c>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d105      	bne.n	8005ca8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	d001      	beq.n	8005ca8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e07e      	b.n	8005da6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2274      	movs	r2, #116	; 0x74
 8005cac:	5c9b      	ldrb	r3, [r3, r2]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d101      	bne.n	8005cb6 <HAL_UART_Transmit+0x5a>
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	e077      	b.n	8005da6 <HAL_UART_Transmit+0x14a>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2274      	movs	r2, #116	; 0x74
 8005cba:	2101      	movs	r1, #1
 8005cbc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2280      	movs	r2, #128	; 0x80
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2221      	movs	r2, #33	; 0x21
 8005cca:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ccc:	f7fd fb58 	bl	8003380 <HAL_GetTick>
 8005cd0:	0003      	movs	r3, r0
 8005cd2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	1dba      	adds	r2, r7, #6
 8005cd8:	2150      	movs	r1, #80	; 0x50
 8005cda:	8812      	ldrh	r2, [r2, #0]
 8005cdc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	1dba      	adds	r2, r7, #6
 8005ce2:	2152      	movs	r1, #82	; 0x52
 8005ce4:	8812      	ldrh	r2, [r2, #0]
 8005ce6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	2380      	movs	r3, #128	; 0x80
 8005cee:	015b      	lsls	r3, r3, #5
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d108      	bne.n	8005d06 <HAL_UART_Transmit+0xaa>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d104      	bne.n	8005d06 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	61bb      	str	r3, [r7, #24]
 8005d04:	e003      	b.n	8005d0e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2274      	movs	r2, #116	; 0x74
 8005d12:	2100      	movs	r1, #0
 8005d14:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005d16:	e02d      	b.n	8005d74 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	0013      	movs	r3, r2
 8005d22:	2200      	movs	r2, #0
 8005d24:	2180      	movs	r1, #128	; 0x80
 8005d26:	f000 fd73 	bl	8006810 <UART_WaitOnFlagUntilTimeout>
 8005d2a:	1e03      	subs	r3, r0, #0
 8005d2c:	d001      	beq.n	8005d32 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e039      	b.n	8005da6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10b      	bne.n	8005d50 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	881a      	ldrh	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	05d2      	lsls	r2, r2, #23
 8005d42:	0dd2      	lsrs	r2, r2, #23
 8005d44:	b292      	uxth	r2, r2
 8005d46:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	3302      	adds	r3, #2
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	e008      	b.n	8005d62 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	781a      	ldrb	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	b292      	uxth	r2, r2
 8005d5a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2252      	movs	r2, #82	; 0x52
 8005d66:	5a9b      	ldrh	r3, [r3, r2]
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b299      	uxth	r1, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2252      	movs	r2, #82	; 0x52
 8005d72:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2252      	movs	r2, #82	; 0x52
 8005d78:	5a9b      	ldrh	r3, [r3, r2]
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1cb      	bne.n	8005d18 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	0013      	movs	r3, r2
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	2140      	movs	r1, #64	; 0x40
 8005d8e:	f000 fd3f 	bl	8006810 <UART_WaitOnFlagUntilTimeout>
 8005d92:	1e03      	subs	r3, r0, #0
 8005d94:	d001      	beq.n	8005d9a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e005      	b.n	8005da6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	e000      	b.n	8005da6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005da4:	2302      	movs	r3, #2
  }
}
 8005da6:	0018      	movs	r0, r3
 8005da8:	46bd      	mov	sp, r7
 8005daa:	b008      	add	sp, #32
 8005dac:	bd80      	pop	{r7, pc}
	...

08005db0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005db0:	b590      	push	{r4, r7, lr}
 8005db2:	b0ab      	sub	sp, #172	; 0xac
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	22a4      	movs	r2, #164	; 0xa4
 8005dc0:	18b9      	adds	r1, r7, r2
 8005dc2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	20a0      	movs	r0, #160	; 0xa0
 8005dcc:	1839      	adds	r1, r7, r0
 8005dce:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	219c      	movs	r1, #156	; 0x9c
 8005dd8:	1879      	adds	r1, r7, r1
 8005dda:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ddc:	0011      	movs	r1, r2
 8005dde:	18bb      	adds	r3, r7, r2
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a99      	ldr	r2, [pc, #612]	; (8006048 <HAL_UART_IRQHandler+0x298>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	2298      	movs	r2, #152	; 0x98
 8005de8:	18bc      	adds	r4, r7, r2
 8005dea:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005dec:	18bb      	adds	r3, r7, r2
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d114      	bne.n	8005e1e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005df4:	187b      	adds	r3, r7, r1
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	d00f      	beq.n	8005e1e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005dfe:	183b      	adds	r3, r7, r0
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2220      	movs	r2, #32
 8005e04:	4013      	ands	r3, r2
 8005e06:	d00a      	beq.n	8005e1e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d100      	bne.n	8005e12 <HAL_UART_IRQHandler+0x62>
 8005e10:	e296      	b.n	8006340 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	0010      	movs	r0, r2
 8005e1a:	4798      	blx	r3
      }
      return;
 8005e1c:	e290      	b.n	8006340 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e1e:	2398      	movs	r3, #152	; 0x98
 8005e20:	18fb      	adds	r3, r7, r3
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d100      	bne.n	8005e2a <HAL_UART_IRQHandler+0x7a>
 8005e28:	e114      	b.n	8006054 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e2a:	239c      	movs	r3, #156	; 0x9c
 8005e2c:	18fb      	adds	r3, r7, r3
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2201      	movs	r2, #1
 8005e32:	4013      	ands	r3, r2
 8005e34:	d106      	bne.n	8005e44 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e36:	23a0      	movs	r3, #160	; 0xa0
 8005e38:	18fb      	adds	r3, r7, r3
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a83      	ldr	r2, [pc, #524]	; (800604c <HAL_UART_IRQHandler+0x29c>)
 8005e3e:	4013      	ands	r3, r2
 8005e40:	d100      	bne.n	8005e44 <HAL_UART_IRQHandler+0x94>
 8005e42:	e107      	b.n	8006054 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e44:	23a4      	movs	r3, #164	; 0xa4
 8005e46:	18fb      	adds	r3, r7, r3
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	d012      	beq.n	8005e76 <HAL_UART_IRQHandler+0xc6>
 8005e50:	23a0      	movs	r3, #160	; 0xa0
 8005e52:	18fb      	adds	r3, r7, r3
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	2380      	movs	r3, #128	; 0x80
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	d00b      	beq.n	8005e76 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2201      	movs	r2, #1
 8005e64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2280      	movs	r2, #128	; 0x80
 8005e6a:	589b      	ldr	r3, [r3, r2]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2180      	movs	r1, #128	; 0x80
 8005e74:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e76:	23a4      	movs	r3, #164	; 0xa4
 8005e78:	18fb      	adds	r3, r7, r3
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	4013      	ands	r3, r2
 8005e80:	d011      	beq.n	8005ea6 <HAL_UART_IRQHandler+0xf6>
 8005e82:	239c      	movs	r3, #156	; 0x9c
 8005e84:	18fb      	adds	r3, r7, r3
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	d00b      	beq.n	8005ea6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2202      	movs	r2, #2
 8005e94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2280      	movs	r2, #128	; 0x80
 8005e9a:	589b      	ldr	r3, [r3, r2]
 8005e9c:	2204      	movs	r2, #4
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2180      	movs	r1, #128	; 0x80
 8005ea4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ea6:	23a4      	movs	r3, #164	; 0xa4
 8005ea8:	18fb      	adds	r3, r7, r3
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2204      	movs	r2, #4
 8005eae:	4013      	ands	r3, r2
 8005eb0:	d011      	beq.n	8005ed6 <HAL_UART_IRQHandler+0x126>
 8005eb2:	239c      	movs	r3, #156	; 0x9c
 8005eb4:	18fb      	adds	r3, r7, r3
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	4013      	ands	r3, r2
 8005ebc:	d00b      	beq.n	8005ed6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2204      	movs	r2, #4
 8005ec4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2280      	movs	r2, #128	; 0x80
 8005eca:	589b      	ldr	r3, [r3, r2]
 8005ecc:	2202      	movs	r2, #2
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2180      	movs	r1, #128	; 0x80
 8005ed4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ed6:	23a4      	movs	r3, #164	; 0xa4
 8005ed8:	18fb      	adds	r3, r7, r3
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2208      	movs	r2, #8
 8005ede:	4013      	ands	r3, r2
 8005ee0:	d017      	beq.n	8005f12 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ee2:	23a0      	movs	r3, #160	; 0xa0
 8005ee4:	18fb      	adds	r3, r7, r3
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	4013      	ands	r3, r2
 8005eec:	d105      	bne.n	8005efa <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005eee:	239c      	movs	r3, #156	; 0x9c
 8005ef0:	18fb      	adds	r3, r7, r3
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ef8:	d00b      	beq.n	8005f12 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2208      	movs	r2, #8
 8005f00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2280      	movs	r2, #128	; 0x80
 8005f06:	589b      	ldr	r3, [r3, r2]
 8005f08:	2208      	movs	r2, #8
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2180      	movs	r1, #128	; 0x80
 8005f10:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f12:	23a4      	movs	r3, #164	; 0xa4
 8005f14:	18fb      	adds	r3, r7, r3
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	2380      	movs	r3, #128	; 0x80
 8005f1a:	011b      	lsls	r3, r3, #4
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	d013      	beq.n	8005f48 <HAL_UART_IRQHandler+0x198>
 8005f20:	23a0      	movs	r3, #160	; 0xa0
 8005f22:	18fb      	adds	r3, r7, r3
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	2380      	movs	r3, #128	; 0x80
 8005f28:	04db      	lsls	r3, r3, #19
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	d00c      	beq.n	8005f48 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2280      	movs	r2, #128	; 0x80
 8005f34:	0112      	lsls	r2, r2, #4
 8005f36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2280      	movs	r2, #128	; 0x80
 8005f3c:	589b      	ldr	r3, [r3, r2]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	431a      	orrs	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2180      	movs	r1, #128	; 0x80
 8005f46:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2280      	movs	r2, #128	; 0x80
 8005f4c:	589b      	ldr	r3, [r3, r2]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d100      	bne.n	8005f54 <HAL_UART_IRQHandler+0x1a4>
 8005f52:	e1f7      	b.n	8006344 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f54:	23a4      	movs	r3, #164	; 0xa4
 8005f56:	18fb      	adds	r3, r7, r3
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	d00e      	beq.n	8005f7e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f60:	23a0      	movs	r3, #160	; 0xa0
 8005f62:	18fb      	adds	r3, r7, r3
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2220      	movs	r2, #32
 8005f68:	4013      	ands	r3, r2
 8005f6a:	d008      	beq.n	8005f7e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d004      	beq.n	8005f7e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	0010      	movs	r0, r2
 8005f7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2280      	movs	r2, #128	; 0x80
 8005f82:	589b      	ldr	r3, [r3, r2]
 8005f84:	2194      	movs	r1, #148	; 0x94
 8005f86:	187a      	adds	r2, r7, r1
 8005f88:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	2240      	movs	r2, #64	; 0x40
 8005f92:	4013      	ands	r3, r2
 8005f94:	2b40      	cmp	r3, #64	; 0x40
 8005f96:	d004      	beq.n	8005fa2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f98:	187b      	adds	r3, r7, r1
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2228      	movs	r2, #40	; 0x28
 8005f9e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fa0:	d047      	beq.n	8006032 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	f000 fcf7 	bl	8006998 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	2240      	movs	r2, #64	; 0x40
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	2b40      	cmp	r3, #64	; 0x40
 8005fb6:	d137      	bne.n	8006028 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8005fbc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005fbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fc0:	2090      	movs	r0, #144	; 0x90
 8005fc2:	183a      	adds	r2, r7, r0
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fcc:	f383 8810 	msr	PRIMASK, r3
}
 8005fd0:	46c0      	nop			; (mov r8, r8)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2140      	movs	r1, #64	; 0x40
 8005fde:	438a      	bics	r2, r1
 8005fe0:	609a      	str	r2, [r3, #8]
 8005fe2:	183b      	adds	r3, r7, r0
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fea:	f383 8810 	msr	PRIMASK, r3
}
 8005fee:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d012      	beq.n	800601e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffc:	4a14      	ldr	r2, [pc, #80]	; (8006050 <HAL_UART_IRQHandler+0x2a0>)
 8005ffe:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006004:	0018      	movs	r0, r3
 8006006:	f7fe f8df 	bl	80041c8 <HAL_DMA_Abort_IT>
 800600a:	1e03      	subs	r3, r0, #0
 800600c:	d01a      	beq.n	8006044 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006018:	0018      	movs	r0, r3
 800601a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800601c:	e012      	b.n	8006044 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	0018      	movs	r0, r3
 8006022:	f000 f9a5 	bl	8006370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006026:	e00d      	b.n	8006044 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	0018      	movs	r0, r3
 800602c:	f000 f9a0 	bl	8006370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006030:	e008      	b.n	8006044 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	0018      	movs	r0, r3
 8006036:	f000 f99b 	bl	8006370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2280      	movs	r2, #128	; 0x80
 800603e:	2100      	movs	r1, #0
 8006040:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006042:	e17f      	b.n	8006344 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006044:	46c0      	nop			; (mov r8, r8)
    return;
 8006046:	e17d      	b.n	8006344 <HAL_UART_IRQHandler+0x594>
 8006048:	0000080f 	.word	0x0000080f
 800604c:	04000120 	.word	0x04000120
 8006050:	08006a5d 	.word	0x08006a5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006058:	2b01      	cmp	r3, #1
 800605a:	d000      	beq.n	800605e <HAL_UART_IRQHandler+0x2ae>
 800605c:	e131      	b.n	80062c2 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800605e:	23a4      	movs	r3, #164	; 0xa4
 8006060:	18fb      	adds	r3, r7, r3
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2210      	movs	r2, #16
 8006066:	4013      	ands	r3, r2
 8006068:	d100      	bne.n	800606c <HAL_UART_IRQHandler+0x2bc>
 800606a:	e12a      	b.n	80062c2 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800606c:	23a0      	movs	r3, #160	; 0xa0
 800606e:	18fb      	adds	r3, r7, r3
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2210      	movs	r2, #16
 8006074:	4013      	ands	r3, r2
 8006076:	d100      	bne.n	800607a <HAL_UART_IRQHandler+0x2ca>
 8006078:	e123      	b.n	80062c2 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2210      	movs	r2, #16
 8006080:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	2240      	movs	r2, #64	; 0x40
 800608a:	4013      	ands	r3, r2
 800608c:	2b40      	cmp	r3, #64	; 0x40
 800608e:	d000      	beq.n	8006092 <HAL_UART_IRQHandler+0x2e2>
 8006090:	e09b      	b.n	80061ca <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	217e      	movs	r1, #126	; 0x7e
 800609c:	187b      	adds	r3, r7, r1
 800609e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80060a0:	187b      	adds	r3, r7, r1
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d100      	bne.n	80060aa <HAL_UART_IRQHandler+0x2fa>
 80060a8:	e14e      	b.n	8006348 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2258      	movs	r2, #88	; 0x58
 80060ae:	5a9b      	ldrh	r3, [r3, r2]
 80060b0:	187a      	adds	r2, r7, r1
 80060b2:	8812      	ldrh	r2, [r2, #0]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d300      	bcc.n	80060ba <HAL_UART_IRQHandler+0x30a>
 80060b8:	e146      	b.n	8006348 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	187a      	adds	r2, r7, r1
 80060be:	215a      	movs	r1, #90	; 0x5a
 80060c0:	8812      	ldrh	r2, [r2, #0]
 80060c2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	2b20      	cmp	r3, #32
 80060cc:	d06e      	beq.n	80061ac <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ce:	f3ef 8310 	mrs	r3, PRIMASK
 80060d2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80060d8:	2301      	movs	r3, #1
 80060da:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060de:	f383 8810 	msr	PRIMASK, r3
}
 80060e2:	46c0      	nop			; (mov r8, r8)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	499a      	ldr	r1, [pc, #616]	; (8006358 <HAL_UART_IRQHandler+0x5a8>)
 80060f0:	400a      	ands	r2, r1
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fa:	f383 8810 	msr	PRIMASK, r3
}
 80060fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006100:	f3ef 8310 	mrs	r3, PRIMASK
 8006104:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006108:	677b      	str	r3, [r7, #116]	; 0x74
 800610a:	2301      	movs	r3, #1
 800610c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800610e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006110:	f383 8810 	msr	PRIMASK, r3
}
 8006114:	46c0      	nop			; (mov r8, r8)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2101      	movs	r1, #1
 8006122:	438a      	bics	r2, r1
 8006124:	609a      	str	r2, [r3, #8]
 8006126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006128:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800612a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800612c:	f383 8810 	msr	PRIMASK, r3
}
 8006130:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006132:	f3ef 8310 	mrs	r3, PRIMASK
 8006136:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006138:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800613a:	673b      	str	r3, [r7, #112]	; 0x70
 800613c:	2301      	movs	r3, #1
 800613e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006142:	f383 8810 	msr	PRIMASK, r3
}
 8006146:	46c0      	nop			; (mov r8, r8)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689a      	ldr	r2, [r3, #8]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2140      	movs	r1, #64	; 0x40
 8006154:	438a      	bics	r2, r1
 8006156:	609a      	str	r2, [r3, #8]
 8006158:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800615a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800615c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800615e:	f383 8810 	msr	PRIMASK, r3
}
 8006162:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2220      	movs	r2, #32
 8006168:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006170:	f3ef 8310 	mrs	r3, PRIMASK
 8006174:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006176:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006178:	66fb      	str	r3, [r7, #108]	; 0x6c
 800617a:	2301      	movs	r3, #1
 800617c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800617e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006180:	f383 8810 	msr	PRIMASK, r3
}
 8006184:	46c0      	nop			; (mov r8, r8)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2110      	movs	r1, #16
 8006192:	438a      	bics	r2, r1
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006198:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800619a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800619c:	f383 8810 	msr	PRIMASK, r3
}
 80061a0:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a6:	0018      	movs	r0, r3
 80061a8:	f7fd ffd6 	bl	8004158 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2258      	movs	r2, #88	; 0x58
 80061b0:	5a9a      	ldrh	r2, [r3, r2]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	215a      	movs	r1, #90	; 0x5a
 80061b6:	5a5b      	ldrh	r3, [r3, r1]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	b29a      	uxth	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	0011      	movs	r1, r2
 80061c2:	0018      	movs	r0, r3
 80061c4:	f000 f8dc 	bl	8006380 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061c8:	e0be      	b.n	8006348 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2258      	movs	r2, #88	; 0x58
 80061ce:	5a99      	ldrh	r1, [r3, r2]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	225a      	movs	r2, #90	; 0x5a
 80061d4:	5a9b      	ldrh	r3, [r3, r2]
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	208e      	movs	r0, #142	; 0x8e
 80061da:	183b      	adds	r3, r7, r0
 80061dc:	1a8a      	subs	r2, r1, r2
 80061de:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	225a      	movs	r2, #90	; 0x5a
 80061e4:	5a9b      	ldrh	r3, [r3, r2]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d100      	bne.n	80061ee <HAL_UART_IRQHandler+0x43e>
 80061ec:	e0ae      	b.n	800634c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80061ee:	183b      	adds	r3, r7, r0
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d100      	bne.n	80061f8 <HAL_UART_IRQHandler+0x448>
 80061f6:	e0a9      	b.n	800634c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061f8:	f3ef 8310 	mrs	r3, PRIMASK
 80061fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80061fe:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006200:	2488      	movs	r4, #136	; 0x88
 8006202:	193a      	adds	r2, r7, r4
 8006204:	6013      	str	r3, [r2, #0]
 8006206:	2301      	movs	r3, #1
 8006208:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f383 8810 	msr	PRIMASK, r3
}
 8006210:	46c0      	nop			; (mov r8, r8)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	494f      	ldr	r1, [pc, #316]	; (800635c <HAL_UART_IRQHandler+0x5ac>)
 800621e:	400a      	ands	r2, r1
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	193b      	adds	r3, r7, r4
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f383 8810 	msr	PRIMASK, r3
}
 800622e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006230:	f3ef 8310 	mrs	r3, PRIMASK
 8006234:	61bb      	str	r3, [r7, #24]
  return(result);
 8006236:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006238:	2484      	movs	r4, #132	; 0x84
 800623a:	193a      	adds	r2, r7, r4
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	2301      	movs	r3, #1
 8006240:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	f383 8810 	msr	PRIMASK, r3
}
 8006248:	46c0      	nop			; (mov r8, r8)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2101      	movs	r1, #1
 8006256:	438a      	bics	r2, r1
 8006258:	609a      	str	r2, [r3, #8]
 800625a:	193b      	adds	r3, r7, r4
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	f383 8810 	msr	PRIMASK, r3
}
 8006266:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2220      	movs	r2, #32
 800626c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800627a:	f3ef 8310 	mrs	r3, PRIMASK
 800627e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006282:	2480      	movs	r4, #128	; 0x80
 8006284:	193a      	adds	r2, r7, r4
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	2301      	movs	r3, #1
 800628a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	f383 8810 	msr	PRIMASK, r3
}
 8006292:	46c0      	nop			; (mov r8, r8)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2110      	movs	r1, #16
 80062a0:	438a      	bics	r2, r1
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	193b      	adds	r3, r7, r4
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ac:	f383 8810 	msr	PRIMASK, r3
}
 80062b0:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062b2:	183b      	adds	r3, r7, r0
 80062b4:	881a      	ldrh	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	0011      	movs	r1, r2
 80062ba:	0018      	movs	r0, r3
 80062bc:	f000 f860 	bl	8006380 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062c0:	e044      	b.n	800634c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80062c2:	23a4      	movs	r3, #164	; 0xa4
 80062c4:	18fb      	adds	r3, r7, r3
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	2380      	movs	r3, #128	; 0x80
 80062ca:	035b      	lsls	r3, r3, #13
 80062cc:	4013      	ands	r3, r2
 80062ce:	d010      	beq.n	80062f2 <HAL_UART_IRQHandler+0x542>
 80062d0:	239c      	movs	r3, #156	; 0x9c
 80062d2:	18fb      	adds	r3, r7, r3
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	2380      	movs	r3, #128	; 0x80
 80062d8:	03db      	lsls	r3, r3, #15
 80062da:	4013      	ands	r3, r2
 80062dc:	d009      	beq.n	80062f2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2280      	movs	r2, #128	; 0x80
 80062e4:	0352      	lsls	r2, r2, #13
 80062e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	0018      	movs	r0, r3
 80062ec:	f000 fbf8 	bl	8006ae0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062f0:	e02f      	b.n	8006352 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80062f2:	23a4      	movs	r3, #164	; 0xa4
 80062f4:	18fb      	adds	r3, r7, r3
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2280      	movs	r2, #128	; 0x80
 80062fa:	4013      	ands	r3, r2
 80062fc:	d00f      	beq.n	800631e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80062fe:	23a0      	movs	r3, #160	; 0xa0
 8006300:	18fb      	adds	r3, r7, r3
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2280      	movs	r2, #128	; 0x80
 8006306:	4013      	ands	r3, r2
 8006308:	d009      	beq.n	800631e <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800630e:	2b00      	cmp	r3, #0
 8006310:	d01e      	beq.n	8006350 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	0010      	movs	r0, r2
 800631a:	4798      	blx	r3
    }
    return;
 800631c:	e018      	b.n	8006350 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800631e:	23a4      	movs	r3, #164	; 0xa4
 8006320:	18fb      	adds	r3, r7, r3
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2240      	movs	r2, #64	; 0x40
 8006326:	4013      	ands	r3, r2
 8006328:	d013      	beq.n	8006352 <HAL_UART_IRQHandler+0x5a2>
 800632a:	23a0      	movs	r3, #160	; 0xa0
 800632c:	18fb      	adds	r3, r7, r3
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2240      	movs	r2, #64	; 0x40
 8006332:	4013      	ands	r3, r2
 8006334:	d00d      	beq.n	8006352 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	0018      	movs	r0, r3
 800633a:	f000 fba6 	bl	8006a8a <UART_EndTransmit_IT>
    return;
 800633e:	e008      	b.n	8006352 <HAL_UART_IRQHandler+0x5a2>
      return;
 8006340:	46c0      	nop			; (mov r8, r8)
 8006342:	e006      	b.n	8006352 <HAL_UART_IRQHandler+0x5a2>
    return;
 8006344:	46c0      	nop			; (mov r8, r8)
 8006346:	e004      	b.n	8006352 <HAL_UART_IRQHandler+0x5a2>
      return;
 8006348:	46c0      	nop			; (mov r8, r8)
 800634a:	e002      	b.n	8006352 <HAL_UART_IRQHandler+0x5a2>
      return;
 800634c:	46c0      	nop			; (mov r8, r8)
 800634e:	e000      	b.n	8006352 <HAL_UART_IRQHandler+0x5a2>
    return;
 8006350:	46c0      	nop			; (mov r8, r8)
  }

}
 8006352:	46bd      	mov	sp, r7
 8006354:	b02b      	add	sp, #172	; 0xac
 8006356:	bd90      	pop	{r4, r7, pc}
 8006358:	fffffeff 	.word	0xfffffeff
 800635c:	fffffedf 	.word	0xfffffedf

08006360 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006368:	46c0      	nop			; (mov r8, r8)
 800636a:	46bd      	mov	sp, r7
 800636c:	b002      	add	sp, #8
 800636e:	bd80      	pop	{r7, pc}

08006370 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006378:	46c0      	nop			; (mov r8, r8)
 800637a:	46bd      	mov	sp, r7
 800637c:	b002      	add	sp, #8
 800637e:	bd80      	pop	{r7, pc}

08006380 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	000a      	movs	r2, r1
 800638a:	1cbb      	adds	r3, r7, #2
 800638c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800638e:	46c0      	nop			; (mov r8, r8)
 8006390:	46bd      	mov	sp, r7
 8006392:	b002      	add	sp, #8
 8006394:	bd80      	pop	{r7, pc}
	...

08006398 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b088      	sub	sp, #32
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063a0:	231e      	movs	r3, #30
 80063a2:	18fb      	adds	r3, r7, r3
 80063a4:	2200      	movs	r2, #0
 80063a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689a      	ldr	r2, [r3, #8]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	431a      	orrs	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	431a      	orrs	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	4313      	orrs	r3, r2
 80063be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a8d      	ldr	r2, [pc, #564]	; (80065fc <UART_SetConfig+0x264>)
 80063c8:	4013      	ands	r3, r2
 80063ca:	0019      	movs	r1, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	430a      	orrs	r2, r1
 80063d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	4a88      	ldr	r2, [pc, #544]	; (8006600 <UART_SetConfig+0x268>)
 80063de:	4013      	ands	r3, r2
 80063e0:	0019      	movs	r1, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	4a7f      	ldr	r2, [pc, #508]	; (8006604 <UART_SetConfig+0x26c>)
 8006406:	4013      	ands	r3, r2
 8006408:	0019      	movs	r1, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	430a      	orrs	r2, r1
 8006412:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a7b      	ldr	r2, [pc, #492]	; (8006608 <UART_SetConfig+0x270>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d127      	bne.n	800646e <UART_SetConfig+0xd6>
 800641e:	4b7b      	ldr	r3, [pc, #492]	; (800660c <UART_SetConfig+0x274>)
 8006420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006422:	2203      	movs	r2, #3
 8006424:	4013      	ands	r3, r2
 8006426:	2b03      	cmp	r3, #3
 8006428:	d00d      	beq.n	8006446 <UART_SetConfig+0xae>
 800642a:	d81b      	bhi.n	8006464 <UART_SetConfig+0xcc>
 800642c:	2b02      	cmp	r3, #2
 800642e:	d014      	beq.n	800645a <UART_SetConfig+0xc2>
 8006430:	d818      	bhi.n	8006464 <UART_SetConfig+0xcc>
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <UART_SetConfig+0xa4>
 8006436:	2b01      	cmp	r3, #1
 8006438:	d00a      	beq.n	8006450 <UART_SetConfig+0xb8>
 800643a:	e013      	b.n	8006464 <UART_SetConfig+0xcc>
 800643c:	231f      	movs	r3, #31
 800643e:	18fb      	adds	r3, r7, r3
 8006440:	2200      	movs	r2, #0
 8006442:	701a      	strb	r2, [r3, #0]
 8006444:	e021      	b.n	800648a <UART_SetConfig+0xf2>
 8006446:	231f      	movs	r3, #31
 8006448:	18fb      	adds	r3, r7, r3
 800644a:	2202      	movs	r2, #2
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	e01c      	b.n	800648a <UART_SetConfig+0xf2>
 8006450:	231f      	movs	r3, #31
 8006452:	18fb      	adds	r3, r7, r3
 8006454:	2204      	movs	r2, #4
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	e017      	b.n	800648a <UART_SetConfig+0xf2>
 800645a:	231f      	movs	r3, #31
 800645c:	18fb      	adds	r3, r7, r3
 800645e:	2208      	movs	r2, #8
 8006460:	701a      	strb	r2, [r3, #0]
 8006462:	e012      	b.n	800648a <UART_SetConfig+0xf2>
 8006464:	231f      	movs	r3, #31
 8006466:	18fb      	adds	r3, r7, r3
 8006468:	2210      	movs	r2, #16
 800646a:	701a      	strb	r2, [r3, #0]
 800646c:	e00d      	b.n	800648a <UART_SetConfig+0xf2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a67      	ldr	r2, [pc, #412]	; (8006610 <UART_SetConfig+0x278>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d104      	bne.n	8006482 <UART_SetConfig+0xea>
 8006478:	231f      	movs	r3, #31
 800647a:	18fb      	adds	r3, r7, r3
 800647c:	2200      	movs	r2, #0
 800647e:	701a      	strb	r2, [r3, #0]
 8006480:	e003      	b.n	800648a <UART_SetConfig+0xf2>
 8006482:	231f      	movs	r3, #31
 8006484:	18fb      	adds	r3, r7, r3
 8006486:	2210      	movs	r2, #16
 8006488:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	69da      	ldr	r2, [r3, #28]
 800648e:	2380      	movs	r3, #128	; 0x80
 8006490:	021b      	lsls	r3, r3, #8
 8006492:	429a      	cmp	r2, r3
 8006494:	d15d      	bne.n	8006552 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8006496:	231f      	movs	r3, #31
 8006498:	18fb      	adds	r3, r7, r3
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	2b08      	cmp	r3, #8
 800649e:	d015      	beq.n	80064cc <UART_SetConfig+0x134>
 80064a0:	dc18      	bgt.n	80064d4 <UART_SetConfig+0x13c>
 80064a2:	2b04      	cmp	r3, #4
 80064a4:	d00d      	beq.n	80064c2 <UART_SetConfig+0x12a>
 80064a6:	dc15      	bgt.n	80064d4 <UART_SetConfig+0x13c>
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <UART_SetConfig+0x11a>
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d005      	beq.n	80064bc <UART_SetConfig+0x124>
 80064b0:	e010      	b.n	80064d4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064b2:	f7fe fdb3 	bl	800501c <HAL_RCC_GetPCLK1Freq>
 80064b6:	0003      	movs	r3, r0
 80064b8:	61bb      	str	r3, [r7, #24]
        break;
 80064ba:	e012      	b.n	80064e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064bc:	4b55      	ldr	r3, [pc, #340]	; (8006614 <UART_SetConfig+0x27c>)
 80064be:	61bb      	str	r3, [r7, #24]
        break;
 80064c0:	e00f      	b.n	80064e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064c2:	f7fe fd3d 	bl	8004f40 <HAL_RCC_GetSysClockFreq>
 80064c6:	0003      	movs	r3, r0
 80064c8:	61bb      	str	r3, [r7, #24]
        break;
 80064ca:	e00a      	b.n	80064e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064cc:	2380      	movs	r3, #128	; 0x80
 80064ce:	021b      	lsls	r3, r3, #8
 80064d0:	61bb      	str	r3, [r7, #24]
        break;
 80064d2:	e006      	b.n	80064e2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064d8:	231e      	movs	r3, #30
 80064da:	18fb      	adds	r3, r7, r3
 80064dc:	2201      	movs	r2, #1
 80064de:	701a      	strb	r2, [r3, #0]
        break;
 80064e0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d100      	bne.n	80064ea <UART_SetConfig+0x152>
 80064e8:	e07b      	b.n	80065e2 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	005a      	lsls	r2, r3, #1
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	085b      	lsrs	r3, r3, #1
 80064f4:	18d2      	adds	r2, r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	0019      	movs	r1, r3
 80064fc:	0010      	movs	r0, r2
 80064fe:	f7f9 fe17 	bl	8000130 <__udivsi3>
 8006502:	0003      	movs	r3, r0
 8006504:	b29b      	uxth	r3, r3
 8006506:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	2b0f      	cmp	r3, #15
 800650c:	d91c      	bls.n	8006548 <UART_SetConfig+0x1b0>
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	2380      	movs	r3, #128	; 0x80
 8006512:	025b      	lsls	r3, r3, #9
 8006514:	429a      	cmp	r2, r3
 8006516:	d217      	bcs.n	8006548 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	b29a      	uxth	r2, r3
 800651c:	200e      	movs	r0, #14
 800651e:	183b      	adds	r3, r7, r0
 8006520:	210f      	movs	r1, #15
 8006522:	438a      	bics	r2, r1
 8006524:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	085b      	lsrs	r3, r3, #1
 800652a:	b29b      	uxth	r3, r3
 800652c:	2207      	movs	r2, #7
 800652e:	4013      	ands	r3, r2
 8006530:	b299      	uxth	r1, r3
 8006532:	183b      	adds	r3, r7, r0
 8006534:	183a      	adds	r2, r7, r0
 8006536:	8812      	ldrh	r2, [r2, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	183a      	adds	r2, r7, r0
 8006542:	8812      	ldrh	r2, [r2, #0]
 8006544:	60da      	str	r2, [r3, #12]
 8006546:	e04c      	b.n	80065e2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006548:	231e      	movs	r3, #30
 800654a:	18fb      	adds	r3, r7, r3
 800654c:	2201      	movs	r2, #1
 800654e:	701a      	strb	r2, [r3, #0]
 8006550:	e047      	b.n	80065e2 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006552:	231f      	movs	r3, #31
 8006554:	18fb      	adds	r3, r7, r3
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b08      	cmp	r3, #8
 800655a:	d015      	beq.n	8006588 <UART_SetConfig+0x1f0>
 800655c:	dc18      	bgt.n	8006590 <UART_SetConfig+0x1f8>
 800655e:	2b04      	cmp	r3, #4
 8006560:	d00d      	beq.n	800657e <UART_SetConfig+0x1e6>
 8006562:	dc15      	bgt.n	8006590 <UART_SetConfig+0x1f8>
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <UART_SetConfig+0x1d6>
 8006568:	2b02      	cmp	r3, #2
 800656a:	d005      	beq.n	8006578 <UART_SetConfig+0x1e0>
 800656c:	e010      	b.n	8006590 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800656e:	f7fe fd55 	bl	800501c <HAL_RCC_GetPCLK1Freq>
 8006572:	0003      	movs	r3, r0
 8006574:	61bb      	str	r3, [r7, #24]
        break;
 8006576:	e012      	b.n	800659e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006578:	4b26      	ldr	r3, [pc, #152]	; (8006614 <UART_SetConfig+0x27c>)
 800657a:	61bb      	str	r3, [r7, #24]
        break;
 800657c:	e00f      	b.n	800659e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800657e:	f7fe fcdf 	bl	8004f40 <HAL_RCC_GetSysClockFreq>
 8006582:	0003      	movs	r3, r0
 8006584:	61bb      	str	r3, [r7, #24]
        break;
 8006586:	e00a      	b.n	800659e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006588:	2380      	movs	r3, #128	; 0x80
 800658a:	021b      	lsls	r3, r3, #8
 800658c:	61bb      	str	r3, [r7, #24]
        break;
 800658e:	e006      	b.n	800659e <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8006590:	2300      	movs	r3, #0
 8006592:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006594:	231e      	movs	r3, #30
 8006596:	18fb      	adds	r3, r7, r3
 8006598:	2201      	movs	r2, #1
 800659a:	701a      	strb	r2, [r3, #0]
        break;
 800659c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d01e      	beq.n	80065e2 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	085a      	lsrs	r2, r3, #1
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	18d2      	adds	r2, r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	0019      	movs	r1, r3
 80065b4:	0010      	movs	r0, r2
 80065b6:	f7f9 fdbb 	bl	8000130 <__udivsi3>
 80065ba:	0003      	movs	r3, r0
 80065bc:	b29b      	uxth	r3, r3
 80065be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	2b0f      	cmp	r3, #15
 80065c4:	d909      	bls.n	80065da <UART_SetConfig+0x242>
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	2380      	movs	r3, #128	; 0x80
 80065ca:	025b      	lsls	r3, r3, #9
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d204      	bcs.n	80065da <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	60da      	str	r2, [r3, #12]
 80065d8:	e003      	b.n	80065e2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80065da:	231e      	movs	r3, #30
 80065dc:	18fb      	adds	r3, r7, r3
 80065de:	2201      	movs	r2, #1
 80065e0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80065ee:	231e      	movs	r3, #30
 80065f0:	18fb      	adds	r3, r7, r3
 80065f2:	781b      	ldrb	r3, [r3, #0]
}
 80065f4:	0018      	movs	r0, r3
 80065f6:	46bd      	mov	sp, r7
 80065f8:	b008      	add	sp, #32
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	ffff69f3 	.word	0xffff69f3
 8006600:	ffffcfff 	.word	0xffffcfff
 8006604:	fffff4ff 	.word	0xfffff4ff
 8006608:	40013800 	.word	0x40013800
 800660c:	40021000 	.word	0x40021000
 8006610:	40004400 	.word	0x40004400
 8006614:	007a1200 	.word	0x007a1200

08006618 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006624:	2201      	movs	r2, #1
 8006626:	4013      	ands	r3, r2
 8006628:	d00b      	beq.n	8006642 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	4a4a      	ldr	r2, [pc, #296]	; (800675c <UART_AdvFeatureConfig+0x144>)
 8006632:	4013      	ands	r3, r2
 8006634:	0019      	movs	r1, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	2202      	movs	r2, #2
 8006648:	4013      	ands	r3, r2
 800664a:	d00b      	beq.n	8006664 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	4a43      	ldr	r2, [pc, #268]	; (8006760 <UART_AdvFeatureConfig+0x148>)
 8006654:	4013      	ands	r3, r2
 8006656:	0019      	movs	r1, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006668:	2204      	movs	r2, #4
 800666a:	4013      	ands	r3, r2
 800666c:	d00b      	beq.n	8006686 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	4a3b      	ldr	r2, [pc, #236]	; (8006764 <UART_AdvFeatureConfig+0x14c>)
 8006676:	4013      	ands	r3, r2
 8006678:	0019      	movs	r1, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668a:	2208      	movs	r2, #8
 800668c:	4013      	ands	r3, r2
 800668e:	d00b      	beq.n	80066a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	4a34      	ldr	r2, [pc, #208]	; (8006768 <UART_AdvFeatureConfig+0x150>)
 8006698:	4013      	ands	r3, r2
 800669a:	0019      	movs	r1, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	430a      	orrs	r2, r1
 80066a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ac:	2210      	movs	r2, #16
 80066ae:	4013      	ands	r3, r2
 80066b0:	d00b      	beq.n	80066ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	4a2c      	ldr	r2, [pc, #176]	; (800676c <UART_AdvFeatureConfig+0x154>)
 80066ba:	4013      	ands	r3, r2
 80066bc:	0019      	movs	r1, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	2220      	movs	r2, #32
 80066d0:	4013      	ands	r3, r2
 80066d2:	d00b      	beq.n	80066ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	4a25      	ldr	r2, [pc, #148]	; (8006770 <UART_AdvFeatureConfig+0x158>)
 80066dc:	4013      	ands	r3, r2
 80066de:	0019      	movs	r1, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	430a      	orrs	r2, r1
 80066ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f0:	2240      	movs	r2, #64	; 0x40
 80066f2:	4013      	ands	r3, r2
 80066f4:	d01d      	beq.n	8006732 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	4a1d      	ldr	r2, [pc, #116]	; (8006774 <UART_AdvFeatureConfig+0x15c>)
 80066fe:	4013      	ands	r3, r2
 8006700:	0019      	movs	r1, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006712:	2380      	movs	r3, #128	; 0x80
 8006714:	035b      	lsls	r3, r3, #13
 8006716:	429a      	cmp	r2, r3
 8006718:	d10b      	bne.n	8006732 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	4a15      	ldr	r2, [pc, #84]	; (8006778 <UART_AdvFeatureConfig+0x160>)
 8006722:	4013      	ands	r3, r2
 8006724:	0019      	movs	r1, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006736:	2280      	movs	r2, #128	; 0x80
 8006738:	4013      	ands	r3, r2
 800673a:	d00b      	beq.n	8006754 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	4a0e      	ldr	r2, [pc, #56]	; (800677c <UART_AdvFeatureConfig+0x164>)
 8006744:	4013      	ands	r3, r2
 8006746:	0019      	movs	r1, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	430a      	orrs	r2, r1
 8006752:	605a      	str	r2, [r3, #4]
  }
}
 8006754:	46c0      	nop			; (mov r8, r8)
 8006756:	46bd      	mov	sp, r7
 8006758:	b002      	add	sp, #8
 800675a:	bd80      	pop	{r7, pc}
 800675c:	fffdffff 	.word	0xfffdffff
 8006760:	fffeffff 	.word	0xfffeffff
 8006764:	fffbffff 	.word	0xfffbffff
 8006768:	ffff7fff 	.word	0xffff7fff
 800676c:	ffffefff 	.word	0xffffefff
 8006770:	ffffdfff 	.word	0xffffdfff
 8006774:	ffefffff 	.word	0xffefffff
 8006778:	ff9fffff 	.word	0xff9fffff
 800677c:	fff7ffff 	.word	0xfff7ffff

08006780 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af02      	add	r7, sp, #8
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2280      	movs	r2, #128	; 0x80
 800678c:	2100      	movs	r1, #0
 800678e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006790:	f7fc fdf6 	bl	8003380 <HAL_GetTick>
 8006794:	0003      	movs	r3, r0
 8006796:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2208      	movs	r2, #8
 80067a0:	4013      	ands	r3, r2
 80067a2:	2b08      	cmp	r3, #8
 80067a4:	d10c      	bne.n	80067c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2280      	movs	r2, #128	; 0x80
 80067aa:	0391      	lsls	r1, r2, #14
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	4a17      	ldr	r2, [pc, #92]	; (800680c <UART_CheckIdleState+0x8c>)
 80067b0:	9200      	str	r2, [sp, #0]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f000 f82c 	bl	8006810 <UART_WaitOnFlagUntilTimeout>
 80067b8:	1e03      	subs	r3, r0, #0
 80067ba:	d001      	beq.n	80067c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e021      	b.n	8006804 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2204      	movs	r2, #4
 80067c8:	4013      	ands	r3, r2
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	d10c      	bne.n	80067e8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2280      	movs	r2, #128	; 0x80
 80067d2:	03d1      	lsls	r1, r2, #15
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	4a0d      	ldr	r2, [pc, #52]	; (800680c <UART_CheckIdleState+0x8c>)
 80067d8:	9200      	str	r2, [sp, #0]
 80067da:	2200      	movs	r2, #0
 80067dc:	f000 f818 	bl	8006810 <UART_WaitOnFlagUntilTimeout>
 80067e0:	1e03      	subs	r3, r0, #0
 80067e2:	d001      	beq.n	80067e8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e00d      	b.n	8006804 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2220      	movs	r2, #32
 80067ec:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2220      	movs	r2, #32
 80067f2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2274      	movs	r2, #116	; 0x74
 80067fe:	2100      	movs	r1, #0
 8006800:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	0018      	movs	r0, r3
 8006806:	46bd      	mov	sp, r7
 8006808:	b004      	add	sp, #16
 800680a:	bd80      	pop	{r7, pc}
 800680c:	01ffffff 	.word	0x01ffffff

08006810 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b094      	sub	sp, #80	; 0x50
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	603b      	str	r3, [r7, #0]
 800681c:	1dfb      	adds	r3, r7, #7
 800681e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006820:	e0a3      	b.n	800696a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006822:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006824:	3301      	adds	r3, #1
 8006826:	d100      	bne.n	800682a <UART_WaitOnFlagUntilTimeout+0x1a>
 8006828:	e09f      	b.n	800696a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800682a:	f7fc fda9 	bl	8003380 <HAL_GetTick>
 800682e:	0002      	movs	r2, r0
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006836:	429a      	cmp	r2, r3
 8006838:	d302      	bcc.n	8006840 <UART_WaitOnFlagUntilTimeout+0x30>
 800683a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800683c:	2b00      	cmp	r3, #0
 800683e:	d13d      	bne.n	80068bc <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006840:	f3ef 8310 	mrs	r3, PRIMASK
 8006844:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006846:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006848:	647b      	str	r3, [r7, #68]	; 0x44
 800684a:	2301      	movs	r3, #1
 800684c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800684e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006850:	f383 8810 	msr	PRIMASK, r3
}
 8006854:	46c0      	nop			; (mov r8, r8)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	494c      	ldr	r1, [pc, #304]	; (8006994 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006862:	400a      	ands	r2, r1
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006868:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800686a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686c:	f383 8810 	msr	PRIMASK, r3
}
 8006870:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006872:	f3ef 8310 	mrs	r3, PRIMASK
 8006876:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800687a:	643b      	str	r3, [r7, #64]	; 0x40
 800687c:	2301      	movs	r3, #1
 800687e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006882:	f383 8810 	msr	PRIMASK, r3
}
 8006886:	46c0      	nop			; (mov r8, r8)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689a      	ldr	r2, [r3, #8]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2101      	movs	r1, #1
 8006894:	438a      	bics	r2, r1
 8006896:	609a      	str	r2, [r3, #8]
 8006898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800689a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800689c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800689e:	f383 8810 	msr	PRIMASK, r3
}
 80068a2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2220      	movs	r2, #32
 80068a8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2220      	movs	r2, #32
 80068ae:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2274      	movs	r2, #116	; 0x74
 80068b4:	2100      	movs	r1, #0
 80068b6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e067      	b.n	800698c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2204      	movs	r2, #4
 80068c4:	4013      	ands	r3, r2
 80068c6:	d050      	beq.n	800696a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	69da      	ldr	r2, [r3, #28]
 80068ce:	2380      	movs	r3, #128	; 0x80
 80068d0:	011b      	lsls	r3, r3, #4
 80068d2:	401a      	ands	r2, r3
 80068d4:	2380      	movs	r3, #128	; 0x80
 80068d6:	011b      	lsls	r3, r3, #4
 80068d8:	429a      	cmp	r2, r3
 80068da:	d146      	bne.n	800696a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2280      	movs	r2, #128	; 0x80
 80068e2:	0112      	lsls	r2, r2, #4
 80068e4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068e6:	f3ef 8310 	mrs	r3, PRIMASK
 80068ea:	613b      	str	r3, [r7, #16]
  return(result);
 80068ec:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068f0:	2301      	movs	r3, #1
 80068f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f383 8810 	msr	PRIMASK, r3
}
 80068fa:	46c0      	nop			; (mov r8, r8)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4923      	ldr	r1, [pc, #140]	; (8006994 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006908:	400a      	ands	r2, r1
 800690a:	601a      	str	r2, [r3, #0]
 800690c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800690e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	f383 8810 	msr	PRIMASK, r3
}
 8006916:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006918:	f3ef 8310 	mrs	r3, PRIMASK
 800691c:	61fb      	str	r3, [r7, #28]
  return(result);
 800691e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006920:	64bb      	str	r3, [r7, #72]	; 0x48
 8006922:	2301      	movs	r3, #1
 8006924:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006926:	6a3b      	ldr	r3, [r7, #32]
 8006928:	f383 8810 	msr	PRIMASK, r3
}
 800692c:	46c0      	nop			; (mov r8, r8)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2101      	movs	r1, #1
 800693a:	438a      	bics	r2, r1
 800693c:	609a      	str	r2, [r3, #8]
 800693e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	f383 8810 	msr	PRIMASK, r3
}
 8006948:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2220      	movs	r2, #32
 800694e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2220      	movs	r2, #32
 8006954:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2280      	movs	r2, #128	; 0x80
 800695a:	2120      	movs	r1, #32
 800695c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2274      	movs	r2, #116	; 0x74
 8006962:	2100      	movs	r1, #0
 8006964:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e010      	b.n	800698c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	69db      	ldr	r3, [r3, #28]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	4013      	ands	r3, r2
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	425a      	negs	r2, r3
 800697a:	4153      	adcs	r3, r2
 800697c:	b2db      	uxtb	r3, r3
 800697e:	001a      	movs	r2, r3
 8006980:	1dfb      	adds	r3, r7, #7
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	429a      	cmp	r2, r3
 8006986:	d100      	bne.n	800698a <UART_WaitOnFlagUntilTimeout+0x17a>
 8006988:	e74b      	b.n	8006822 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	0018      	movs	r0, r3
 800698e:	46bd      	mov	sp, r7
 8006990:	b014      	add	sp, #80	; 0x50
 8006992:	bd80      	pop	{r7, pc}
 8006994:	fffffe5f 	.word	0xfffffe5f

08006998 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b08e      	sub	sp, #56	; 0x38
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069a0:	f3ef 8310 	mrs	r3, PRIMASK
 80069a4:	617b      	str	r3, [r7, #20]
  return(result);
 80069a6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069a8:	637b      	str	r3, [r7, #52]	; 0x34
 80069aa:	2301      	movs	r3, #1
 80069ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	f383 8810 	msr	PRIMASK, r3
}
 80069b4:	46c0      	nop			; (mov r8, r8)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4925      	ldr	r1, [pc, #148]	; (8006a58 <UART_EndRxTransfer+0xc0>)
 80069c2:	400a      	ands	r2, r1
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	f383 8810 	msr	PRIMASK, r3
}
 80069d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069d2:	f3ef 8310 	mrs	r3, PRIMASK
 80069d6:	623b      	str	r3, [r7, #32]
  return(result);
 80069d8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069da:	633b      	str	r3, [r7, #48]	; 0x30
 80069dc:	2301      	movs	r3, #1
 80069de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	f383 8810 	msr	PRIMASK, r3
}
 80069e6:	46c0      	nop			; (mov r8, r8)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689a      	ldr	r2, [r3, #8]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2101      	movs	r1, #1
 80069f4:	438a      	bics	r2, r1
 80069f6:	609a      	str	r2, [r3, #8]
 80069f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fe:	f383 8810 	msr	PRIMASK, r3
}
 8006a02:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d118      	bne.n	8006a3e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8006a10:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a12:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a16:	2301      	movs	r3, #1
 8006a18:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f383 8810 	msr	PRIMASK, r3
}
 8006a20:	46c0      	nop			; (mov r8, r8)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2110      	movs	r1, #16
 8006a2e:	438a      	bics	r2, r1
 8006a30:	601a      	str	r2, [r3, #0]
 8006a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	f383 8810 	msr	PRIMASK, r3
}
 8006a3c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2220      	movs	r2, #32
 8006a42:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006a50:	46c0      	nop			; (mov r8, r8)
 8006a52:	46bd      	mov	sp, r7
 8006a54:	b00e      	add	sp, #56	; 0x38
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	fffffedf 	.word	0xfffffedf

08006a5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	225a      	movs	r2, #90	; 0x5a
 8006a6e:	2100      	movs	r1, #0
 8006a70:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2252      	movs	r2, #82	; 0x52
 8006a76:	2100      	movs	r1, #0
 8006a78:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	0018      	movs	r0, r3
 8006a7e:	f7ff fc77 	bl	8006370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a82:	46c0      	nop			; (mov r8, r8)
 8006a84:	46bd      	mov	sp, r7
 8006a86:	b004      	add	sp, #16
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b086      	sub	sp, #24
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a92:	f3ef 8310 	mrs	r3, PRIMASK
 8006a96:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a98:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a9a:	617b      	str	r3, [r7, #20]
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f383 8810 	msr	PRIMASK, r3
}
 8006aa6:	46c0      	nop			; (mov r8, r8)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2140      	movs	r1, #64	; 0x40
 8006ab4:	438a      	bics	r2, r1
 8006ab6:	601a      	str	r2, [r3, #0]
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	f383 8810 	msr	PRIMASK, r3
}
 8006ac2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	0018      	movs	r0, r3
 8006ad4:	f7ff fc44 	bl	8006360 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ad8:	46c0      	nop			; (mov r8, r8)
 8006ada:	46bd      	mov	sp, r7
 8006adc:	b006      	add	sp, #24
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ae8:	46c0      	nop			; (mov r8, r8)
 8006aea:	46bd      	mov	sp, r7
 8006aec:	b002      	add	sp, #8
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <gcvt>:
 8006af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006af2:	001c      	movs	r4, r3
 8006af4:	0015      	movs	r5, r2
 8006af6:	2300      	movs	r3, #0
 8006af8:	2200      	movs	r2, #0
 8006afa:	b085      	sub	sp, #20
 8006afc:	0006      	movs	r6, r0
 8006afe:	000f      	movs	r7, r1
 8006b00:	f7f9 fca2 	bl	8000448 <__aeabi_dcmplt>
 8006b04:	0023      	movs	r3, r4
 8006b06:	2800      	cmp	r0, #0
 8006b08:	d003      	beq.n	8006b12 <gcvt+0x22>
 8006b0a:	232d      	movs	r3, #45	; 0x2d
 8006b0c:	3d01      	subs	r5, #1
 8006b0e:	7023      	strb	r3, [r4, #0]
 8006b10:	1c63      	adds	r3, r4, #1
 8006b12:	2200      	movs	r2, #0
 8006b14:	4908      	ldr	r1, [pc, #32]	; (8006b38 <gcvt+0x48>)
 8006b16:	9203      	str	r2, [sp, #12]
 8006b18:	3267      	adds	r2, #103	; 0x67
 8006b1a:	9202      	str	r2, [sp, #8]
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	9500      	str	r5, [sp, #0]
 8006b20:	003b      	movs	r3, r7
 8006b22:	0032      	movs	r2, r6
 8006b24:	6808      	ldr	r0, [r1, #0]
 8006b26:	f000 f8dd 	bl	8006ce4 <_gcvt>
 8006b2a:	1e43      	subs	r3, r0, #1
 8006b2c:	4198      	sbcs	r0, r3
 8006b2e:	4240      	negs	r0, r0
 8006b30:	4004      	ands	r4, r0
 8006b32:	0020      	movs	r0, r4
 8006b34:	b005      	add	sp, #20
 8006b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b38:	20000010 	.word	0x20000010

08006b3c <__errno>:
 8006b3c:	4b01      	ldr	r3, [pc, #4]	; (8006b44 <__errno+0x8>)
 8006b3e:	6818      	ldr	r0, [r3, #0]
 8006b40:	4770      	bx	lr
 8006b42:	46c0      	nop			; (mov r8, r8)
 8006b44:	20000010 	.word	0x20000010

08006b48 <__libc_init_array>:
 8006b48:	b570      	push	{r4, r5, r6, lr}
 8006b4a:	2600      	movs	r6, #0
 8006b4c:	4d0c      	ldr	r5, [pc, #48]	; (8006b80 <__libc_init_array+0x38>)
 8006b4e:	4c0d      	ldr	r4, [pc, #52]	; (8006b84 <__libc_init_array+0x3c>)
 8006b50:	1b64      	subs	r4, r4, r5
 8006b52:	10a4      	asrs	r4, r4, #2
 8006b54:	42a6      	cmp	r6, r4
 8006b56:	d109      	bne.n	8006b6c <__libc_init_array+0x24>
 8006b58:	2600      	movs	r6, #0
 8006b5a:	f003 fcff 	bl	800a55c <_init>
 8006b5e:	4d0a      	ldr	r5, [pc, #40]	; (8006b88 <__libc_init_array+0x40>)
 8006b60:	4c0a      	ldr	r4, [pc, #40]	; (8006b8c <__libc_init_array+0x44>)
 8006b62:	1b64      	subs	r4, r4, r5
 8006b64:	10a4      	asrs	r4, r4, #2
 8006b66:	42a6      	cmp	r6, r4
 8006b68:	d105      	bne.n	8006b76 <__libc_init_array+0x2e>
 8006b6a:	bd70      	pop	{r4, r5, r6, pc}
 8006b6c:	00b3      	lsls	r3, r6, #2
 8006b6e:	58eb      	ldr	r3, [r5, r3]
 8006b70:	4798      	blx	r3
 8006b72:	3601      	adds	r6, #1
 8006b74:	e7ee      	b.n	8006b54 <__libc_init_array+0xc>
 8006b76:	00b3      	lsls	r3, r6, #2
 8006b78:	58eb      	ldr	r3, [r5, r3]
 8006b7a:	4798      	blx	r3
 8006b7c:	3601      	adds	r6, #1
 8006b7e:	e7f2      	b.n	8006b66 <__libc_init_array+0x1e>
 8006b80:	0800aa68 	.word	0x0800aa68
 8006b84:	0800aa68 	.word	0x0800aa68
 8006b88:	0800aa68 	.word	0x0800aa68
 8006b8c:	0800aa6c 	.word	0x0800aa6c

08006b90 <memset>:
 8006b90:	0003      	movs	r3, r0
 8006b92:	1882      	adds	r2, r0, r2
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d100      	bne.n	8006b9a <memset+0xa>
 8006b98:	4770      	bx	lr
 8006b9a:	7019      	strb	r1, [r3, #0]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	e7f9      	b.n	8006b94 <memset+0x4>

08006ba0 <siprintf>:
 8006ba0:	b40e      	push	{r1, r2, r3}
 8006ba2:	b500      	push	{lr}
 8006ba4:	490b      	ldr	r1, [pc, #44]	; (8006bd4 <siprintf+0x34>)
 8006ba6:	b09c      	sub	sp, #112	; 0x70
 8006ba8:	ab1d      	add	r3, sp, #116	; 0x74
 8006baa:	9002      	str	r0, [sp, #8]
 8006bac:	9006      	str	r0, [sp, #24]
 8006bae:	9107      	str	r1, [sp, #28]
 8006bb0:	9104      	str	r1, [sp, #16]
 8006bb2:	4809      	ldr	r0, [pc, #36]	; (8006bd8 <siprintf+0x38>)
 8006bb4:	4909      	ldr	r1, [pc, #36]	; (8006bdc <siprintf+0x3c>)
 8006bb6:	cb04      	ldmia	r3!, {r2}
 8006bb8:	9105      	str	r1, [sp, #20]
 8006bba:	6800      	ldr	r0, [r0, #0]
 8006bbc:	a902      	add	r1, sp, #8
 8006bbe:	9301      	str	r3, [sp, #4]
 8006bc0:	f000 fe6c 	bl	800789c <_svfiprintf_r>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	9a02      	ldr	r2, [sp, #8]
 8006bc8:	7013      	strb	r3, [r2, #0]
 8006bca:	b01c      	add	sp, #112	; 0x70
 8006bcc:	bc08      	pop	{r3}
 8006bce:	b003      	add	sp, #12
 8006bd0:	4718      	bx	r3
 8006bd2:	46c0      	nop			; (mov r8, r8)
 8006bd4:	7fffffff 	.word	0x7fffffff
 8006bd8:	20000010 	.word	0x20000010
 8006bdc:	ffff0208 	.word	0xffff0208

08006be0 <print_e>:
 8006be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006be2:	b08b      	sub	sp, #44	; 0x2c
 8006be4:	000f      	movs	r7, r1
 8006be6:	a910      	add	r1, sp, #64	; 0x40
 8006be8:	c920      	ldmia	r1!, {r5}
 8006bea:	780e      	ldrb	r6, [r1, #0]
 8006bec:	a908      	add	r1, sp, #32
 8006bee:	9104      	str	r1, [sp, #16]
 8006bf0:	a907      	add	r1, sp, #28
 8006bf2:	9103      	str	r1, [sp, #12]
 8006bf4:	a909      	add	r1, sp, #36	; 0x24
 8006bf6:	9102      	str	r1, [sp, #8]
 8006bf8:	1c69      	adds	r1, r5, #1
 8006bfa:	9101      	str	r1, [sp, #4]
 8006bfc:	2102      	movs	r1, #2
 8006bfe:	9100      	str	r1, [sp, #0]
 8006c00:	f001 f992 	bl	8007f28 <_dtoa_r>
 8006c04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c06:	4b36      	ldr	r3, [pc, #216]	; (8006ce0 <print_e+0x100>)
 8006c08:	0001      	movs	r1, r0
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d104      	bne.n	8006c18 <print_e+0x38>
 8006c0e:	0038      	movs	r0, r7
 8006c10:	f001 f8d8 	bl	8007dc4 <strcpy>
 8006c14:	b00b      	add	sp, #44	; 0x2c
 8006c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c18:	7801      	ldrb	r1, [r0, #0]
 8006c1a:	1c43      	adds	r3, r0, #1
 8006c1c:	1c7c      	adds	r4, r7, #1
 8006c1e:	7039      	strb	r1, [r7, #0]
 8006c20:	2d00      	cmp	r5, #0
 8006c22:	dd01      	ble.n	8006c28 <print_e+0x48>
 8006c24:	2101      	movs	r1, #1
 8006c26:	9112      	str	r1, [sp, #72]	; 0x48
 8006c28:	212e      	movs	r1, #46	; 0x2e
 8006c2a:	7818      	ldrb	r0, [r3, #0]
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	d001      	beq.n	8006c34 <print_e+0x54>
 8006c30:	2d00      	cmp	r5, #0
 8006c32:	dc35      	bgt.n	8006ca0 <print_e+0xc0>
 8006c34:	2e67      	cmp	r6, #103	; 0x67
 8006c36:	d04b      	beq.n	8006cd0 <print_e+0xf0>
 8006c38:	2e47      	cmp	r6, #71	; 0x47
 8006c3a:	d04b      	beq.n	8006cd4 <print_e+0xf4>
 8006c3c:	232e      	movs	r3, #46	; 0x2e
 8006c3e:	2130      	movs	r1, #48	; 0x30
 8006c40:	2d00      	cmp	r5, #0
 8006c42:	dc3a      	bgt.n	8006cba <print_e+0xda>
 8006c44:	1e53      	subs	r3, r2, #1
 8006c46:	7026      	strb	r6, [r4, #0]
 8006c48:	9309      	str	r3, [sp, #36]	; 0x24
 8006c4a:	1ca5      	adds	r5, r4, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	da43      	bge.n	8006cd8 <print_e+0xf8>
 8006c50:	232d      	movs	r3, #45	; 0x2d
 8006c52:	7063      	strb	r3, [r4, #1]
 8006c54:	3b2c      	subs	r3, #44	; 0x2c
 8006c56:	1a9b      	subs	r3, r3, r2
 8006c58:	9309      	str	r3, [sp, #36]	; 0x24
 8006c5a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006c5c:	2e63      	cmp	r6, #99	; 0x63
 8006c5e:	dd0d      	ble.n	8006c7c <print_e+0x9c>
 8006c60:	2164      	movs	r1, #100	; 0x64
 8006c62:	0030      	movs	r0, r6
 8006c64:	f7f9 faee 	bl	8000244 <__divsi3>
 8006c68:	0003      	movs	r3, r0
 8006c6a:	0002      	movs	r2, r0
 8006c6c:	2064      	movs	r0, #100	; 0x64
 8006c6e:	4240      	negs	r0, r0
 8006c70:	4358      	muls	r0, r3
 8006c72:	3230      	adds	r2, #48	; 0x30
 8006c74:	1980      	adds	r0, r0, r6
 8006c76:	1ce5      	adds	r5, r4, #3
 8006c78:	70a2      	strb	r2, [r4, #2]
 8006c7a:	9009      	str	r0, [sp, #36]	; 0x24
 8006c7c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006c7e:	210a      	movs	r1, #10
 8006c80:	0020      	movs	r0, r4
 8006c82:	f7f9 fadf 	bl	8000244 <__divsi3>
 8006c86:	0003      	movs	r3, r0
 8006c88:	0002      	movs	r2, r0
 8006c8a:	200a      	movs	r0, #10
 8006c8c:	4240      	negs	r0, r0
 8006c8e:	4358      	muls	r0, r3
 8006c90:	2300      	movs	r3, #0
 8006c92:	1900      	adds	r0, r0, r4
 8006c94:	3230      	adds	r2, #48	; 0x30
 8006c96:	3030      	adds	r0, #48	; 0x30
 8006c98:	702a      	strb	r2, [r5, #0]
 8006c9a:	7068      	strb	r0, [r5, #1]
 8006c9c:	70ab      	strb	r3, [r5, #2]
 8006c9e:	e7b9      	b.n	8006c14 <print_e+0x34>
 8006ca0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	d001      	beq.n	8006caa <print_e+0xca>
 8006ca6:	7021      	strb	r1, [r4, #0]
 8006ca8:	3401      	adds	r4, #1
 8006caa:	7818      	ldrb	r0, [r3, #0]
 8006cac:	3d01      	subs	r5, #1
 8006cae:	7020      	strb	r0, [r4, #0]
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	3401      	adds	r4, #1
 8006cb6:	9012      	str	r0, [sp, #72]	; 0x48
 8006cb8:	e7b7      	b.n	8006c2a <print_e+0x4a>
 8006cba:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	d001      	beq.n	8006cc4 <print_e+0xe4>
 8006cc0:	7023      	strb	r3, [r4, #0]
 8006cc2:	3401      	adds	r4, #1
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	7021      	strb	r1, [r4, #0]
 8006cc8:	3d01      	subs	r5, #1
 8006cca:	3401      	adds	r4, #1
 8006ccc:	9012      	str	r0, [sp, #72]	; 0x48
 8006cce:	e7b7      	b.n	8006c40 <print_e+0x60>
 8006cd0:	2665      	movs	r6, #101	; 0x65
 8006cd2:	e7b7      	b.n	8006c44 <print_e+0x64>
 8006cd4:	2645      	movs	r6, #69	; 0x45
 8006cd6:	e7b5      	b.n	8006c44 <print_e+0x64>
 8006cd8:	232b      	movs	r3, #43	; 0x2b
 8006cda:	7063      	strb	r3, [r4, #1]
 8006cdc:	e7bd      	b.n	8006c5a <print_e+0x7a>
 8006cde:	46c0      	nop			; (mov r8, r8)
 8006ce0:	0000270f 	.word	0x0000270f

08006ce4 <_gcvt>:
 8006ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ce6:	0016      	movs	r6, r2
 8006ce8:	001d      	movs	r5, r3
 8006cea:	b08d      	sub	sp, #52	; 0x34
 8006cec:	ab14      	add	r3, sp, #80	; 0x50
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	0007      	movs	r7, r0
 8006cf2:	9307      	str	r3, [sp, #28]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	0030      	movs	r0, r6
 8006cfa:	0029      	movs	r1, r5
 8006cfc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8006cfe:	f7f9 fba3 	bl	8000448 <__aeabi_dcmplt>
 8006d02:	2800      	cmp	r0, #0
 8006d04:	d002      	beq.n	8006d0c <_gcvt+0x28>
 8006d06:	2380      	movs	r3, #128	; 0x80
 8006d08:	061b      	lsls	r3, r3, #24
 8006d0a:	18ed      	adds	r5, r5, r3
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	2300      	movs	r3, #0
 8006d10:	0030      	movs	r0, r6
 8006d12:	0029      	movs	r1, r5
 8006d14:	f7f9 fb92 	bl	800043c <__aeabi_dcmpeq>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	d006      	beq.n	8006d2a <_gcvt+0x46>
 8006d1c:	2330      	movs	r3, #48	; 0x30
 8006d1e:	7023      	strb	r3, [r4, #0]
 8006d20:	2300      	movs	r3, #0
 8006d22:	7063      	strb	r3, [r4, #1]
 8006d24:	0020      	movs	r0, r4
 8006d26:	b00d      	add	sp, #52	; 0x34
 8006d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d2a:	0030      	movs	r0, r6
 8006d2c:	0029      	movs	r1, r5
 8006d2e:	4a52      	ldr	r2, [pc, #328]	; (8006e78 <_gcvt+0x194>)
 8006d30:	4b52      	ldr	r3, [pc, #328]	; (8006e7c <_gcvt+0x198>)
 8006d32:	f7f9 fb93 	bl	800045c <__aeabi_dcmple>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	d00d      	beq.n	8006d56 <_gcvt+0x72>
 8006d3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d3c:	0032      	movs	r2, r6
 8006d3e:	9302      	str	r3, [sp, #8]
 8006d40:	9b07      	ldr	r3, [sp, #28]
 8006d42:	0021      	movs	r1, r4
 8006d44:	9301      	str	r3, [sp, #4]
 8006d46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d48:	0038      	movs	r0, r7
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	002b      	movs	r3, r5
 8006d50:	f7ff ff46 	bl	8006be0 <print_e>
 8006d54:	e7e6      	b.n	8006d24 <_gcvt+0x40>
 8006d56:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006d58:	f000 fc30 	bl	80075bc <_mprec_log10>
 8006d5c:	0032      	movs	r2, r6
 8006d5e:	002b      	movs	r3, r5
 8006d60:	f7f9 fb7c 	bl	800045c <__aeabi_dcmple>
 8006d64:	2800      	cmp	r0, #0
 8006d66:	d1e8      	bne.n	8006d3a <_gcvt+0x56>
 8006d68:	ab0b      	add	r3, sp, #44	; 0x2c
 8006d6a:	9304      	str	r3, [sp, #16]
 8006d6c:	ab0a      	add	r3, sp, #40	; 0x28
 8006d6e:	9303      	str	r3, [sp, #12]
 8006d70:	ab09      	add	r3, sp, #36	; 0x24
 8006d72:	9302      	str	r3, [sp, #8]
 8006d74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d76:	0032      	movs	r2, r6
 8006d78:	9301      	str	r3, [sp, #4]
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	0038      	movs	r0, r7
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	002b      	movs	r3, r5
 8006d82:	f001 f8d1 	bl	8007f28 <_dtoa_r>
 8006d86:	4b3e      	ldr	r3, [pc, #248]	; (8006e80 <_gcvt+0x19c>)
 8006d88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d8a:	0001      	movs	r1, r0
 8006d8c:	0020      	movs	r0, r4
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d00c      	beq.n	8006dac <_gcvt+0xc8>
 8006d92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d94:	18e5      	adds	r5, r4, r3
 8006d96:	780e      	ldrb	r6, [r1, #0]
 8006d98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d9a:	1a2b      	subs	r3, r5, r0
 8006d9c:	2e00      	cmp	r6, #0
 8006d9e:	d001      	beq.n	8006da4 <_gcvt+0xc0>
 8006da0:	2a00      	cmp	r2, #0
 8006da2:	dc06      	bgt.n	8006db2 <_gcvt+0xce>
 8006da4:	2501      	movs	r5, #1
 8006da6:	2600      	movs	r6, #0
 8006da8:	46ac      	mov	ip, r5
 8006daa:	e00d      	b.n	8006dc8 <_gcvt+0xe4>
 8006dac:	f001 f80a 	bl	8007dc4 <strcpy>
 8006db0:	e7b8      	b.n	8006d24 <_gcvt+0x40>
 8006db2:	3a01      	subs	r2, #1
 8006db4:	7006      	strb	r6, [r0, #0]
 8006db6:	3101      	adds	r1, #1
 8006db8:	9209      	str	r2, [sp, #36]	; 0x24
 8006dba:	3001      	adds	r0, #1
 8006dbc:	e7eb      	b.n	8006d96 <_gcvt+0xb2>
 8006dbe:	2530      	movs	r5, #48	; 0x30
 8006dc0:	4666      	mov	r6, ip
 8006dc2:	7005      	strb	r5, [r0, #0]
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	3001      	adds	r0, #1
 8006dc8:	0005      	movs	r5, r0
 8006dca:	1e17      	subs	r7, r2, #0
 8006dcc:	dc35      	bgt.n	8006e3a <_gcvt+0x156>
 8006dce:	2e00      	cmp	r6, #0
 8006dd0:	d000      	beq.n	8006dd4 <_gcvt+0xf0>
 8006dd2:	9209      	str	r2, [sp, #36]	; 0x24
 8006dd4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006dd6:	2a00      	cmp	r2, #0
 8006dd8:	d102      	bne.n	8006de0 <_gcvt+0xfc>
 8006dda:	780a      	ldrb	r2, [r1, #0]
 8006ddc:	2a00      	cmp	r2, #0
 8006dde:	d029      	beq.n	8006e34 <_gcvt+0x150>
 8006de0:	4284      	cmp	r4, r0
 8006de2:	d102      	bne.n	8006dea <_gcvt+0x106>
 8006de4:	2230      	movs	r2, #48	; 0x30
 8006de6:	1c65      	adds	r5, r4, #1
 8006de8:	7022      	strb	r2, [r4, #0]
 8006dea:	222e      	movs	r2, #46	; 0x2e
 8006dec:	702a      	strb	r2, [r5, #0]
 8006dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006df0:	0028      	movs	r0, r5
 8006df2:	1b57      	subs	r7, r2, r5
 8006df4:	9707      	str	r7, [sp, #28]
 8006df6:	2701      	movs	r7, #1
 8006df8:	2600      	movs	r6, #0
 8006dfa:	46bc      	mov	ip, r7
 8006dfc:	9f07      	ldr	r7, [sp, #28]
 8006dfe:	42c7      	cmn	r7, r0
 8006e00:	d422      	bmi.n	8006e48 <_gcvt+0x164>
 8006e02:	2000      	movs	r0, #0
 8006e04:	4257      	negs	r7, r2
 8006e06:	4282      	cmp	r2, r0
 8006e08:	dc00      	bgt.n	8006e0c <_gcvt+0x128>
 8006e0a:	0038      	movs	r0, r7
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	182d      	adds	r5, r5, r0
 8006e10:	2000      	movs	r0, #0
 8006e12:	4282      	cmp	r2, r0
 8006e14:	dc00      	bgt.n	8006e18 <_gcvt+0x134>
 8006e16:	0038      	movs	r0, r7
 8006e18:	1810      	adds	r0, r2, r0
 8006e1a:	2e00      	cmp	r6, #0
 8006e1c:	d000      	beq.n	8006e20 <_gcvt+0x13c>
 8006e1e:	9009      	str	r0, [sp, #36]	; 0x24
 8006e20:	002a      	movs	r2, r5
 8006e22:	7808      	ldrb	r0, [r1, #0]
 8006e24:	0015      	movs	r5, r2
 8006e26:	2800      	cmp	r0, #0
 8006e28:	d001      	beq.n	8006e2e <_gcvt+0x14a>
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	dc11      	bgt.n	8006e52 <_gcvt+0x16e>
 8006e2e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006e30:	2900      	cmp	r1, #0
 8006e32:	d11d      	bne.n	8006e70 <_gcvt+0x18c>
 8006e34:	2300      	movs	r3, #0
 8006e36:	702b      	strb	r3, [r5, #0]
 8006e38:	e774      	b.n	8006d24 <_gcvt+0x40>
 8006e3a:	3a01      	subs	r2, #1
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	dcbe      	bgt.n	8006dbe <_gcvt+0xda>
 8006e40:	2e00      	cmp	r6, #0
 8006e42:	d0c7      	beq.n	8006dd4 <_gcvt+0xf0>
 8006e44:	9709      	str	r7, [sp, #36]	; 0x24
 8006e46:	e7c5      	b.n	8006dd4 <_gcvt+0xf0>
 8006e48:	2630      	movs	r6, #48	; 0x30
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	7006      	strb	r6, [r0, #0]
 8006e4e:	4666      	mov	r6, ip
 8006e50:	e7d4      	b.n	8006dfc <_gcvt+0x118>
 8006e52:	7010      	strb	r0, [r2, #0]
 8006e54:	3101      	adds	r1, #1
 8006e56:	3b01      	subs	r3, #1
 8006e58:	3201      	adds	r2, #1
 8006e5a:	e7e2      	b.n	8006e22 <_gcvt+0x13e>
 8006e5c:	700e      	strb	r6, [r1, #0]
 8006e5e:	3101      	adds	r1, #1
 8006e60:	1a68      	subs	r0, r5, r1
 8006e62:	2800      	cmp	r0, #0
 8006e64:	dcfa      	bgt.n	8006e5c <_gcvt+0x178>
 8006e66:	43dd      	mvns	r5, r3
 8006e68:	17ed      	asrs	r5, r5, #31
 8006e6a:	401d      	ands	r5, r3
 8006e6c:	1955      	adds	r5, r2, r5
 8006e6e:	e7e1      	b.n	8006e34 <_gcvt+0x150>
 8006e70:	0011      	movs	r1, r2
 8006e72:	2630      	movs	r6, #48	; 0x30
 8006e74:	189d      	adds	r5, r3, r2
 8006e76:	e7f3      	b.n	8006e60 <_gcvt+0x17c>
 8006e78:	eb1c432d 	.word	0xeb1c432d
 8006e7c:	3f1a36e2 	.word	0x3f1a36e2
 8006e80:	0000270f 	.word	0x0000270f

08006e84 <_Balloc>:
 8006e84:	b570      	push	{r4, r5, r6, lr}
 8006e86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e88:	0006      	movs	r6, r0
 8006e8a:	000c      	movs	r4, r1
 8006e8c:	2d00      	cmp	r5, #0
 8006e8e:	d10e      	bne.n	8006eae <_Balloc+0x2a>
 8006e90:	2010      	movs	r0, #16
 8006e92:	f001 fe73 	bl	8008b7c <malloc>
 8006e96:	1e02      	subs	r2, r0, #0
 8006e98:	6270      	str	r0, [r6, #36]	; 0x24
 8006e9a:	d104      	bne.n	8006ea6 <_Balloc+0x22>
 8006e9c:	2166      	movs	r1, #102	; 0x66
 8006e9e:	4b19      	ldr	r3, [pc, #100]	; (8006f04 <_Balloc+0x80>)
 8006ea0:	4819      	ldr	r0, [pc, #100]	; (8006f08 <_Balloc+0x84>)
 8006ea2:	f000 ff97 	bl	8007dd4 <__assert_func>
 8006ea6:	6045      	str	r5, [r0, #4]
 8006ea8:	6085      	str	r5, [r0, #8]
 8006eaa:	6005      	str	r5, [r0, #0]
 8006eac:	60c5      	str	r5, [r0, #12]
 8006eae:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8006eb0:	68eb      	ldr	r3, [r5, #12]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d013      	beq.n	8006ede <_Balloc+0x5a>
 8006eb6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006eb8:	00a2      	lsls	r2, r4, #2
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	189b      	adds	r3, r3, r2
 8006ebe:	6818      	ldr	r0, [r3, #0]
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	d118      	bne.n	8006ef6 <_Balloc+0x72>
 8006ec4:	2101      	movs	r1, #1
 8006ec6:	000d      	movs	r5, r1
 8006ec8:	40a5      	lsls	r5, r4
 8006eca:	1d6a      	adds	r2, r5, #5
 8006ecc:	0030      	movs	r0, r6
 8006ece:	0092      	lsls	r2, r2, #2
 8006ed0:	f000 fb8e 	bl	80075f0 <_calloc_r>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	d00c      	beq.n	8006ef2 <_Balloc+0x6e>
 8006ed8:	6044      	str	r4, [r0, #4]
 8006eda:	6085      	str	r5, [r0, #8]
 8006edc:	e00d      	b.n	8006efa <_Balloc+0x76>
 8006ede:	2221      	movs	r2, #33	; 0x21
 8006ee0:	2104      	movs	r1, #4
 8006ee2:	0030      	movs	r0, r6
 8006ee4:	f000 fb84 	bl	80075f0 <_calloc_r>
 8006ee8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006eea:	60e8      	str	r0, [r5, #12]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1e1      	bne.n	8006eb6 <_Balloc+0x32>
 8006ef2:	2000      	movs	r0, #0
 8006ef4:	bd70      	pop	{r4, r5, r6, pc}
 8006ef6:	6802      	ldr	r2, [r0, #0]
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	2300      	movs	r3, #0
 8006efc:	6103      	str	r3, [r0, #16]
 8006efe:	60c3      	str	r3, [r0, #12]
 8006f00:	e7f8      	b.n	8006ef4 <_Balloc+0x70>
 8006f02:	46c0      	nop			; (mov r8, r8)
 8006f04:	0800a77c 	.word	0x0800a77c
 8006f08:	0800a793 	.word	0x0800a793

08006f0c <_Bfree>:
 8006f0c:	b570      	push	{r4, r5, r6, lr}
 8006f0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f10:	0005      	movs	r5, r0
 8006f12:	000c      	movs	r4, r1
 8006f14:	2e00      	cmp	r6, #0
 8006f16:	d10e      	bne.n	8006f36 <_Bfree+0x2a>
 8006f18:	2010      	movs	r0, #16
 8006f1a:	f001 fe2f 	bl	8008b7c <malloc>
 8006f1e:	1e02      	subs	r2, r0, #0
 8006f20:	6268      	str	r0, [r5, #36]	; 0x24
 8006f22:	d104      	bne.n	8006f2e <_Bfree+0x22>
 8006f24:	218a      	movs	r1, #138	; 0x8a
 8006f26:	4b09      	ldr	r3, [pc, #36]	; (8006f4c <_Bfree+0x40>)
 8006f28:	4809      	ldr	r0, [pc, #36]	; (8006f50 <_Bfree+0x44>)
 8006f2a:	f000 ff53 	bl	8007dd4 <__assert_func>
 8006f2e:	6046      	str	r6, [r0, #4]
 8006f30:	6086      	str	r6, [r0, #8]
 8006f32:	6006      	str	r6, [r0, #0]
 8006f34:	60c6      	str	r6, [r0, #12]
 8006f36:	2c00      	cmp	r4, #0
 8006f38:	d007      	beq.n	8006f4a <_Bfree+0x3e>
 8006f3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f3c:	6862      	ldr	r2, [r4, #4]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	0092      	lsls	r2, r2, #2
 8006f42:	189b      	adds	r3, r3, r2
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	6022      	str	r2, [r4, #0]
 8006f48:	601c      	str	r4, [r3, #0]
 8006f4a:	bd70      	pop	{r4, r5, r6, pc}
 8006f4c:	0800a77c 	.word	0x0800a77c
 8006f50:	0800a793 	.word	0x0800a793

08006f54 <__multadd>:
 8006f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f56:	000e      	movs	r6, r1
 8006f58:	9001      	str	r0, [sp, #4]
 8006f5a:	000c      	movs	r4, r1
 8006f5c:	001d      	movs	r5, r3
 8006f5e:	2000      	movs	r0, #0
 8006f60:	690f      	ldr	r7, [r1, #16]
 8006f62:	3614      	adds	r6, #20
 8006f64:	6833      	ldr	r3, [r6, #0]
 8006f66:	3001      	adds	r0, #1
 8006f68:	b299      	uxth	r1, r3
 8006f6a:	4351      	muls	r1, r2
 8006f6c:	0c1b      	lsrs	r3, r3, #16
 8006f6e:	4353      	muls	r3, r2
 8006f70:	1949      	adds	r1, r1, r5
 8006f72:	0c0d      	lsrs	r5, r1, #16
 8006f74:	195b      	adds	r3, r3, r5
 8006f76:	0c1d      	lsrs	r5, r3, #16
 8006f78:	b289      	uxth	r1, r1
 8006f7a:	041b      	lsls	r3, r3, #16
 8006f7c:	185b      	adds	r3, r3, r1
 8006f7e:	c608      	stmia	r6!, {r3}
 8006f80:	4287      	cmp	r7, r0
 8006f82:	dcef      	bgt.n	8006f64 <__multadd+0x10>
 8006f84:	2d00      	cmp	r5, #0
 8006f86:	d022      	beq.n	8006fce <__multadd+0x7a>
 8006f88:	68a3      	ldr	r3, [r4, #8]
 8006f8a:	42bb      	cmp	r3, r7
 8006f8c:	dc19      	bgt.n	8006fc2 <__multadd+0x6e>
 8006f8e:	6863      	ldr	r3, [r4, #4]
 8006f90:	9801      	ldr	r0, [sp, #4]
 8006f92:	1c59      	adds	r1, r3, #1
 8006f94:	f7ff ff76 	bl	8006e84 <_Balloc>
 8006f98:	1e06      	subs	r6, r0, #0
 8006f9a:	d105      	bne.n	8006fa8 <__multadd+0x54>
 8006f9c:	0002      	movs	r2, r0
 8006f9e:	21b5      	movs	r1, #181	; 0xb5
 8006fa0:	4b0c      	ldr	r3, [pc, #48]	; (8006fd4 <__multadd+0x80>)
 8006fa2:	480d      	ldr	r0, [pc, #52]	; (8006fd8 <__multadd+0x84>)
 8006fa4:	f000 ff16 	bl	8007dd4 <__assert_func>
 8006fa8:	0021      	movs	r1, r4
 8006faa:	6923      	ldr	r3, [r4, #16]
 8006fac:	310c      	adds	r1, #12
 8006fae:	1c9a      	adds	r2, r3, #2
 8006fb0:	0092      	lsls	r2, r2, #2
 8006fb2:	300c      	adds	r0, #12
 8006fb4:	f001 fdf7 	bl	8008ba6 <memcpy>
 8006fb8:	0021      	movs	r1, r4
 8006fba:	9801      	ldr	r0, [sp, #4]
 8006fbc:	f7ff ffa6 	bl	8006f0c <_Bfree>
 8006fc0:	0034      	movs	r4, r6
 8006fc2:	1d3b      	adds	r3, r7, #4
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	18e3      	adds	r3, r4, r3
 8006fc8:	605d      	str	r5, [r3, #4]
 8006fca:	1c7b      	adds	r3, r7, #1
 8006fcc:	6123      	str	r3, [r4, #16]
 8006fce:	0020      	movs	r0, r4
 8006fd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006fd2:	46c0      	nop			; (mov r8, r8)
 8006fd4:	0800a7ef 	.word	0x0800a7ef
 8006fd8:	0800a793 	.word	0x0800a793

08006fdc <__hi0bits>:
 8006fdc:	0003      	movs	r3, r0
 8006fde:	0c02      	lsrs	r2, r0, #16
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	4282      	cmp	r2, r0
 8006fe4:	d101      	bne.n	8006fea <__hi0bits+0xe>
 8006fe6:	041b      	lsls	r3, r3, #16
 8006fe8:	3010      	adds	r0, #16
 8006fea:	0e1a      	lsrs	r2, r3, #24
 8006fec:	d101      	bne.n	8006ff2 <__hi0bits+0x16>
 8006fee:	3008      	adds	r0, #8
 8006ff0:	021b      	lsls	r3, r3, #8
 8006ff2:	0f1a      	lsrs	r2, r3, #28
 8006ff4:	d101      	bne.n	8006ffa <__hi0bits+0x1e>
 8006ff6:	3004      	adds	r0, #4
 8006ff8:	011b      	lsls	r3, r3, #4
 8006ffa:	0f9a      	lsrs	r2, r3, #30
 8006ffc:	d101      	bne.n	8007002 <__hi0bits+0x26>
 8006ffe:	3002      	adds	r0, #2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	2b00      	cmp	r3, #0
 8007004:	db03      	blt.n	800700e <__hi0bits+0x32>
 8007006:	3001      	adds	r0, #1
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	d400      	bmi.n	800700e <__hi0bits+0x32>
 800700c:	2020      	movs	r0, #32
 800700e:	4770      	bx	lr

08007010 <__lo0bits>:
 8007010:	6803      	ldr	r3, [r0, #0]
 8007012:	0002      	movs	r2, r0
 8007014:	2107      	movs	r1, #7
 8007016:	0018      	movs	r0, r3
 8007018:	4008      	ands	r0, r1
 800701a:	420b      	tst	r3, r1
 800701c:	d00d      	beq.n	800703a <__lo0bits+0x2a>
 800701e:	3906      	subs	r1, #6
 8007020:	2000      	movs	r0, #0
 8007022:	420b      	tst	r3, r1
 8007024:	d105      	bne.n	8007032 <__lo0bits+0x22>
 8007026:	3002      	adds	r0, #2
 8007028:	4203      	tst	r3, r0
 800702a:	d003      	beq.n	8007034 <__lo0bits+0x24>
 800702c:	40cb      	lsrs	r3, r1
 800702e:	0008      	movs	r0, r1
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	4770      	bx	lr
 8007034:	089b      	lsrs	r3, r3, #2
 8007036:	6013      	str	r3, [r2, #0]
 8007038:	e7fb      	b.n	8007032 <__lo0bits+0x22>
 800703a:	b299      	uxth	r1, r3
 800703c:	2900      	cmp	r1, #0
 800703e:	d101      	bne.n	8007044 <__lo0bits+0x34>
 8007040:	2010      	movs	r0, #16
 8007042:	0c1b      	lsrs	r3, r3, #16
 8007044:	b2d9      	uxtb	r1, r3
 8007046:	2900      	cmp	r1, #0
 8007048:	d101      	bne.n	800704e <__lo0bits+0x3e>
 800704a:	3008      	adds	r0, #8
 800704c:	0a1b      	lsrs	r3, r3, #8
 800704e:	0719      	lsls	r1, r3, #28
 8007050:	d101      	bne.n	8007056 <__lo0bits+0x46>
 8007052:	3004      	adds	r0, #4
 8007054:	091b      	lsrs	r3, r3, #4
 8007056:	0799      	lsls	r1, r3, #30
 8007058:	d101      	bne.n	800705e <__lo0bits+0x4e>
 800705a:	3002      	adds	r0, #2
 800705c:	089b      	lsrs	r3, r3, #2
 800705e:	07d9      	lsls	r1, r3, #31
 8007060:	d4e9      	bmi.n	8007036 <__lo0bits+0x26>
 8007062:	3001      	adds	r0, #1
 8007064:	085b      	lsrs	r3, r3, #1
 8007066:	d1e6      	bne.n	8007036 <__lo0bits+0x26>
 8007068:	2020      	movs	r0, #32
 800706a:	e7e2      	b.n	8007032 <__lo0bits+0x22>

0800706c <__i2b>:
 800706c:	b510      	push	{r4, lr}
 800706e:	000c      	movs	r4, r1
 8007070:	2101      	movs	r1, #1
 8007072:	f7ff ff07 	bl	8006e84 <_Balloc>
 8007076:	2800      	cmp	r0, #0
 8007078:	d106      	bne.n	8007088 <__i2b+0x1c>
 800707a:	21a0      	movs	r1, #160	; 0xa0
 800707c:	0002      	movs	r2, r0
 800707e:	4b04      	ldr	r3, [pc, #16]	; (8007090 <__i2b+0x24>)
 8007080:	4804      	ldr	r0, [pc, #16]	; (8007094 <__i2b+0x28>)
 8007082:	0049      	lsls	r1, r1, #1
 8007084:	f000 fea6 	bl	8007dd4 <__assert_func>
 8007088:	2301      	movs	r3, #1
 800708a:	6144      	str	r4, [r0, #20]
 800708c:	6103      	str	r3, [r0, #16]
 800708e:	bd10      	pop	{r4, pc}
 8007090:	0800a7ef 	.word	0x0800a7ef
 8007094:	0800a793 	.word	0x0800a793

08007098 <__multiply>:
 8007098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800709a:	690b      	ldr	r3, [r1, #16]
 800709c:	0014      	movs	r4, r2
 800709e:	6912      	ldr	r2, [r2, #16]
 80070a0:	000d      	movs	r5, r1
 80070a2:	b089      	sub	sp, #36	; 0x24
 80070a4:	4293      	cmp	r3, r2
 80070a6:	da01      	bge.n	80070ac <__multiply+0x14>
 80070a8:	0025      	movs	r5, r4
 80070aa:	000c      	movs	r4, r1
 80070ac:	692f      	ldr	r7, [r5, #16]
 80070ae:	6926      	ldr	r6, [r4, #16]
 80070b0:	6869      	ldr	r1, [r5, #4]
 80070b2:	19bb      	adds	r3, r7, r6
 80070b4:	9302      	str	r3, [sp, #8]
 80070b6:	68ab      	ldr	r3, [r5, #8]
 80070b8:	19ba      	adds	r2, r7, r6
 80070ba:	4293      	cmp	r3, r2
 80070bc:	da00      	bge.n	80070c0 <__multiply+0x28>
 80070be:	3101      	adds	r1, #1
 80070c0:	f7ff fee0 	bl	8006e84 <_Balloc>
 80070c4:	9001      	str	r0, [sp, #4]
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d106      	bne.n	80070d8 <__multiply+0x40>
 80070ca:	215e      	movs	r1, #94	; 0x5e
 80070cc:	0002      	movs	r2, r0
 80070ce:	4b48      	ldr	r3, [pc, #288]	; (80071f0 <__multiply+0x158>)
 80070d0:	4848      	ldr	r0, [pc, #288]	; (80071f4 <__multiply+0x15c>)
 80070d2:	31ff      	adds	r1, #255	; 0xff
 80070d4:	f000 fe7e 	bl	8007dd4 <__assert_func>
 80070d8:	9b01      	ldr	r3, [sp, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	3314      	adds	r3, #20
 80070de:	469c      	mov	ip, r3
 80070e0:	19bb      	adds	r3, r7, r6
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4463      	add	r3, ip
 80070e6:	9303      	str	r3, [sp, #12]
 80070e8:	4663      	mov	r3, ip
 80070ea:	9903      	ldr	r1, [sp, #12]
 80070ec:	428b      	cmp	r3, r1
 80070ee:	d32c      	bcc.n	800714a <__multiply+0xb2>
 80070f0:	002b      	movs	r3, r5
 80070f2:	0022      	movs	r2, r4
 80070f4:	3314      	adds	r3, #20
 80070f6:	00bf      	lsls	r7, r7, #2
 80070f8:	3214      	adds	r2, #20
 80070fa:	9306      	str	r3, [sp, #24]
 80070fc:	00b6      	lsls	r6, r6, #2
 80070fe:	19db      	adds	r3, r3, r7
 8007100:	9304      	str	r3, [sp, #16]
 8007102:	1993      	adds	r3, r2, r6
 8007104:	9307      	str	r3, [sp, #28]
 8007106:	2304      	movs	r3, #4
 8007108:	9305      	str	r3, [sp, #20]
 800710a:	002b      	movs	r3, r5
 800710c:	9904      	ldr	r1, [sp, #16]
 800710e:	3315      	adds	r3, #21
 8007110:	9200      	str	r2, [sp, #0]
 8007112:	4299      	cmp	r1, r3
 8007114:	d305      	bcc.n	8007122 <__multiply+0x8a>
 8007116:	1b4b      	subs	r3, r1, r5
 8007118:	3b15      	subs	r3, #21
 800711a:	089b      	lsrs	r3, r3, #2
 800711c:	3301      	adds	r3, #1
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	9305      	str	r3, [sp, #20]
 8007122:	9b07      	ldr	r3, [sp, #28]
 8007124:	9a00      	ldr	r2, [sp, #0]
 8007126:	429a      	cmp	r2, r3
 8007128:	d311      	bcc.n	800714e <__multiply+0xb6>
 800712a:	9b02      	ldr	r3, [sp, #8]
 800712c:	2b00      	cmp	r3, #0
 800712e:	dd06      	ble.n	800713e <__multiply+0xa6>
 8007130:	9b03      	ldr	r3, [sp, #12]
 8007132:	3b04      	subs	r3, #4
 8007134:	9303      	str	r3, [sp, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d053      	beq.n	80071e6 <__multiply+0x14e>
 800713e:	9b01      	ldr	r3, [sp, #4]
 8007140:	9a02      	ldr	r2, [sp, #8]
 8007142:	0018      	movs	r0, r3
 8007144:	611a      	str	r2, [r3, #16]
 8007146:	b009      	add	sp, #36	; 0x24
 8007148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800714a:	c304      	stmia	r3!, {r2}
 800714c:	e7cd      	b.n	80070ea <__multiply+0x52>
 800714e:	9b00      	ldr	r3, [sp, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	b298      	uxth	r0, r3
 8007154:	2800      	cmp	r0, #0
 8007156:	d01b      	beq.n	8007190 <__multiply+0xf8>
 8007158:	4667      	mov	r7, ip
 800715a:	2400      	movs	r4, #0
 800715c:	9e06      	ldr	r6, [sp, #24]
 800715e:	ce02      	ldmia	r6!, {r1}
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	b28b      	uxth	r3, r1
 8007164:	4343      	muls	r3, r0
 8007166:	b292      	uxth	r2, r2
 8007168:	189b      	adds	r3, r3, r2
 800716a:	191b      	adds	r3, r3, r4
 800716c:	0c0c      	lsrs	r4, r1, #16
 800716e:	4344      	muls	r4, r0
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	0c11      	lsrs	r1, r2, #16
 8007174:	1861      	adds	r1, r4, r1
 8007176:	0c1c      	lsrs	r4, r3, #16
 8007178:	1909      	adds	r1, r1, r4
 800717a:	0c0c      	lsrs	r4, r1, #16
 800717c:	b29b      	uxth	r3, r3
 800717e:	0409      	lsls	r1, r1, #16
 8007180:	430b      	orrs	r3, r1
 8007182:	c708      	stmia	r7!, {r3}
 8007184:	9b04      	ldr	r3, [sp, #16]
 8007186:	42b3      	cmp	r3, r6
 8007188:	d8e9      	bhi.n	800715e <__multiply+0xc6>
 800718a:	4663      	mov	r3, ip
 800718c:	9a05      	ldr	r2, [sp, #20]
 800718e:	509c      	str	r4, [r3, r2]
 8007190:	9b00      	ldr	r3, [sp, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	0c1e      	lsrs	r6, r3, #16
 8007196:	d020      	beq.n	80071da <__multiply+0x142>
 8007198:	4663      	mov	r3, ip
 800719a:	002c      	movs	r4, r5
 800719c:	4660      	mov	r0, ip
 800719e:	2700      	movs	r7, #0
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3414      	adds	r4, #20
 80071a4:	6822      	ldr	r2, [r4, #0]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	b291      	uxth	r1, r2
 80071aa:	4371      	muls	r1, r6
 80071ac:	6802      	ldr	r2, [r0, #0]
 80071ae:	0c12      	lsrs	r2, r2, #16
 80071b0:	1889      	adds	r1, r1, r2
 80071b2:	19cf      	adds	r7, r1, r7
 80071b4:	0439      	lsls	r1, r7, #16
 80071b6:	430b      	orrs	r3, r1
 80071b8:	6003      	str	r3, [r0, #0]
 80071ba:	cc02      	ldmia	r4!, {r1}
 80071bc:	6843      	ldr	r3, [r0, #4]
 80071be:	0c09      	lsrs	r1, r1, #16
 80071c0:	4371      	muls	r1, r6
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	0c3f      	lsrs	r7, r7, #16
 80071c6:	18cb      	adds	r3, r1, r3
 80071c8:	9a04      	ldr	r2, [sp, #16]
 80071ca:	19db      	adds	r3, r3, r7
 80071cc:	0c1f      	lsrs	r7, r3, #16
 80071ce:	3004      	adds	r0, #4
 80071d0:	42a2      	cmp	r2, r4
 80071d2:	d8e7      	bhi.n	80071a4 <__multiply+0x10c>
 80071d4:	4662      	mov	r2, ip
 80071d6:	9905      	ldr	r1, [sp, #20]
 80071d8:	5053      	str	r3, [r2, r1]
 80071da:	9b00      	ldr	r3, [sp, #0]
 80071dc:	3304      	adds	r3, #4
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	2304      	movs	r3, #4
 80071e2:	449c      	add	ip, r3
 80071e4:	e79d      	b.n	8007122 <__multiply+0x8a>
 80071e6:	9b02      	ldr	r3, [sp, #8]
 80071e8:	3b01      	subs	r3, #1
 80071ea:	9302      	str	r3, [sp, #8]
 80071ec:	e79d      	b.n	800712a <__multiply+0x92>
 80071ee:	46c0      	nop			; (mov r8, r8)
 80071f0:	0800a7ef 	.word	0x0800a7ef
 80071f4:	0800a793 	.word	0x0800a793

080071f8 <__pow5mult>:
 80071f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071fa:	2303      	movs	r3, #3
 80071fc:	0015      	movs	r5, r2
 80071fe:	0007      	movs	r7, r0
 8007200:	000e      	movs	r6, r1
 8007202:	401a      	ands	r2, r3
 8007204:	421d      	tst	r5, r3
 8007206:	d008      	beq.n	800721a <__pow5mult+0x22>
 8007208:	4925      	ldr	r1, [pc, #148]	; (80072a0 <__pow5mult+0xa8>)
 800720a:	3a01      	subs	r2, #1
 800720c:	0092      	lsls	r2, r2, #2
 800720e:	5852      	ldr	r2, [r2, r1]
 8007210:	2300      	movs	r3, #0
 8007212:	0031      	movs	r1, r6
 8007214:	f7ff fe9e 	bl	8006f54 <__multadd>
 8007218:	0006      	movs	r6, r0
 800721a:	10ad      	asrs	r5, r5, #2
 800721c:	d03d      	beq.n	800729a <__pow5mult+0xa2>
 800721e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8007220:	2c00      	cmp	r4, #0
 8007222:	d10f      	bne.n	8007244 <__pow5mult+0x4c>
 8007224:	2010      	movs	r0, #16
 8007226:	f001 fca9 	bl	8008b7c <malloc>
 800722a:	1e02      	subs	r2, r0, #0
 800722c:	6278      	str	r0, [r7, #36]	; 0x24
 800722e:	d105      	bne.n	800723c <__pow5mult+0x44>
 8007230:	21d7      	movs	r1, #215	; 0xd7
 8007232:	4b1c      	ldr	r3, [pc, #112]	; (80072a4 <__pow5mult+0xac>)
 8007234:	481c      	ldr	r0, [pc, #112]	; (80072a8 <__pow5mult+0xb0>)
 8007236:	0049      	lsls	r1, r1, #1
 8007238:	f000 fdcc 	bl	8007dd4 <__assert_func>
 800723c:	6044      	str	r4, [r0, #4]
 800723e:	6084      	str	r4, [r0, #8]
 8007240:	6004      	str	r4, [r0, #0]
 8007242:	60c4      	str	r4, [r0, #12]
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	689c      	ldr	r4, [r3, #8]
 8007248:	9301      	str	r3, [sp, #4]
 800724a:	2c00      	cmp	r4, #0
 800724c:	d108      	bne.n	8007260 <__pow5mult+0x68>
 800724e:	0038      	movs	r0, r7
 8007250:	4916      	ldr	r1, [pc, #88]	; (80072ac <__pow5mult+0xb4>)
 8007252:	f7ff ff0b 	bl	800706c <__i2b>
 8007256:	9b01      	ldr	r3, [sp, #4]
 8007258:	0004      	movs	r4, r0
 800725a:	6098      	str	r0, [r3, #8]
 800725c:	2300      	movs	r3, #0
 800725e:	6003      	str	r3, [r0, #0]
 8007260:	2301      	movs	r3, #1
 8007262:	421d      	tst	r5, r3
 8007264:	d00a      	beq.n	800727c <__pow5mult+0x84>
 8007266:	0031      	movs	r1, r6
 8007268:	0022      	movs	r2, r4
 800726a:	0038      	movs	r0, r7
 800726c:	f7ff ff14 	bl	8007098 <__multiply>
 8007270:	0031      	movs	r1, r6
 8007272:	9001      	str	r0, [sp, #4]
 8007274:	0038      	movs	r0, r7
 8007276:	f7ff fe49 	bl	8006f0c <_Bfree>
 800727a:	9e01      	ldr	r6, [sp, #4]
 800727c:	106d      	asrs	r5, r5, #1
 800727e:	d00c      	beq.n	800729a <__pow5mult+0xa2>
 8007280:	6820      	ldr	r0, [r4, #0]
 8007282:	2800      	cmp	r0, #0
 8007284:	d107      	bne.n	8007296 <__pow5mult+0x9e>
 8007286:	0022      	movs	r2, r4
 8007288:	0021      	movs	r1, r4
 800728a:	0038      	movs	r0, r7
 800728c:	f7ff ff04 	bl	8007098 <__multiply>
 8007290:	2300      	movs	r3, #0
 8007292:	6020      	str	r0, [r4, #0]
 8007294:	6003      	str	r3, [r0, #0]
 8007296:	0004      	movs	r4, r0
 8007298:	e7e2      	b.n	8007260 <__pow5mult+0x68>
 800729a:	0030      	movs	r0, r6
 800729c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800729e:	46c0      	nop			; (mov r8, r8)
 80072a0:	0800a8f0 	.word	0x0800a8f0
 80072a4:	0800a77c 	.word	0x0800a77c
 80072a8:	0800a793 	.word	0x0800a793
 80072ac:	00000271 	.word	0x00000271

080072b0 <__lshift>:
 80072b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072b2:	000c      	movs	r4, r1
 80072b4:	0017      	movs	r7, r2
 80072b6:	6923      	ldr	r3, [r4, #16]
 80072b8:	1155      	asrs	r5, r2, #5
 80072ba:	b087      	sub	sp, #28
 80072bc:	18eb      	adds	r3, r5, r3
 80072be:	9302      	str	r3, [sp, #8]
 80072c0:	3301      	adds	r3, #1
 80072c2:	9301      	str	r3, [sp, #4]
 80072c4:	6849      	ldr	r1, [r1, #4]
 80072c6:	68a3      	ldr	r3, [r4, #8]
 80072c8:	9004      	str	r0, [sp, #16]
 80072ca:	9a01      	ldr	r2, [sp, #4]
 80072cc:	4293      	cmp	r3, r2
 80072ce:	db10      	blt.n	80072f2 <__lshift+0x42>
 80072d0:	9804      	ldr	r0, [sp, #16]
 80072d2:	f7ff fdd7 	bl	8006e84 <_Balloc>
 80072d6:	2300      	movs	r3, #0
 80072d8:	0002      	movs	r2, r0
 80072da:	0006      	movs	r6, r0
 80072dc:	0019      	movs	r1, r3
 80072de:	3214      	adds	r2, #20
 80072e0:	4298      	cmp	r0, r3
 80072e2:	d10c      	bne.n	80072fe <__lshift+0x4e>
 80072e4:	21da      	movs	r1, #218	; 0xda
 80072e6:	0002      	movs	r2, r0
 80072e8:	4b26      	ldr	r3, [pc, #152]	; (8007384 <__lshift+0xd4>)
 80072ea:	4827      	ldr	r0, [pc, #156]	; (8007388 <__lshift+0xd8>)
 80072ec:	31ff      	adds	r1, #255	; 0xff
 80072ee:	f000 fd71 	bl	8007dd4 <__assert_func>
 80072f2:	3101      	adds	r1, #1
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	e7e8      	b.n	80072ca <__lshift+0x1a>
 80072f8:	0098      	lsls	r0, r3, #2
 80072fa:	5011      	str	r1, [r2, r0]
 80072fc:	3301      	adds	r3, #1
 80072fe:	42ab      	cmp	r3, r5
 8007300:	dbfa      	blt.n	80072f8 <__lshift+0x48>
 8007302:	43eb      	mvns	r3, r5
 8007304:	17db      	asrs	r3, r3, #31
 8007306:	401d      	ands	r5, r3
 8007308:	211f      	movs	r1, #31
 800730a:	0023      	movs	r3, r4
 800730c:	0038      	movs	r0, r7
 800730e:	00ad      	lsls	r5, r5, #2
 8007310:	1955      	adds	r5, r2, r5
 8007312:	6922      	ldr	r2, [r4, #16]
 8007314:	3314      	adds	r3, #20
 8007316:	0092      	lsls	r2, r2, #2
 8007318:	4008      	ands	r0, r1
 800731a:	4684      	mov	ip, r0
 800731c:	189a      	adds	r2, r3, r2
 800731e:	420f      	tst	r7, r1
 8007320:	d02a      	beq.n	8007378 <__lshift+0xc8>
 8007322:	3101      	adds	r1, #1
 8007324:	1a09      	subs	r1, r1, r0
 8007326:	9105      	str	r1, [sp, #20]
 8007328:	2100      	movs	r1, #0
 800732a:	9503      	str	r5, [sp, #12]
 800732c:	4667      	mov	r7, ip
 800732e:	6818      	ldr	r0, [r3, #0]
 8007330:	40b8      	lsls	r0, r7
 8007332:	4301      	orrs	r1, r0
 8007334:	9803      	ldr	r0, [sp, #12]
 8007336:	c002      	stmia	r0!, {r1}
 8007338:	cb02      	ldmia	r3!, {r1}
 800733a:	9003      	str	r0, [sp, #12]
 800733c:	9805      	ldr	r0, [sp, #20]
 800733e:	40c1      	lsrs	r1, r0
 8007340:	429a      	cmp	r2, r3
 8007342:	d8f3      	bhi.n	800732c <__lshift+0x7c>
 8007344:	0020      	movs	r0, r4
 8007346:	3015      	adds	r0, #21
 8007348:	2304      	movs	r3, #4
 800734a:	4282      	cmp	r2, r0
 800734c:	d304      	bcc.n	8007358 <__lshift+0xa8>
 800734e:	1b13      	subs	r3, r2, r4
 8007350:	3b15      	subs	r3, #21
 8007352:	089b      	lsrs	r3, r3, #2
 8007354:	3301      	adds	r3, #1
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	50e9      	str	r1, [r5, r3]
 800735a:	2900      	cmp	r1, #0
 800735c:	d002      	beq.n	8007364 <__lshift+0xb4>
 800735e:	9b02      	ldr	r3, [sp, #8]
 8007360:	3302      	adds	r3, #2
 8007362:	9301      	str	r3, [sp, #4]
 8007364:	9b01      	ldr	r3, [sp, #4]
 8007366:	9804      	ldr	r0, [sp, #16]
 8007368:	3b01      	subs	r3, #1
 800736a:	0021      	movs	r1, r4
 800736c:	6133      	str	r3, [r6, #16]
 800736e:	f7ff fdcd 	bl	8006f0c <_Bfree>
 8007372:	0030      	movs	r0, r6
 8007374:	b007      	add	sp, #28
 8007376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007378:	cb02      	ldmia	r3!, {r1}
 800737a:	c502      	stmia	r5!, {r1}
 800737c:	429a      	cmp	r2, r3
 800737e:	d8fb      	bhi.n	8007378 <__lshift+0xc8>
 8007380:	e7f0      	b.n	8007364 <__lshift+0xb4>
 8007382:	46c0      	nop			; (mov r8, r8)
 8007384:	0800a7ef 	.word	0x0800a7ef
 8007388:	0800a793 	.word	0x0800a793

0800738c <__mcmp>:
 800738c:	6902      	ldr	r2, [r0, #16]
 800738e:	690b      	ldr	r3, [r1, #16]
 8007390:	b530      	push	{r4, r5, lr}
 8007392:	0004      	movs	r4, r0
 8007394:	1ad0      	subs	r0, r2, r3
 8007396:	429a      	cmp	r2, r3
 8007398:	d10d      	bne.n	80073b6 <__mcmp+0x2a>
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	3414      	adds	r4, #20
 800739e:	3114      	adds	r1, #20
 80073a0:	18e2      	adds	r2, r4, r3
 80073a2:	18c9      	adds	r1, r1, r3
 80073a4:	3a04      	subs	r2, #4
 80073a6:	3904      	subs	r1, #4
 80073a8:	6815      	ldr	r5, [r2, #0]
 80073aa:	680b      	ldr	r3, [r1, #0]
 80073ac:	429d      	cmp	r5, r3
 80073ae:	d003      	beq.n	80073b8 <__mcmp+0x2c>
 80073b0:	2001      	movs	r0, #1
 80073b2:	429d      	cmp	r5, r3
 80073b4:	d303      	bcc.n	80073be <__mcmp+0x32>
 80073b6:	bd30      	pop	{r4, r5, pc}
 80073b8:	4294      	cmp	r4, r2
 80073ba:	d3f3      	bcc.n	80073a4 <__mcmp+0x18>
 80073bc:	e7fb      	b.n	80073b6 <__mcmp+0x2a>
 80073be:	4240      	negs	r0, r0
 80073c0:	e7f9      	b.n	80073b6 <__mcmp+0x2a>
	...

080073c4 <__mdiff>:
 80073c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073c6:	000e      	movs	r6, r1
 80073c8:	0007      	movs	r7, r0
 80073ca:	0011      	movs	r1, r2
 80073cc:	0030      	movs	r0, r6
 80073ce:	b087      	sub	sp, #28
 80073d0:	0014      	movs	r4, r2
 80073d2:	f7ff ffdb 	bl	800738c <__mcmp>
 80073d6:	1e05      	subs	r5, r0, #0
 80073d8:	d110      	bne.n	80073fc <__mdiff+0x38>
 80073da:	0001      	movs	r1, r0
 80073dc:	0038      	movs	r0, r7
 80073de:	f7ff fd51 	bl	8006e84 <_Balloc>
 80073e2:	1e02      	subs	r2, r0, #0
 80073e4:	d104      	bne.n	80073f0 <__mdiff+0x2c>
 80073e6:	4b40      	ldr	r3, [pc, #256]	; (80074e8 <__mdiff+0x124>)
 80073e8:	4940      	ldr	r1, [pc, #256]	; (80074ec <__mdiff+0x128>)
 80073ea:	4841      	ldr	r0, [pc, #260]	; (80074f0 <__mdiff+0x12c>)
 80073ec:	f000 fcf2 	bl	8007dd4 <__assert_func>
 80073f0:	2301      	movs	r3, #1
 80073f2:	6145      	str	r5, [r0, #20]
 80073f4:	6103      	str	r3, [r0, #16]
 80073f6:	0010      	movs	r0, r2
 80073f8:	b007      	add	sp, #28
 80073fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073fc:	2301      	movs	r3, #1
 80073fe:	9301      	str	r3, [sp, #4]
 8007400:	2800      	cmp	r0, #0
 8007402:	db04      	blt.n	800740e <__mdiff+0x4a>
 8007404:	0023      	movs	r3, r4
 8007406:	0034      	movs	r4, r6
 8007408:	001e      	movs	r6, r3
 800740a:	2300      	movs	r3, #0
 800740c:	9301      	str	r3, [sp, #4]
 800740e:	0038      	movs	r0, r7
 8007410:	6861      	ldr	r1, [r4, #4]
 8007412:	f7ff fd37 	bl	8006e84 <_Balloc>
 8007416:	1e02      	subs	r2, r0, #0
 8007418:	d103      	bne.n	8007422 <__mdiff+0x5e>
 800741a:	2190      	movs	r1, #144	; 0x90
 800741c:	4b32      	ldr	r3, [pc, #200]	; (80074e8 <__mdiff+0x124>)
 800741e:	0089      	lsls	r1, r1, #2
 8007420:	e7e3      	b.n	80073ea <__mdiff+0x26>
 8007422:	9b01      	ldr	r3, [sp, #4]
 8007424:	2700      	movs	r7, #0
 8007426:	60c3      	str	r3, [r0, #12]
 8007428:	6920      	ldr	r0, [r4, #16]
 800742a:	3414      	adds	r4, #20
 800742c:	9401      	str	r4, [sp, #4]
 800742e:	9b01      	ldr	r3, [sp, #4]
 8007430:	0084      	lsls	r4, r0, #2
 8007432:	191b      	adds	r3, r3, r4
 8007434:	0034      	movs	r4, r6
 8007436:	9302      	str	r3, [sp, #8]
 8007438:	6933      	ldr	r3, [r6, #16]
 800743a:	3414      	adds	r4, #20
 800743c:	0099      	lsls	r1, r3, #2
 800743e:	1863      	adds	r3, r4, r1
 8007440:	9303      	str	r3, [sp, #12]
 8007442:	0013      	movs	r3, r2
 8007444:	3314      	adds	r3, #20
 8007446:	469c      	mov	ip, r3
 8007448:	9305      	str	r3, [sp, #20]
 800744a:	9b01      	ldr	r3, [sp, #4]
 800744c:	9304      	str	r3, [sp, #16]
 800744e:	9b04      	ldr	r3, [sp, #16]
 8007450:	cc02      	ldmia	r4!, {r1}
 8007452:	cb20      	ldmia	r3!, {r5}
 8007454:	9304      	str	r3, [sp, #16]
 8007456:	b2ab      	uxth	r3, r5
 8007458:	19df      	adds	r7, r3, r7
 800745a:	b28b      	uxth	r3, r1
 800745c:	1afb      	subs	r3, r7, r3
 800745e:	0c09      	lsrs	r1, r1, #16
 8007460:	0c2d      	lsrs	r5, r5, #16
 8007462:	1a6d      	subs	r5, r5, r1
 8007464:	1419      	asrs	r1, r3, #16
 8007466:	186d      	adds	r5, r5, r1
 8007468:	4661      	mov	r1, ip
 800746a:	142f      	asrs	r7, r5, #16
 800746c:	b29b      	uxth	r3, r3
 800746e:	042d      	lsls	r5, r5, #16
 8007470:	432b      	orrs	r3, r5
 8007472:	c108      	stmia	r1!, {r3}
 8007474:	9b03      	ldr	r3, [sp, #12]
 8007476:	468c      	mov	ip, r1
 8007478:	42a3      	cmp	r3, r4
 800747a:	d8e8      	bhi.n	800744e <__mdiff+0x8a>
 800747c:	0031      	movs	r1, r6
 800747e:	9c03      	ldr	r4, [sp, #12]
 8007480:	3115      	adds	r1, #21
 8007482:	2304      	movs	r3, #4
 8007484:	428c      	cmp	r4, r1
 8007486:	d304      	bcc.n	8007492 <__mdiff+0xce>
 8007488:	1ba3      	subs	r3, r4, r6
 800748a:	3b15      	subs	r3, #21
 800748c:	089b      	lsrs	r3, r3, #2
 800748e:	3301      	adds	r3, #1
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	9901      	ldr	r1, [sp, #4]
 8007494:	18cc      	adds	r4, r1, r3
 8007496:	9905      	ldr	r1, [sp, #20]
 8007498:	0026      	movs	r6, r4
 800749a:	18cb      	adds	r3, r1, r3
 800749c:	469c      	mov	ip, r3
 800749e:	9902      	ldr	r1, [sp, #8]
 80074a0:	428e      	cmp	r6, r1
 80074a2:	d310      	bcc.n	80074c6 <__mdiff+0x102>
 80074a4:	9e02      	ldr	r6, [sp, #8]
 80074a6:	1ee1      	subs	r1, r4, #3
 80074a8:	2500      	movs	r5, #0
 80074aa:	428e      	cmp	r6, r1
 80074ac:	d304      	bcc.n	80074b8 <__mdiff+0xf4>
 80074ae:	0031      	movs	r1, r6
 80074b0:	3103      	adds	r1, #3
 80074b2:	1b0c      	subs	r4, r1, r4
 80074b4:	08a4      	lsrs	r4, r4, #2
 80074b6:	00a5      	lsls	r5, r4, #2
 80074b8:	195b      	adds	r3, r3, r5
 80074ba:	3b04      	subs	r3, #4
 80074bc:	6819      	ldr	r1, [r3, #0]
 80074be:	2900      	cmp	r1, #0
 80074c0:	d00f      	beq.n	80074e2 <__mdiff+0x11e>
 80074c2:	6110      	str	r0, [r2, #16]
 80074c4:	e797      	b.n	80073f6 <__mdiff+0x32>
 80074c6:	ce02      	ldmia	r6!, {r1}
 80074c8:	b28d      	uxth	r5, r1
 80074ca:	19ed      	adds	r5, r5, r7
 80074cc:	0c0f      	lsrs	r7, r1, #16
 80074ce:	1429      	asrs	r1, r5, #16
 80074d0:	1879      	adds	r1, r7, r1
 80074d2:	140f      	asrs	r7, r1, #16
 80074d4:	b2ad      	uxth	r5, r5
 80074d6:	0409      	lsls	r1, r1, #16
 80074d8:	430d      	orrs	r5, r1
 80074da:	4661      	mov	r1, ip
 80074dc:	c120      	stmia	r1!, {r5}
 80074de:	468c      	mov	ip, r1
 80074e0:	e7dd      	b.n	800749e <__mdiff+0xda>
 80074e2:	3801      	subs	r0, #1
 80074e4:	e7e9      	b.n	80074ba <__mdiff+0xf6>
 80074e6:	46c0      	nop			; (mov r8, r8)
 80074e8:	0800a7ef 	.word	0x0800a7ef
 80074ec:	00000232 	.word	0x00000232
 80074f0:	0800a793 	.word	0x0800a793

080074f4 <__d2b>:
 80074f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074f6:	2101      	movs	r1, #1
 80074f8:	0014      	movs	r4, r2
 80074fa:	001e      	movs	r6, r3
 80074fc:	9f08      	ldr	r7, [sp, #32]
 80074fe:	f7ff fcc1 	bl	8006e84 <_Balloc>
 8007502:	1e05      	subs	r5, r0, #0
 8007504:	d105      	bne.n	8007512 <__d2b+0x1e>
 8007506:	0002      	movs	r2, r0
 8007508:	4b26      	ldr	r3, [pc, #152]	; (80075a4 <__d2b+0xb0>)
 800750a:	4927      	ldr	r1, [pc, #156]	; (80075a8 <__d2b+0xb4>)
 800750c:	4827      	ldr	r0, [pc, #156]	; (80075ac <__d2b+0xb8>)
 800750e:	f000 fc61 	bl	8007dd4 <__assert_func>
 8007512:	0333      	lsls	r3, r6, #12
 8007514:	0076      	lsls	r6, r6, #1
 8007516:	0b1b      	lsrs	r3, r3, #12
 8007518:	0d76      	lsrs	r6, r6, #21
 800751a:	d124      	bne.n	8007566 <__d2b+0x72>
 800751c:	9301      	str	r3, [sp, #4]
 800751e:	2c00      	cmp	r4, #0
 8007520:	d027      	beq.n	8007572 <__d2b+0x7e>
 8007522:	4668      	mov	r0, sp
 8007524:	9400      	str	r4, [sp, #0]
 8007526:	f7ff fd73 	bl	8007010 <__lo0bits>
 800752a:	9c00      	ldr	r4, [sp, #0]
 800752c:	2800      	cmp	r0, #0
 800752e:	d01e      	beq.n	800756e <__d2b+0x7a>
 8007530:	9b01      	ldr	r3, [sp, #4]
 8007532:	2120      	movs	r1, #32
 8007534:	001a      	movs	r2, r3
 8007536:	1a09      	subs	r1, r1, r0
 8007538:	408a      	lsls	r2, r1
 800753a:	40c3      	lsrs	r3, r0
 800753c:	4322      	orrs	r2, r4
 800753e:	616a      	str	r2, [r5, #20]
 8007540:	9301      	str	r3, [sp, #4]
 8007542:	9c01      	ldr	r4, [sp, #4]
 8007544:	61ac      	str	r4, [r5, #24]
 8007546:	1e63      	subs	r3, r4, #1
 8007548:	419c      	sbcs	r4, r3
 800754a:	3401      	adds	r4, #1
 800754c:	612c      	str	r4, [r5, #16]
 800754e:	2e00      	cmp	r6, #0
 8007550:	d018      	beq.n	8007584 <__d2b+0x90>
 8007552:	4b17      	ldr	r3, [pc, #92]	; (80075b0 <__d2b+0xbc>)
 8007554:	18f6      	adds	r6, r6, r3
 8007556:	2335      	movs	r3, #53	; 0x35
 8007558:	1836      	adds	r6, r6, r0
 800755a:	1a18      	subs	r0, r3, r0
 800755c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800755e:	603e      	str	r6, [r7, #0]
 8007560:	6018      	str	r0, [r3, #0]
 8007562:	0028      	movs	r0, r5
 8007564:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007566:	2280      	movs	r2, #128	; 0x80
 8007568:	0352      	lsls	r2, r2, #13
 800756a:	4313      	orrs	r3, r2
 800756c:	e7d6      	b.n	800751c <__d2b+0x28>
 800756e:	616c      	str	r4, [r5, #20]
 8007570:	e7e7      	b.n	8007542 <__d2b+0x4e>
 8007572:	a801      	add	r0, sp, #4
 8007574:	f7ff fd4c 	bl	8007010 <__lo0bits>
 8007578:	2401      	movs	r4, #1
 800757a:	9b01      	ldr	r3, [sp, #4]
 800757c:	612c      	str	r4, [r5, #16]
 800757e:	616b      	str	r3, [r5, #20]
 8007580:	3020      	adds	r0, #32
 8007582:	e7e4      	b.n	800754e <__d2b+0x5a>
 8007584:	4b0b      	ldr	r3, [pc, #44]	; (80075b4 <__d2b+0xc0>)
 8007586:	18c0      	adds	r0, r0, r3
 8007588:	4b0b      	ldr	r3, [pc, #44]	; (80075b8 <__d2b+0xc4>)
 800758a:	6038      	str	r0, [r7, #0]
 800758c:	18e3      	adds	r3, r4, r3
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	18eb      	adds	r3, r5, r3
 8007592:	6958      	ldr	r0, [r3, #20]
 8007594:	f7ff fd22 	bl	8006fdc <__hi0bits>
 8007598:	0164      	lsls	r4, r4, #5
 800759a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800759c:	1a24      	subs	r4, r4, r0
 800759e:	601c      	str	r4, [r3, #0]
 80075a0:	e7df      	b.n	8007562 <__d2b+0x6e>
 80075a2:	46c0      	nop			; (mov r8, r8)
 80075a4:	0800a7ef 	.word	0x0800a7ef
 80075a8:	0000030a 	.word	0x0000030a
 80075ac:	0800a793 	.word	0x0800a793
 80075b0:	fffffbcd 	.word	0xfffffbcd
 80075b4:	fffffbce 	.word	0xfffffbce
 80075b8:	3fffffff 	.word	0x3fffffff

080075bc <_mprec_log10>:
 80075bc:	b510      	push	{r4, lr}
 80075be:	0004      	movs	r4, r0
 80075c0:	2817      	cmp	r0, #23
 80075c2:	dc05      	bgt.n	80075d0 <_mprec_log10+0x14>
 80075c4:	4c07      	ldr	r4, [pc, #28]	; (80075e4 <_mprec_log10+0x28>)
 80075c6:	00c0      	lsls	r0, r0, #3
 80075c8:	1824      	adds	r4, r4, r0
 80075ca:	6820      	ldr	r0, [r4, #0]
 80075cc:	6861      	ldr	r1, [r4, #4]
 80075ce:	bd10      	pop	{r4, pc}
 80075d0:	2000      	movs	r0, #0
 80075d2:	4905      	ldr	r1, [pc, #20]	; (80075e8 <_mprec_log10+0x2c>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	4b05      	ldr	r3, [pc, #20]	; (80075ec <_mprec_log10+0x30>)
 80075d8:	3c01      	subs	r4, #1
 80075da:	f7fa f813 	bl	8001604 <__aeabi_dmul>
 80075de:	2c00      	cmp	r4, #0
 80075e0:	d1f8      	bne.n	80075d4 <_mprec_log10+0x18>
 80075e2:	e7f4      	b.n	80075ce <_mprec_log10+0x12>
 80075e4:	0800a828 	.word	0x0800a828
 80075e8:	3ff00000 	.word	0x3ff00000
 80075ec:	40240000 	.word	0x40240000

080075f0 <_calloc_r>:
 80075f0:	b570      	push	{r4, r5, r6, lr}
 80075f2:	0c13      	lsrs	r3, r2, #16
 80075f4:	0c0d      	lsrs	r5, r1, #16
 80075f6:	d11e      	bne.n	8007636 <_calloc_r+0x46>
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10c      	bne.n	8007616 <_calloc_r+0x26>
 80075fc:	b289      	uxth	r1, r1
 80075fe:	b294      	uxth	r4, r2
 8007600:	434c      	muls	r4, r1
 8007602:	0021      	movs	r1, r4
 8007604:	f000 f842 	bl	800768c <_malloc_r>
 8007608:	1e05      	subs	r5, r0, #0
 800760a:	d01b      	beq.n	8007644 <_calloc_r+0x54>
 800760c:	0022      	movs	r2, r4
 800760e:	2100      	movs	r1, #0
 8007610:	f7ff fabe 	bl	8006b90 <memset>
 8007614:	e016      	b.n	8007644 <_calloc_r+0x54>
 8007616:	1c1d      	adds	r5, r3, #0
 8007618:	1c0b      	adds	r3, r1, #0
 800761a:	b292      	uxth	r2, r2
 800761c:	b289      	uxth	r1, r1
 800761e:	b29c      	uxth	r4, r3
 8007620:	4351      	muls	r1, r2
 8007622:	b2ab      	uxth	r3, r5
 8007624:	4363      	muls	r3, r4
 8007626:	0c0c      	lsrs	r4, r1, #16
 8007628:	191c      	adds	r4, r3, r4
 800762a:	0c22      	lsrs	r2, r4, #16
 800762c:	d107      	bne.n	800763e <_calloc_r+0x4e>
 800762e:	0424      	lsls	r4, r4, #16
 8007630:	b289      	uxth	r1, r1
 8007632:	430c      	orrs	r4, r1
 8007634:	e7e5      	b.n	8007602 <_calloc_r+0x12>
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <_calloc_r+0x4e>
 800763a:	1c13      	adds	r3, r2, #0
 800763c:	e7ed      	b.n	800761a <_calloc_r+0x2a>
 800763e:	230c      	movs	r3, #12
 8007640:	2500      	movs	r5, #0
 8007642:	6003      	str	r3, [r0, #0]
 8007644:	0028      	movs	r0, r5
 8007646:	bd70      	pop	{r4, r5, r6, pc}

08007648 <sbrk_aligned>:
 8007648:	b570      	push	{r4, r5, r6, lr}
 800764a:	4e0f      	ldr	r6, [pc, #60]	; (8007688 <sbrk_aligned+0x40>)
 800764c:	000d      	movs	r5, r1
 800764e:	6831      	ldr	r1, [r6, #0]
 8007650:	0004      	movs	r4, r0
 8007652:	2900      	cmp	r1, #0
 8007654:	d102      	bne.n	800765c <sbrk_aligned+0x14>
 8007656:	f000 fba3 	bl	8007da0 <_sbrk_r>
 800765a:	6030      	str	r0, [r6, #0]
 800765c:	0029      	movs	r1, r5
 800765e:	0020      	movs	r0, r4
 8007660:	f000 fb9e 	bl	8007da0 <_sbrk_r>
 8007664:	1c43      	adds	r3, r0, #1
 8007666:	d00a      	beq.n	800767e <sbrk_aligned+0x36>
 8007668:	2303      	movs	r3, #3
 800766a:	1cc5      	adds	r5, r0, #3
 800766c:	439d      	bics	r5, r3
 800766e:	42a8      	cmp	r0, r5
 8007670:	d007      	beq.n	8007682 <sbrk_aligned+0x3a>
 8007672:	1a29      	subs	r1, r5, r0
 8007674:	0020      	movs	r0, r4
 8007676:	f000 fb93 	bl	8007da0 <_sbrk_r>
 800767a:	1c43      	adds	r3, r0, #1
 800767c:	d101      	bne.n	8007682 <sbrk_aligned+0x3a>
 800767e:	2501      	movs	r5, #1
 8007680:	426d      	negs	r5, r5
 8007682:	0028      	movs	r0, r5
 8007684:	bd70      	pop	{r4, r5, r6, pc}
 8007686:	46c0      	nop			; (mov r8, r8)
 8007688:	200002d0 	.word	0x200002d0

0800768c <_malloc_r>:
 800768c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800768e:	2203      	movs	r2, #3
 8007690:	1ccb      	adds	r3, r1, #3
 8007692:	4393      	bics	r3, r2
 8007694:	3308      	adds	r3, #8
 8007696:	0006      	movs	r6, r0
 8007698:	001f      	movs	r7, r3
 800769a:	2b0c      	cmp	r3, #12
 800769c:	d232      	bcs.n	8007704 <_malloc_r+0x78>
 800769e:	270c      	movs	r7, #12
 80076a0:	42b9      	cmp	r1, r7
 80076a2:	d831      	bhi.n	8007708 <_malloc_r+0x7c>
 80076a4:	0030      	movs	r0, r6
 80076a6:	f001 fa9b 	bl	8008be0 <__malloc_lock>
 80076aa:	4d32      	ldr	r5, [pc, #200]	; (8007774 <_malloc_r+0xe8>)
 80076ac:	682b      	ldr	r3, [r5, #0]
 80076ae:	001c      	movs	r4, r3
 80076b0:	2c00      	cmp	r4, #0
 80076b2:	d12e      	bne.n	8007712 <_malloc_r+0x86>
 80076b4:	0039      	movs	r1, r7
 80076b6:	0030      	movs	r0, r6
 80076b8:	f7ff ffc6 	bl	8007648 <sbrk_aligned>
 80076bc:	0004      	movs	r4, r0
 80076be:	1c43      	adds	r3, r0, #1
 80076c0:	d11e      	bne.n	8007700 <_malloc_r+0x74>
 80076c2:	682c      	ldr	r4, [r5, #0]
 80076c4:	0025      	movs	r5, r4
 80076c6:	2d00      	cmp	r5, #0
 80076c8:	d14a      	bne.n	8007760 <_malloc_r+0xd4>
 80076ca:	6823      	ldr	r3, [r4, #0]
 80076cc:	0029      	movs	r1, r5
 80076ce:	18e3      	adds	r3, r4, r3
 80076d0:	0030      	movs	r0, r6
 80076d2:	9301      	str	r3, [sp, #4]
 80076d4:	f000 fb64 	bl	8007da0 <_sbrk_r>
 80076d8:	9b01      	ldr	r3, [sp, #4]
 80076da:	4283      	cmp	r3, r0
 80076dc:	d143      	bne.n	8007766 <_malloc_r+0xda>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	3703      	adds	r7, #3
 80076e2:	1aff      	subs	r7, r7, r3
 80076e4:	2303      	movs	r3, #3
 80076e6:	439f      	bics	r7, r3
 80076e8:	3708      	adds	r7, #8
 80076ea:	2f0c      	cmp	r7, #12
 80076ec:	d200      	bcs.n	80076f0 <_malloc_r+0x64>
 80076ee:	270c      	movs	r7, #12
 80076f0:	0039      	movs	r1, r7
 80076f2:	0030      	movs	r0, r6
 80076f4:	f7ff ffa8 	bl	8007648 <sbrk_aligned>
 80076f8:	1c43      	adds	r3, r0, #1
 80076fa:	d034      	beq.n	8007766 <_malloc_r+0xda>
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	19df      	adds	r7, r3, r7
 8007700:	6027      	str	r7, [r4, #0]
 8007702:	e013      	b.n	800772c <_malloc_r+0xa0>
 8007704:	2b00      	cmp	r3, #0
 8007706:	dacb      	bge.n	80076a0 <_malloc_r+0x14>
 8007708:	230c      	movs	r3, #12
 800770a:	2500      	movs	r5, #0
 800770c:	6033      	str	r3, [r6, #0]
 800770e:	0028      	movs	r0, r5
 8007710:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007712:	6822      	ldr	r2, [r4, #0]
 8007714:	1bd1      	subs	r1, r2, r7
 8007716:	d420      	bmi.n	800775a <_malloc_r+0xce>
 8007718:	290b      	cmp	r1, #11
 800771a:	d917      	bls.n	800774c <_malloc_r+0xc0>
 800771c:	19e2      	adds	r2, r4, r7
 800771e:	6027      	str	r7, [r4, #0]
 8007720:	42a3      	cmp	r3, r4
 8007722:	d111      	bne.n	8007748 <_malloc_r+0xbc>
 8007724:	602a      	str	r2, [r5, #0]
 8007726:	6863      	ldr	r3, [r4, #4]
 8007728:	6011      	str	r1, [r2, #0]
 800772a:	6053      	str	r3, [r2, #4]
 800772c:	0030      	movs	r0, r6
 800772e:	0025      	movs	r5, r4
 8007730:	f001 fa5e 	bl	8008bf0 <__malloc_unlock>
 8007734:	2207      	movs	r2, #7
 8007736:	350b      	adds	r5, #11
 8007738:	1d23      	adds	r3, r4, #4
 800773a:	4395      	bics	r5, r2
 800773c:	1aea      	subs	r2, r5, r3
 800773e:	429d      	cmp	r5, r3
 8007740:	d0e5      	beq.n	800770e <_malloc_r+0x82>
 8007742:	1b5b      	subs	r3, r3, r5
 8007744:	50a3      	str	r3, [r4, r2]
 8007746:	e7e2      	b.n	800770e <_malloc_r+0x82>
 8007748:	605a      	str	r2, [r3, #4]
 800774a:	e7ec      	b.n	8007726 <_malloc_r+0x9a>
 800774c:	6862      	ldr	r2, [r4, #4]
 800774e:	42a3      	cmp	r3, r4
 8007750:	d101      	bne.n	8007756 <_malloc_r+0xca>
 8007752:	602a      	str	r2, [r5, #0]
 8007754:	e7ea      	b.n	800772c <_malloc_r+0xa0>
 8007756:	605a      	str	r2, [r3, #4]
 8007758:	e7e8      	b.n	800772c <_malloc_r+0xa0>
 800775a:	0023      	movs	r3, r4
 800775c:	6864      	ldr	r4, [r4, #4]
 800775e:	e7a7      	b.n	80076b0 <_malloc_r+0x24>
 8007760:	002c      	movs	r4, r5
 8007762:	686d      	ldr	r5, [r5, #4]
 8007764:	e7af      	b.n	80076c6 <_malloc_r+0x3a>
 8007766:	230c      	movs	r3, #12
 8007768:	0030      	movs	r0, r6
 800776a:	6033      	str	r3, [r6, #0]
 800776c:	f001 fa40 	bl	8008bf0 <__malloc_unlock>
 8007770:	e7cd      	b.n	800770e <_malloc_r+0x82>
 8007772:	46c0      	nop			; (mov r8, r8)
 8007774:	200002cc 	.word	0x200002cc

08007778 <_realloc_r>:
 8007778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800777a:	0007      	movs	r7, r0
 800777c:	000e      	movs	r6, r1
 800777e:	0014      	movs	r4, r2
 8007780:	2900      	cmp	r1, #0
 8007782:	d105      	bne.n	8007790 <_realloc_r+0x18>
 8007784:	0011      	movs	r1, r2
 8007786:	f7ff ff81 	bl	800768c <_malloc_r>
 800778a:	0005      	movs	r5, r0
 800778c:	0028      	movs	r0, r5
 800778e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007790:	2a00      	cmp	r2, #0
 8007792:	d103      	bne.n	800779c <_realloc_r+0x24>
 8007794:	f001 fa34 	bl	8008c00 <_free_r>
 8007798:	0025      	movs	r5, r4
 800779a:	e7f7      	b.n	800778c <_realloc_r+0x14>
 800779c:	f001 fa7a 	bl	8008c94 <_malloc_usable_size_r>
 80077a0:	9001      	str	r0, [sp, #4]
 80077a2:	4284      	cmp	r4, r0
 80077a4:	d803      	bhi.n	80077ae <_realloc_r+0x36>
 80077a6:	0035      	movs	r5, r6
 80077a8:	0843      	lsrs	r3, r0, #1
 80077aa:	42a3      	cmp	r3, r4
 80077ac:	d3ee      	bcc.n	800778c <_realloc_r+0x14>
 80077ae:	0021      	movs	r1, r4
 80077b0:	0038      	movs	r0, r7
 80077b2:	f7ff ff6b 	bl	800768c <_malloc_r>
 80077b6:	1e05      	subs	r5, r0, #0
 80077b8:	d0e8      	beq.n	800778c <_realloc_r+0x14>
 80077ba:	9b01      	ldr	r3, [sp, #4]
 80077bc:	0022      	movs	r2, r4
 80077be:	429c      	cmp	r4, r3
 80077c0:	d900      	bls.n	80077c4 <_realloc_r+0x4c>
 80077c2:	001a      	movs	r2, r3
 80077c4:	0031      	movs	r1, r6
 80077c6:	0028      	movs	r0, r5
 80077c8:	f001 f9ed 	bl	8008ba6 <memcpy>
 80077cc:	0031      	movs	r1, r6
 80077ce:	0038      	movs	r0, r7
 80077d0:	f001 fa16 	bl	8008c00 <_free_r>
 80077d4:	e7da      	b.n	800778c <_realloc_r+0x14>
	...

080077d8 <__ssputs_r>:
 80077d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077da:	688e      	ldr	r6, [r1, #8]
 80077dc:	b085      	sub	sp, #20
 80077de:	0007      	movs	r7, r0
 80077e0:	000c      	movs	r4, r1
 80077e2:	9203      	str	r2, [sp, #12]
 80077e4:	9301      	str	r3, [sp, #4]
 80077e6:	429e      	cmp	r6, r3
 80077e8:	d83c      	bhi.n	8007864 <__ssputs_r+0x8c>
 80077ea:	2390      	movs	r3, #144	; 0x90
 80077ec:	898a      	ldrh	r2, [r1, #12]
 80077ee:	00db      	lsls	r3, r3, #3
 80077f0:	421a      	tst	r2, r3
 80077f2:	d034      	beq.n	800785e <__ssputs_r+0x86>
 80077f4:	6909      	ldr	r1, [r1, #16]
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	6960      	ldr	r0, [r4, #20]
 80077fa:	1a5b      	subs	r3, r3, r1
 80077fc:	9302      	str	r3, [sp, #8]
 80077fe:	2303      	movs	r3, #3
 8007800:	4343      	muls	r3, r0
 8007802:	0fdd      	lsrs	r5, r3, #31
 8007804:	18ed      	adds	r5, r5, r3
 8007806:	9b01      	ldr	r3, [sp, #4]
 8007808:	9802      	ldr	r0, [sp, #8]
 800780a:	3301      	adds	r3, #1
 800780c:	181b      	adds	r3, r3, r0
 800780e:	106d      	asrs	r5, r5, #1
 8007810:	42ab      	cmp	r3, r5
 8007812:	d900      	bls.n	8007816 <__ssputs_r+0x3e>
 8007814:	001d      	movs	r5, r3
 8007816:	0553      	lsls	r3, r2, #21
 8007818:	d532      	bpl.n	8007880 <__ssputs_r+0xa8>
 800781a:	0029      	movs	r1, r5
 800781c:	0038      	movs	r0, r7
 800781e:	f7ff ff35 	bl	800768c <_malloc_r>
 8007822:	1e06      	subs	r6, r0, #0
 8007824:	d109      	bne.n	800783a <__ssputs_r+0x62>
 8007826:	230c      	movs	r3, #12
 8007828:	603b      	str	r3, [r7, #0]
 800782a:	2340      	movs	r3, #64	; 0x40
 800782c:	2001      	movs	r0, #1
 800782e:	89a2      	ldrh	r2, [r4, #12]
 8007830:	4240      	negs	r0, r0
 8007832:	4313      	orrs	r3, r2
 8007834:	81a3      	strh	r3, [r4, #12]
 8007836:	b005      	add	sp, #20
 8007838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800783a:	9a02      	ldr	r2, [sp, #8]
 800783c:	6921      	ldr	r1, [r4, #16]
 800783e:	f001 f9b2 	bl	8008ba6 <memcpy>
 8007842:	89a3      	ldrh	r3, [r4, #12]
 8007844:	4a14      	ldr	r2, [pc, #80]	; (8007898 <__ssputs_r+0xc0>)
 8007846:	401a      	ands	r2, r3
 8007848:	2380      	movs	r3, #128	; 0x80
 800784a:	4313      	orrs	r3, r2
 800784c:	81a3      	strh	r3, [r4, #12]
 800784e:	9b02      	ldr	r3, [sp, #8]
 8007850:	6126      	str	r6, [r4, #16]
 8007852:	18f6      	adds	r6, r6, r3
 8007854:	6026      	str	r6, [r4, #0]
 8007856:	6165      	str	r5, [r4, #20]
 8007858:	9e01      	ldr	r6, [sp, #4]
 800785a:	1aed      	subs	r5, r5, r3
 800785c:	60a5      	str	r5, [r4, #8]
 800785e:	9b01      	ldr	r3, [sp, #4]
 8007860:	429e      	cmp	r6, r3
 8007862:	d900      	bls.n	8007866 <__ssputs_r+0x8e>
 8007864:	9e01      	ldr	r6, [sp, #4]
 8007866:	0032      	movs	r2, r6
 8007868:	9903      	ldr	r1, [sp, #12]
 800786a:	6820      	ldr	r0, [r4, #0]
 800786c:	f001 f9a4 	bl	8008bb8 <memmove>
 8007870:	68a3      	ldr	r3, [r4, #8]
 8007872:	2000      	movs	r0, #0
 8007874:	1b9b      	subs	r3, r3, r6
 8007876:	60a3      	str	r3, [r4, #8]
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	199e      	adds	r6, r3, r6
 800787c:	6026      	str	r6, [r4, #0]
 800787e:	e7da      	b.n	8007836 <__ssputs_r+0x5e>
 8007880:	002a      	movs	r2, r5
 8007882:	0038      	movs	r0, r7
 8007884:	f7ff ff78 	bl	8007778 <_realloc_r>
 8007888:	1e06      	subs	r6, r0, #0
 800788a:	d1e0      	bne.n	800784e <__ssputs_r+0x76>
 800788c:	0038      	movs	r0, r7
 800788e:	6921      	ldr	r1, [r4, #16]
 8007890:	f001 f9b6 	bl	8008c00 <_free_r>
 8007894:	e7c7      	b.n	8007826 <__ssputs_r+0x4e>
 8007896:	46c0      	nop			; (mov r8, r8)
 8007898:	fffffb7f 	.word	0xfffffb7f

0800789c <_svfiprintf_r>:
 800789c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800789e:	b0a1      	sub	sp, #132	; 0x84
 80078a0:	9003      	str	r0, [sp, #12]
 80078a2:	001d      	movs	r5, r3
 80078a4:	898b      	ldrh	r3, [r1, #12]
 80078a6:	000f      	movs	r7, r1
 80078a8:	0016      	movs	r6, r2
 80078aa:	061b      	lsls	r3, r3, #24
 80078ac:	d511      	bpl.n	80078d2 <_svfiprintf_r+0x36>
 80078ae:	690b      	ldr	r3, [r1, #16]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10e      	bne.n	80078d2 <_svfiprintf_r+0x36>
 80078b4:	2140      	movs	r1, #64	; 0x40
 80078b6:	f7ff fee9 	bl	800768c <_malloc_r>
 80078ba:	6038      	str	r0, [r7, #0]
 80078bc:	6138      	str	r0, [r7, #16]
 80078be:	2800      	cmp	r0, #0
 80078c0:	d105      	bne.n	80078ce <_svfiprintf_r+0x32>
 80078c2:	230c      	movs	r3, #12
 80078c4:	9a03      	ldr	r2, [sp, #12]
 80078c6:	3801      	subs	r0, #1
 80078c8:	6013      	str	r3, [r2, #0]
 80078ca:	b021      	add	sp, #132	; 0x84
 80078cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078ce:	2340      	movs	r3, #64	; 0x40
 80078d0:	617b      	str	r3, [r7, #20]
 80078d2:	2300      	movs	r3, #0
 80078d4:	ac08      	add	r4, sp, #32
 80078d6:	6163      	str	r3, [r4, #20]
 80078d8:	3320      	adds	r3, #32
 80078da:	7663      	strb	r3, [r4, #25]
 80078dc:	3310      	adds	r3, #16
 80078de:	76a3      	strb	r3, [r4, #26]
 80078e0:	9507      	str	r5, [sp, #28]
 80078e2:	0035      	movs	r5, r6
 80078e4:	782b      	ldrb	r3, [r5, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <_svfiprintf_r+0x52>
 80078ea:	2b25      	cmp	r3, #37	; 0x25
 80078ec:	d147      	bne.n	800797e <_svfiprintf_r+0xe2>
 80078ee:	1bab      	subs	r3, r5, r6
 80078f0:	9305      	str	r3, [sp, #20]
 80078f2:	42b5      	cmp	r5, r6
 80078f4:	d00c      	beq.n	8007910 <_svfiprintf_r+0x74>
 80078f6:	0032      	movs	r2, r6
 80078f8:	0039      	movs	r1, r7
 80078fa:	9803      	ldr	r0, [sp, #12]
 80078fc:	f7ff ff6c 	bl	80077d8 <__ssputs_r>
 8007900:	1c43      	adds	r3, r0, #1
 8007902:	d100      	bne.n	8007906 <_svfiprintf_r+0x6a>
 8007904:	e0ae      	b.n	8007a64 <_svfiprintf_r+0x1c8>
 8007906:	6962      	ldr	r2, [r4, #20]
 8007908:	9b05      	ldr	r3, [sp, #20]
 800790a:	4694      	mov	ip, r2
 800790c:	4463      	add	r3, ip
 800790e:	6163      	str	r3, [r4, #20]
 8007910:	782b      	ldrb	r3, [r5, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d100      	bne.n	8007918 <_svfiprintf_r+0x7c>
 8007916:	e0a5      	b.n	8007a64 <_svfiprintf_r+0x1c8>
 8007918:	2201      	movs	r2, #1
 800791a:	2300      	movs	r3, #0
 800791c:	4252      	negs	r2, r2
 800791e:	6062      	str	r2, [r4, #4]
 8007920:	a904      	add	r1, sp, #16
 8007922:	3254      	adds	r2, #84	; 0x54
 8007924:	1852      	adds	r2, r2, r1
 8007926:	1c6e      	adds	r6, r5, #1
 8007928:	6023      	str	r3, [r4, #0]
 800792a:	60e3      	str	r3, [r4, #12]
 800792c:	60a3      	str	r3, [r4, #8]
 800792e:	7013      	strb	r3, [r2, #0]
 8007930:	65a3      	str	r3, [r4, #88]	; 0x58
 8007932:	2205      	movs	r2, #5
 8007934:	7831      	ldrb	r1, [r6, #0]
 8007936:	4854      	ldr	r0, [pc, #336]	; (8007a88 <_svfiprintf_r+0x1ec>)
 8007938:	f001 f92a 	bl	8008b90 <memchr>
 800793c:	1c75      	adds	r5, r6, #1
 800793e:	2800      	cmp	r0, #0
 8007940:	d11f      	bne.n	8007982 <_svfiprintf_r+0xe6>
 8007942:	6822      	ldr	r2, [r4, #0]
 8007944:	06d3      	lsls	r3, r2, #27
 8007946:	d504      	bpl.n	8007952 <_svfiprintf_r+0xb6>
 8007948:	2353      	movs	r3, #83	; 0x53
 800794a:	a904      	add	r1, sp, #16
 800794c:	185b      	adds	r3, r3, r1
 800794e:	2120      	movs	r1, #32
 8007950:	7019      	strb	r1, [r3, #0]
 8007952:	0713      	lsls	r3, r2, #28
 8007954:	d504      	bpl.n	8007960 <_svfiprintf_r+0xc4>
 8007956:	2353      	movs	r3, #83	; 0x53
 8007958:	a904      	add	r1, sp, #16
 800795a:	185b      	adds	r3, r3, r1
 800795c:	212b      	movs	r1, #43	; 0x2b
 800795e:	7019      	strb	r1, [r3, #0]
 8007960:	7833      	ldrb	r3, [r6, #0]
 8007962:	2b2a      	cmp	r3, #42	; 0x2a
 8007964:	d016      	beq.n	8007994 <_svfiprintf_r+0xf8>
 8007966:	0035      	movs	r5, r6
 8007968:	2100      	movs	r1, #0
 800796a:	200a      	movs	r0, #10
 800796c:	68e3      	ldr	r3, [r4, #12]
 800796e:	782a      	ldrb	r2, [r5, #0]
 8007970:	1c6e      	adds	r6, r5, #1
 8007972:	3a30      	subs	r2, #48	; 0x30
 8007974:	2a09      	cmp	r2, #9
 8007976:	d94e      	bls.n	8007a16 <_svfiprintf_r+0x17a>
 8007978:	2900      	cmp	r1, #0
 800797a:	d111      	bne.n	80079a0 <_svfiprintf_r+0x104>
 800797c:	e017      	b.n	80079ae <_svfiprintf_r+0x112>
 800797e:	3501      	adds	r5, #1
 8007980:	e7b0      	b.n	80078e4 <_svfiprintf_r+0x48>
 8007982:	4b41      	ldr	r3, [pc, #260]	; (8007a88 <_svfiprintf_r+0x1ec>)
 8007984:	6822      	ldr	r2, [r4, #0]
 8007986:	1ac0      	subs	r0, r0, r3
 8007988:	2301      	movs	r3, #1
 800798a:	4083      	lsls	r3, r0
 800798c:	4313      	orrs	r3, r2
 800798e:	002e      	movs	r6, r5
 8007990:	6023      	str	r3, [r4, #0]
 8007992:	e7ce      	b.n	8007932 <_svfiprintf_r+0x96>
 8007994:	9b07      	ldr	r3, [sp, #28]
 8007996:	1d19      	adds	r1, r3, #4
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	9107      	str	r1, [sp, #28]
 800799c:	2b00      	cmp	r3, #0
 800799e:	db01      	blt.n	80079a4 <_svfiprintf_r+0x108>
 80079a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80079a2:	e004      	b.n	80079ae <_svfiprintf_r+0x112>
 80079a4:	425b      	negs	r3, r3
 80079a6:	60e3      	str	r3, [r4, #12]
 80079a8:	2302      	movs	r3, #2
 80079aa:	4313      	orrs	r3, r2
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	782b      	ldrb	r3, [r5, #0]
 80079b0:	2b2e      	cmp	r3, #46	; 0x2e
 80079b2:	d10a      	bne.n	80079ca <_svfiprintf_r+0x12e>
 80079b4:	786b      	ldrb	r3, [r5, #1]
 80079b6:	2b2a      	cmp	r3, #42	; 0x2a
 80079b8:	d135      	bne.n	8007a26 <_svfiprintf_r+0x18a>
 80079ba:	9b07      	ldr	r3, [sp, #28]
 80079bc:	3502      	adds	r5, #2
 80079be:	1d1a      	adds	r2, r3, #4
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	9207      	str	r2, [sp, #28]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	db2b      	blt.n	8007a20 <_svfiprintf_r+0x184>
 80079c8:	9309      	str	r3, [sp, #36]	; 0x24
 80079ca:	4e30      	ldr	r6, [pc, #192]	; (8007a8c <_svfiprintf_r+0x1f0>)
 80079cc:	2203      	movs	r2, #3
 80079ce:	0030      	movs	r0, r6
 80079d0:	7829      	ldrb	r1, [r5, #0]
 80079d2:	f001 f8dd 	bl	8008b90 <memchr>
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d006      	beq.n	80079e8 <_svfiprintf_r+0x14c>
 80079da:	2340      	movs	r3, #64	; 0x40
 80079dc:	1b80      	subs	r0, r0, r6
 80079de:	4083      	lsls	r3, r0
 80079e0:	6822      	ldr	r2, [r4, #0]
 80079e2:	3501      	adds	r5, #1
 80079e4:	4313      	orrs	r3, r2
 80079e6:	6023      	str	r3, [r4, #0]
 80079e8:	7829      	ldrb	r1, [r5, #0]
 80079ea:	2206      	movs	r2, #6
 80079ec:	4828      	ldr	r0, [pc, #160]	; (8007a90 <_svfiprintf_r+0x1f4>)
 80079ee:	1c6e      	adds	r6, r5, #1
 80079f0:	7621      	strb	r1, [r4, #24]
 80079f2:	f001 f8cd 	bl	8008b90 <memchr>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d03c      	beq.n	8007a74 <_svfiprintf_r+0x1d8>
 80079fa:	4b26      	ldr	r3, [pc, #152]	; (8007a94 <_svfiprintf_r+0x1f8>)
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d125      	bne.n	8007a4c <_svfiprintf_r+0x1b0>
 8007a00:	2207      	movs	r2, #7
 8007a02:	9b07      	ldr	r3, [sp, #28]
 8007a04:	3307      	adds	r3, #7
 8007a06:	4393      	bics	r3, r2
 8007a08:	3308      	adds	r3, #8
 8007a0a:	9307      	str	r3, [sp, #28]
 8007a0c:	6963      	ldr	r3, [r4, #20]
 8007a0e:	9a04      	ldr	r2, [sp, #16]
 8007a10:	189b      	adds	r3, r3, r2
 8007a12:	6163      	str	r3, [r4, #20]
 8007a14:	e765      	b.n	80078e2 <_svfiprintf_r+0x46>
 8007a16:	4343      	muls	r3, r0
 8007a18:	0035      	movs	r5, r6
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	189b      	adds	r3, r3, r2
 8007a1e:	e7a6      	b.n	800796e <_svfiprintf_r+0xd2>
 8007a20:	2301      	movs	r3, #1
 8007a22:	425b      	negs	r3, r3
 8007a24:	e7d0      	b.n	80079c8 <_svfiprintf_r+0x12c>
 8007a26:	2300      	movs	r3, #0
 8007a28:	200a      	movs	r0, #10
 8007a2a:	001a      	movs	r2, r3
 8007a2c:	3501      	adds	r5, #1
 8007a2e:	6063      	str	r3, [r4, #4]
 8007a30:	7829      	ldrb	r1, [r5, #0]
 8007a32:	1c6e      	adds	r6, r5, #1
 8007a34:	3930      	subs	r1, #48	; 0x30
 8007a36:	2909      	cmp	r1, #9
 8007a38:	d903      	bls.n	8007a42 <_svfiprintf_r+0x1a6>
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0c5      	beq.n	80079ca <_svfiprintf_r+0x12e>
 8007a3e:	9209      	str	r2, [sp, #36]	; 0x24
 8007a40:	e7c3      	b.n	80079ca <_svfiprintf_r+0x12e>
 8007a42:	4342      	muls	r2, r0
 8007a44:	0035      	movs	r5, r6
 8007a46:	2301      	movs	r3, #1
 8007a48:	1852      	adds	r2, r2, r1
 8007a4a:	e7f1      	b.n	8007a30 <_svfiprintf_r+0x194>
 8007a4c:	ab07      	add	r3, sp, #28
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	003a      	movs	r2, r7
 8007a52:	0021      	movs	r1, r4
 8007a54:	4b10      	ldr	r3, [pc, #64]	; (8007a98 <_svfiprintf_r+0x1fc>)
 8007a56:	9803      	ldr	r0, [sp, #12]
 8007a58:	e000      	b.n	8007a5c <_svfiprintf_r+0x1c0>
 8007a5a:	bf00      	nop
 8007a5c:	9004      	str	r0, [sp, #16]
 8007a5e:	9b04      	ldr	r3, [sp, #16]
 8007a60:	3301      	adds	r3, #1
 8007a62:	d1d3      	bne.n	8007a0c <_svfiprintf_r+0x170>
 8007a64:	89bb      	ldrh	r3, [r7, #12]
 8007a66:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007a68:	065b      	lsls	r3, r3, #25
 8007a6a:	d400      	bmi.n	8007a6e <_svfiprintf_r+0x1d2>
 8007a6c:	e72d      	b.n	80078ca <_svfiprintf_r+0x2e>
 8007a6e:	2001      	movs	r0, #1
 8007a70:	4240      	negs	r0, r0
 8007a72:	e72a      	b.n	80078ca <_svfiprintf_r+0x2e>
 8007a74:	ab07      	add	r3, sp, #28
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	003a      	movs	r2, r7
 8007a7a:	0021      	movs	r1, r4
 8007a7c:	4b06      	ldr	r3, [pc, #24]	; (8007a98 <_svfiprintf_r+0x1fc>)
 8007a7e:	9803      	ldr	r0, [sp, #12]
 8007a80:	f000 f87c 	bl	8007b7c <_printf_i>
 8007a84:	e7ea      	b.n	8007a5c <_svfiprintf_r+0x1c0>
 8007a86:	46c0      	nop			; (mov r8, r8)
 8007a88:	0800a8fc 	.word	0x0800a8fc
 8007a8c:	0800a902 	.word	0x0800a902
 8007a90:	0800a906 	.word	0x0800a906
 8007a94:	00000000 	.word	0x00000000
 8007a98:	080077d9 	.word	0x080077d9

08007a9c <_printf_common>:
 8007a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a9e:	0015      	movs	r5, r2
 8007aa0:	9301      	str	r3, [sp, #4]
 8007aa2:	688a      	ldr	r2, [r1, #8]
 8007aa4:	690b      	ldr	r3, [r1, #16]
 8007aa6:	000c      	movs	r4, r1
 8007aa8:	9000      	str	r0, [sp, #0]
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	da00      	bge.n	8007ab0 <_printf_common+0x14>
 8007aae:	0013      	movs	r3, r2
 8007ab0:	0022      	movs	r2, r4
 8007ab2:	602b      	str	r3, [r5, #0]
 8007ab4:	3243      	adds	r2, #67	; 0x43
 8007ab6:	7812      	ldrb	r2, [r2, #0]
 8007ab8:	2a00      	cmp	r2, #0
 8007aba:	d001      	beq.n	8007ac0 <_printf_common+0x24>
 8007abc:	3301      	adds	r3, #1
 8007abe:	602b      	str	r3, [r5, #0]
 8007ac0:	6823      	ldr	r3, [r4, #0]
 8007ac2:	069b      	lsls	r3, r3, #26
 8007ac4:	d502      	bpl.n	8007acc <_printf_common+0x30>
 8007ac6:	682b      	ldr	r3, [r5, #0]
 8007ac8:	3302      	adds	r3, #2
 8007aca:	602b      	str	r3, [r5, #0]
 8007acc:	6822      	ldr	r2, [r4, #0]
 8007ace:	2306      	movs	r3, #6
 8007ad0:	0017      	movs	r7, r2
 8007ad2:	401f      	ands	r7, r3
 8007ad4:	421a      	tst	r2, r3
 8007ad6:	d027      	beq.n	8007b28 <_printf_common+0x8c>
 8007ad8:	0023      	movs	r3, r4
 8007ada:	3343      	adds	r3, #67	; 0x43
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	1e5a      	subs	r2, r3, #1
 8007ae0:	4193      	sbcs	r3, r2
 8007ae2:	6822      	ldr	r2, [r4, #0]
 8007ae4:	0692      	lsls	r2, r2, #26
 8007ae6:	d430      	bmi.n	8007b4a <_printf_common+0xae>
 8007ae8:	0022      	movs	r2, r4
 8007aea:	9901      	ldr	r1, [sp, #4]
 8007aec:	9800      	ldr	r0, [sp, #0]
 8007aee:	9e08      	ldr	r6, [sp, #32]
 8007af0:	3243      	adds	r2, #67	; 0x43
 8007af2:	47b0      	blx	r6
 8007af4:	1c43      	adds	r3, r0, #1
 8007af6:	d025      	beq.n	8007b44 <_printf_common+0xa8>
 8007af8:	2306      	movs	r3, #6
 8007afa:	6820      	ldr	r0, [r4, #0]
 8007afc:	682a      	ldr	r2, [r5, #0]
 8007afe:	68e1      	ldr	r1, [r4, #12]
 8007b00:	2500      	movs	r5, #0
 8007b02:	4003      	ands	r3, r0
 8007b04:	2b04      	cmp	r3, #4
 8007b06:	d103      	bne.n	8007b10 <_printf_common+0x74>
 8007b08:	1a8d      	subs	r5, r1, r2
 8007b0a:	43eb      	mvns	r3, r5
 8007b0c:	17db      	asrs	r3, r3, #31
 8007b0e:	401d      	ands	r5, r3
 8007b10:	68a3      	ldr	r3, [r4, #8]
 8007b12:	6922      	ldr	r2, [r4, #16]
 8007b14:	4293      	cmp	r3, r2
 8007b16:	dd01      	ble.n	8007b1c <_printf_common+0x80>
 8007b18:	1a9b      	subs	r3, r3, r2
 8007b1a:	18ed      	adds	r5, r5, r3
 8007b1c:	2700      	movs	r7, #0
 8007b1e:	42bd      	cmp	r5, r7
 8007b20:	d120      	bne.n	8007b64 <_printf_common+0xc8>
 8007b22:	2000      	movs	r0, #0
 8007b24:	e010      	b.n	8007b48 <_printf_common+0xac>
 8007b26:	3701      	adds	r7, #1
 8007b28:	68e3      	ldr	r3, [r4, #12]
 8007b2a:	682a      	ldr	r2, [r5, #0]
 8007b2c:	1a9b      	subs	r3, r3, r2
 8007b2e:	42bb      	cmp	r3, r7
 8007b30:	ddd2      	ble.n	8007ad8 <_printf_common+0x3c>
 8007b32:	0022      	movs	r2, r4
 8007b34:	2301      	movs	r3, #1
 8007b36:	9901      	ldr	r1, [sp, #4]
 8007b38:	9800      	ldr	r0, [sp, #0]
 8007b3a:	9e08      	ldr	r6, [sp, #32]
 8007b3c:	3219      	adds	r2, #25
 8007b3e:	47b0      	blx	r6
 8007b40:	1c43      	adds	r3, r0, #1
 8007b42:	d1f0      	bne.n	8007b26 <_printf_common+0x8a>
 8007b44:	2001      	movs	r0, #1
 8007b46:	4240      	negs	r0, r0
 8007b48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007b4a:	2030      	movs	r0, #48	; 0x30
 8007b4c:	18e1      	adds	r1, r4, r3
 8007b4e:	3143      	adds	r1, #67	; 0x43
 8007b50:	7008      	strb	r0, [r1, #0]
 8007b52:	0021      	movs	r1, r4
 8007b54:	1c5a      	adds	r2, r3, #1
 8007b56:	3145      	adds	r1, #69	; 0x45
 8007b58:	7809      	ldrb	r1, [r1, #0]
 8007b5a:	18a2      	adds	r2, r4, r2
 8007b5c:	3243      	adds	r2, #67	; 0x43
 8007b5e:	3302      	adds	r3, #2
 8007b60:	7011      	strb	r1, [r2, #0]
 8007b62:	e7c1      	b.n	8007ae8 <_printf_common+0x4c>
 8007b64:	0022      	movs	r2, r4
 8007b66:	2301      	movs	r3, #1
 8007b68:	9901      	ldr	r1, [sp, #4]
 8007b6a:	9800      	ldr	r0, [sp, #0]
 8007b6c:	9e08      	ldr	r6, [sp, #32]
 8007b6e:	321a      	adds	r2, #26
 8007b70:	47b0      	blx	r6
 8007b72:	1c43      	adds	r3, r0, #1
 8007b74:	d0e6      	beq.n	8007b44 <_printf_common+0xa8>
 8007b76:	3701      	adds	r7, #1
 8007b78:	e7d1      	b.n	8007b1e <_printf_common+0x82>
	...

08007b7c <_printf_i>:
 8007b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b7e:	b08b      	sub	sp, #44	; 0x2c
 8007b80:	9206      	str	r2, [sp, #24]
 8007b82:	000a      	movs	r2, r1
 8007b84:	3243      	adds	r2, #67	; 0x43
 8007b86:	9307      	str	r3, [sp, #28]
 8007b88:	9005      	str	r0, [sp, #20]
 8007b8a:	9204      	str	r2, [sp, #16]
 8007b8c:	7e0a      	ldrb	r2, [r1, #24]
 8007b8e:	000c      	movs	r4, r1
 8007b90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b92:	2a78      	cmp	r2, #120	; 0x78
 8007b94:	d807      	bhi.n	8007ba6 <_printf_i+0x2a>
 8007b96:	2a62      	cmp	r2, #98	; 0x62
 8007b98:	d809      	bhi.n	8007bae <_printf_i+0x32>
 8007b9a:	2a00      	cmp	r2, #0
 8007b9c:	d100      	bne.n	8007ba0 <_printf_i+0x24>
 8007b9e:	e0c1      	b.n	8007d24 <_printf_i+0x1a8>
 8007ba0:	2a58      	cmp	r2, #88	; 0x58
 8007ba2:	d100      	bne.n	8007ba6 <_printf_i+0x2a>
 8007ba4:	e08c      	b.n	8007cc0 <_printf_i+0x144>
 8007ba6:	0026      	movs	r6, r4
 8007ba8:	3642      	adds	r6, #66	; 0x42
 8007baa:	7032      	strb	r2, [r6, #0]
 8007bac:	e022      	b.n	8007bf4 <_printf_i+0x78>
 8007bae:	0010      	movs	r0, r2
 8007bb0:	3863      	subs	r0, #99	; 0x63
 8007bb2:	2815      	cmp	r0, #21
 8007bb4:	d8f7      	bhi.n	8007ba6 <_printf_i+0x2a>
 8007bb6:	f7f8 fab1 	bl	800011c <__gnu_thumb1_case_shi>
 8007bba:	0016      	.short	0x0016
 8007bbc:	fff6001f 	.word	0xfff6001f
 8007bc0:	fff6fff6 	.word	0xfff6fff6
 8007bc4:	001ffff6 	.word	0x001ffff6
 8007bc8:	fff6fff6 	.word	0xfff6fff6
 8007bcc:	fff6fff6 	.word	0xfff6fff6
 8007bd0:	003600a8 	.word	0x003600a8
 8007bd4:	fff6009a 	.word	0xfff6009a
 8007bd8:	00b9fff6 	.word	0x00b9fff6
 8007bdc:	0036fff6 	.word	0x0036fff6
 8007be0:	fff6fff6 	.word	0xfff6fff6
 8007be4:	009e      	.short	0x009e
 8007be6:	0026      	movs	r6, r4
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	3642      	adds	r6, #66	; 0x42
 8007bec:	1d11      	adds	r1, r2, #4
 8007bee:	6019      	str	r1, [r3, #0]
 8007bf0:	6813      	ldr	r3, [r2, #0]
 8007bf2:	7033      	strb	r3, [r6, #0]
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e0a7      	b.n	8007d48 <_printf_i+0x1cc>
 8007bf8:	6808      	ldr	r0, [r1, #0]
 8007bfa:	6819      	ldr	r1, [r3, #0]
 8007bfc:	1d0a      	adds	r2, r1, #4
 8007bfe:	0605      	lsls	r5, r0, #24
 8007c00:	d50b      	bpl.n	8007c1a <_printf_i+0x9e>
 8007c02:	680d      	ldr	r5, [r1, #0]
 8007c04:	601a      	str	r2, [r3, #0]
 8007c06:	2d00      	cmp	r5, #0
 8007c08:	da03      	bge.n	8007c12 <_printf_i+0x96>
 8007c0a:	232d      	movs	r3, #45	; 0x2d
 8007c0c:	9a04      	ldr	r2, [sp, #16]
 8007c0e:	426d      	negs	r5, r5
 8007c10:	7013      	strb	r3, [r2, #0]
 8007c12:	4b61      	ldr	r3, [pc, #388]	; (8007d98 <_printf_i+0x21c>)
 8007c14:	270a      	movs	r7, #10
 8007c16:	9303      	str	r3, [sp, #12]
 8007c18:	e01b      	b.n	8007c52 <_printf_i+0xd6>
 8007c1a:	680d      	ldr	r5, [r1, #0]
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	0641      	lsls	r1, r0, #25
 8007c20:	d5f1      	bpl.n	8007c06 <_printf_i+0x8a>
 8007c22:	b22d      	sxth	r5, r5
 8007c24:	e7ef      	b.n	8007c06 <_printf_i+0x8a>
 8007c26:	680d      	ldr	r5, [r1, #0]
 8007c28:	6819      	ldr	r1, [r3, #0]
 8007c2a:	1d08      	adds	r0, r1, #4
 8007c2c:	6018      	str	r0, [r3, #0]
 8007c2e:	062e      	lsls	r6, r5, #24
 8007c30:	d501      	bpl.n	8007c36 <_printf_i+0xba>
 8007c32:	680d      	ldr	r5, [r1, #0]
 8007c34:	e003      	b.n	8007c3e <_printf_i+0xc2>
 8007c36:	066d      	lsls	r5, r5, #25
 8007c38:	d5fb      	bpl.n	8007c32 <_printf_i+0xb6>
 8007c3a:	680d      	ldr	r5, [r1, #0]
 8007c3c:	b2ad      	uxth	r5, r5
 8007c3e:	4b56      	ldr	r3, [pc, #344]	; (8007d98 <_printf_i+0x21c>)
 8007c40:	2708      	movs	r7, #8
 8007c42:	9303      	str	r3, [sp, #12]
 8007c44:	2a6f      	cmp	r2, #111	; 0x6f
 8007c46:	d000      	beq.n	8007c4a <_printf_i+0xce>
 8007c48:	3702      	adds	r7, #2
 8007c4a:	0023      	movs	r3, r4
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	3343      	adds	r3, #67	; 0x43
 8007c50:	701a      	strb	r2, [r3, #0]
 8007c52:	6863      	ldr	r3, [r4, #4]
 8007c54:	60a3      	str	r3, [r4, #8]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	db03      	blt.n	8007c62 <_printf_i+0xe6>
 8007c5a:	2204      	movs	r2, #4
 8007c5c:	6821      	ldr	r1, [r4, #0]
 8007c5e:	4391      	bics	r1, r2
 8007c60:	6021      	str	r1, [r4, #0]
 8007c62:	2d00      	cmp	r5, #0
 8007c64:	d102      	bne.n	8007c6c <_printf_i+0xf0>
 8007c66:	9e04      	ldr	r6, [sp, #16]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00c      	beq.n	8007c86 <_printf_i+0x10a>
 8007c6c:	9e04      	ldr	r6, [sp, #16]
 8007c6e:	0028      	movs	r0, r5
 8007c70:	0039      	movs	r1, r7
 8007c72:	f7f8 fae3 	bl	800023c <__aeabi_uidivmod>
 8007c76:	9b03      	ldr	r3, [sp, #12]
 8007c78:	3e01      	subs	r6, #1
 8007c7a:	5c5b      	ldrb	r3, [r3, r1]
 8007c7c:	7033      	strb	r3, [r6, #0]
 8007c7e:	002b      	movs	r3, r5
 8007c80:	0005      	movs	r5, r0
 8007c82:	429f      	cmp	r7, r3
 8007c84:	d9f3      	bls.n	8007c6e <_printf_i+0xf2>
 8007c86:	2f08      	cmp	r7, #8
 8007c88:	d109      	bne.n	8007c9e <_printf_i+0x122>
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	07db      	lsls	r3, r3, #31
 8007c8e:	d506      	bpl.n	8007c9e <_printf_i+0x122>
 8007c90:	6863      	ldr	r3, [r4, #4]
 8007c92:	6922      	ldr	r2, [r4, #16]
 8007c94:	4293      	cmp	r3, r2
 8007c96:	dc02      	bgt.n	8007c9e <_printf_i+0x122>
 8007c98:	2330      	movs	r3, #48	; 0x30
 8007c9a:	3e01      	subs	r6, #1
 8007c9c:	7033      	strb	r3, [r6, #0]
 8007c9e:	9b04      	ldr	r3, [sp, #16]
 8007ca0:	1b9b      	subs	r3, r3, r6
 8007ca2:	6123      	str	r3, [r4, #16]
 8007ca4:	9b07      	ldr	r3, [sp, #28]
 8007ca6:	0021      	movs	r1, r4
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	9805      	ldr	r0, [sp, #20]
 8007cac:	9b06      	ldr	r3, [sp, #24]
 8007cae:	aa09      	add	r2, sp, #36	; 0x24
 8007cb0:	f7ff fef4 	bl	8007a9c <_printf_common>
 8007cb4:	1c43      	adds	r3, r0, #1
 8007cb6:	d14c      	bne.n	8007d52 <_printf_i+0x1d6>
 8007cb8:	2001      	movs	r0, #1
 8007cba:	4240      	negs	r0, r0
 8007cbc:	b00b      	add	sp, #44	; 0x2c
 8007cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cc0:	3145      	adds	r1, #69	; 0x45
 8007cc2:	700a      	strb	r2, [r1, #0]
 8007cc4:	4a34      	ldr	r2, [pc, #208]	; (8007d98 <_printf_i+0x21c>)
 8007cc6:	9203      	str	r2, [sp, #12]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	6821      	ldr	r1, [r4, #0]
 8007ccc:	ca20      	ldmia	r2!, {r5}
 8007cce:	601a      	str	r2, [r3, #0]
 8007cd0:	0608      	lsls	r0, r1, #24
 8007cd2:	d516      	bpl.n	8007d02 <_printf_i+0x186>
 8007cd4:	07cb      	lsls	r3, r1, #31
 8007cd6:	d502      	bpl.n	8007cde <_printf_i+0x162>
 8007cd8:	2320      	movs	r3, #32
 8007cda:	4319      	orrs	r1, r3
 8007cdc:	6021      	str	r1, [r4, #0]
 8007cde:	2710      	movs	r7, #16
 8007ce0:	2d00      	cmp	r5, #0
 8007ce2:	d1b2      	bne.n	8007c4a <_printf_i+0xce>
 8007ce4:	2320      	movs	r3, #32
 8007ce6:	6822      	ldr	r2, [r4, #0]
 8007ce8:	439a      	bics	r2, r3
 8007cea:	6022      	str	r2, [r4, #0]
 8007cec:	e7ad      	b.n	8007c4a <_printf_i+0xce>
 8007cee:	2220      	movs	r2, #32
 8007cf0:	6809      	ldr	r1, [r1, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	6022      	str	r2, [r4, #0]
 8007cf6:	0022      	movs	r2, r4
 8007cf8:	2178      	movs	r1, #120	; 0x78
 8007cfa:	3245      	adds	r2, #69	; 0x45
 8007cfc:	7011      	strb	r1, [r2, #0]
 8007cfe:	4a27      	ldr	r2, [pc, #156]	; (8007d9c <_printf_i+0x220>)
 8007d00:	e7e1      	b.n	8007cc6 <_printf_i+0x14a>
 8007d02:	0648      	lsls	r0, r1, #25
 8007d04:	d5e6      	bpl.n	8007cd4 <_printf_i+0x158>
 8007d06:	b2ad      	uxth	r5, r5
 8007d08:	e7e4      	b.n	8007cd4 <_printf_i+0x158>
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	680d      	ldr	r5, [r1, #0]
 8007d0e:	1d10      	adds	r0, r2, #4
 8007d10:	6949      	ldr	r1, [r1, #20]
 8007d12:	6018      	str	r0, [r3, #0]
 8007d14:	6813      	ldr	r3, [r2, #0]
 8007d16:	062e      	lsls	r6, r5, #24
 8007d18:	d501      	bpl.n	8007d1e <_printf_i+0x1a2>
 8007d1a:	6019      	str	r1, [r3, #0]
 8007d1c:	e002      	b.n	8007d24 <_printf_i+0x1a8>
 8007d1e:	066d      	lsls	r5, r5, #25
 8007d20:	d5fb      	bpl.n	8007d1a <_printf_i+0x19e>
 8007d22:	8019      	strh	r1, [r3, #0]
 8007d24:	2300      	movs	r3, #0
 8007d26:	9e04      	ldr	r6, [sp, #16]
 8007d28:	6123      	str	r3, [r4, #16]
 8007d2a:	e7bb      	b.n	8007ca4 <_printf_i+0x128>
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	1d11      	adds	r1, r2, #4
 8007d30:	6019      	str	r1, [r3, #0]
 8007d32:	6816      	ldr	r6, [r2, #0]
 8007d34:	2100      	movs	r1, #0
 8007d36:	0030      	movs	r0, r6
 8007d38:	6862      	ldr	r2, [r4, #4]
 8007d3a:	f000 ff29 	bl	8008b90 <memchr>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	d001      	beq.n	8007d46 <_printf_i+0x1ca>
 8007d42:	1b80      	subs	r0, r0, r6
 8007d44:	6060      	str	r0, [r4, #4]
 8007d46:	6863      	ldr	r3, [r4, #4]
 8007d48:	6123      	str	r3, [r4, #16]
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	9a04      	ldr	r2, [sp, #16]
 8007d4e:	7013      	strb	r3, [r2, #0]
 8007d50:	e7a8      	b.n	8007ca4 <_printf_i+0x128>
 8007d52:	6923      	ldr	r3, [r4, #16]
 8007d54:	0032      	movs	r2, r6
 8007d56:	9906      	ldr	r1, [sp, #24]
 8007d58:	9805      	ldr	r0, [sp, #20]
 8007d5a:	9d07      	ldr	r5, [sp, #28]
 8007d5c:	47a8      	blx	r5
 8007d5e:	1c43      	adds	r3, r0, #1
 8007d60:	d0aa      	beq.n	8007cb8 <_printf_i+0x13c>
 8007d62:	6823      	ldr	r3, [r4, #0]
 8007d64:	079b      	lsls	r3, r3, #30
 8007d66:	d415      	bmi.n	8007d94 <_printf_i+0x218>
 8007d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d6a:	68e0      	ldr	r0, [r4, #12]
 8007d6c:	4298      	cmp	r0, r3
 8007d6e:	daa5      	bge.n	8007cbc <_printf_i+0x140>
 8007d70:	0018      	movs	r0, r3
 8007d72:	e7a3      	b.n	8007cbc <_printf_i+0x140>
 8007d74:	0022      	movs	r2, r4
 8007d76:	2301      	movs	r3, #1
 8007d78:	9906      	ldr	r1, [sp, #24]
 8007d7a:	9805      	ldr	r0, [sp, #20]
 8007d7c:	9e07      	ldr	r6, [sp, #28]
 8007d7e:	3219      	adds	r2, #25
 8007d80:	47b0      	blx	r6
 8007d82:	1c43      	adds	r3, r0, #1
 8007d84:	d098      	beq.n	8007cb8 <_printf_i+0x13c>
 8007d86:	3501      	adds	r5, #1
 8007d88:	68e3      	ldr	r3, [r4, #12]
 8007d8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d8c:	1a9b      	subs	r3, r3, r2
 8007d8e:	42ab      	cmp	r3, r5
 8007d90:	dcf0      	bgt.n	8007d74 <_printf_i+0x1f8>
 8007d92:	e7e9      	b.n	8007d68 <_printf_i+0x1ec>
 8007d94:	2500      	movs	r5, #0
 8007d96:	e7f7      	b.n	8007d88 <_printf_i+0x20c>
 8007d98:	0800a90d 	.word	0x0800a90d
 8007d9c:	0800a91e 	.word	0x0800a91e

08007da0 <_sbrk_r>:
 8007da0:	2300      	movs	r3, #0
 8007da2:	b570      	push	{r4, r5, r6, lr}
 8007da4:	4d06      	ldr	r5, [pc, #24]	; (8007dc0 <_sbrk_r+0x20>)
 8007da6:	0004      	movs	r4, r0
 8007da8:	0008      	movs	r0, r1
 8007daa:	602b      	str	r3, [r5, #0]
 8007dac:	f7fb fa28 	bl	8003200 <_sbrk>
 8007db0:	1c43      	adds	r3, r0, #1
 8007db2:	d103      	bne.n	8007dbc <_sbrk_r+0x1c>
 8007db4:	682b      	ldr	r3, [r5, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d000      	beq.n	8007dbc <_sbrk_r+0x1c>
 8007dba:	6023      	str	r3, [r4, #0]
 8007dbc:	bd70      	pop	{r4, r5, r6, pc}
 8007dbe:	46c0      	nop			; (mov r8, r8)
 8007dc0:	200002d4 	.word	0x200002d4

08007dc4 <strcpy>:
 8007dc4:	0003      	movs	r3, r0
 8007dc6:	780a      	ldrb	r2, [r1, #0]
 8007dc8:	3101      	adds	r1, #1
 8007dca:	701a      	strb	r2, [r3, #0]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	2a00      	cmp	r2, #0
 8007dd0:	d1f9      	bne.n	8007dc6 <strcpy+0x2>
 8007dd2:	4770      	bx	lr

08007dd4 <__assert_func>:
 8007dd4:	b530      	push	{r4, r5, lr}
 8007dd6:	0014      	movs	r4, r2
 8007dd8:	001a      	movs	r2, r3
 8007dda:	4b09      	ldr	r3, [pc, #36]	; (8007e00 <__assert_func+0x2c>)
 8007ddc:	0005      	movs	r5, r0
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	b085      	sub	sp, #20
 8007de2:	68d8      	ldr	r0, [r3, #12]
 8007de4:	4b07      	ldr	r3, [pc, #28]	; (8007e04 <__assert_func+0x30>)
 8007de6:	2c00      	cmp	r4, #0
 8007de8:	d101      	bne.n	8007dee <__assert_func+0x1a>
 8007dea:	4b07      	ldr	r3, [pc, #28]	; (8007e08 <__assert_func+0x34>)
 8007dec:	001c      	movs	r4, r3
 8007dee:	9301      	str	r3, [sp, #4]
 8007df0:	9100      	str	r1, [sp, #0]
 8007df2:	002b      	movs	r3, r5
 8007df4:	4905      	ldr	r1, [pc, #20]	; (8007e0c <__assert_func+0x38>)
 8007df6:	9402      	str	r4, [sp, #8]
 8007df8:	f000 feb0 	bl	8008b5c <fiprintf>
 8007dfc:	f001 f982 	bl	8009104 <abort>
 8007e00:	20000010 	.word	0x20000010
 8007e04:	0800a92f 	.word	0x0800a92f
 8007e08:	0800a96a 	.word	0x0800a96a
 8007e0c:	0800a93c 	.word	0x0800a93c

08007e10 <quorem>:
 8007e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e12:	0006      	movs	r6, r0
 8007e14:	690b      	ldr	r3, [r1, #16]
 8007e16:	6932      	ldr	r2, [r6, #16]
 8007e18:	b087      	sub	sp, #28
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	9103      	str	r1, [sp, #12]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	db65      	blt.n	8007eee <quorem+0xde>
 8007e22:	3b01      	subs	r3, #1
 8007e24:	009c      	lsls	r4, r3, #2
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	000b      	movs	r3, r1
 8007e2a:	3314      	adds	r3, #20
 8007e2c:	9305      	str	r3, [sp, #20]
 8007e2e:	191b      	adds	r3, r3, r4
 8007e30:	9304      	str	r3, [sp, #16]
 8007e32:	0033      	movs	r3, r6
 8007e34:	3314      	adds	r3, #20
 8007e36:	9302      	str	r3, [sp, #8]
 8007e38:	191c      	adds	r4, r3, r4
 8007e3a:	9b04      	ldr	r3, [sp, #16]
 8007e3c:	6827      	ldr	r7, [r4, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	0038      	movs	r0, r7
 8007e42:	1c5d      	adds	r5, r3, #1
 8007e44:	0029      	movs	r1, r5
 8007e46:	9301      	str	r3, [sp, #4]
 8007e48:	f7f8 f972 	bl	8000130 <__udivsi3>
 8007e4c:	9001      	str	r0, [sp, #4]
 8007e4e:	42af      	cmp	r7, r5
 8007e50:	d324      	bcc.n	8007e9c <quorem+0x8c>
 8007e52:	2500      	movs	r5, #0
 8007e54:	46ac      	mov	ip, r5
 8007e56:	9802      	ldr	r0, [sp, #8]
 8007e58:	9f05      	ldr	r7, [sp, #20]
 8007e5a:	cf08      	ldmia	r7!, {r3}
 8007e5c:	9a01      	ldr	r2, [sp, #4]
 8007e5e:	b299      	uxth	r1, r3
 8007e60:	4351      	muls	r1, r2
 8007e62:	0c1b      	lsrs	r3, r3, #16
 8007e64:	4353      	muls	r3, r2
 8007e66:	1949      	adds	r1, r1, r5
 8007e68:	0c0a      	lsrs	r2, r1, #16
 8007e6a:	189b      	adds	r3, r3, r2
 8007e6c:	6802      	ldr	r2, [r0, #0]
 8007e6e:	b289      	uxth	r1, r1
 8007e70:	b292      	uxth	r2, r2
 8007e72:	4462      	add	r2, ip
 8007e74:	1a52      	subs	r2, r2, r1
 8007e76:	6801      	ldr	r1, [r0, #0]
 8007e78:	0c1d      	lsrs	r5, r3, #16
 8007e7a:	0c09      	lsrs	r1, r1, #16
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	1acb      	subs	r3, r1, r3
 8007e80:	1411      	asrs	r1, r2, #16
 8007e82:	185b      	adds	r3, r3, r1
 8007e84:	1419      	asrs	r1, r3, #16
 8007e86:	b292      	uxth	r2, r2
 8007e88:	041b      	lsls	r3, r3, #16
 8007e8a:	431a      	orrs	r2, r3
 8007e8c:	9b04      	ldr	r3, [sp, #16]
 8007e8e:	468c      	mov	ip, r1
 8007e90:	c004      	stmia	r0!, {r2}
 8007e92:	42bb      	cmp	r3, r7
 8007e94:	d2e1      	bcs.n	8007e5a <quorem+0x4a>
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d030      	beq.n	8007efe <quorem+0xee>
 8007e9c:	0030      	movs	r0, r6
 8007e9e:	9903      	ldr	r1, [sp, #12]
 8007ea0:	f7ff fa74 	bl	800738c <__mcmp>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	db21      	blt.n	8007eec <quorem+0xdc>
 8007ea8:	0030      	movs	r0, r6
 8007eaa:	2400      	movs	r4, #0
 8007eac:	9b01      	ldr	r3, [sp, #4]
 8007eae:	9903      	ldr	r1, [sp, #12]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	9301      	str	r3, [sp, #4]
 8007eb4:	3014      	adds	r0, #20
 8007eb6:	3114      	adds	r1, #20
 8007eb8:	6803      	ldr	r3, [r0, #0]
 8007eba:	c920      	ldmia	r1!, {r5}
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	1914      	adds	r4, r2, r4
 8007ec0:	b2aa      	uxth	r2, r5
 8007ec2:	1aa2      	subs	r2, r4, r2
 8007ec4:	0c1b      	lsrs	r3, r3, #16
 8007ec6:	0c2d      	lsrs	r5, r5, #16
 8007ec8:	1414      	asrs	r4, r2, #16
 8007eca:	1b5b      	subs	r3, r3, r5
 8007ecc:	191b      	adds	r3, r3, r4
 8007ece:	141c      	asrs	r4, r3, #16
 8007ed0:	b292      	uxth	r2, r2
 8007ed2:	041b      	lsls	r3, r3, #16
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	c008      	stmia	r0!, {r3}
 8007ed8:	9b04      	ldr	r3, [sp, #16]
 8007eda:	428b      	cmp	r3, r1
 8007edc:	d2ec      	bcs.n	8007eb8 <quorem+0xa8>
 8007ede:	9b00      	ldr	r3, [sp, #0]
 8007ee0:	9a02      	ldr	r2, [sp, #8]
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	18d3      	adds	r3, r2, r3
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	2a00      	cmp	r2, #0
 8007eea:	d015      	beq.n	8007f18 <quorem+0x108>
 8007eec:	9801      	ldr	r0, [sp, #4]
 8007eee:	b007      	add	sp, #28
 8007ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ef2:	6823      	ldr	r3, [r4, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d106      	bne.n	8007f06 <quorem+0xf6>
 8007ef8:	9b00      	ldr	r3, [sp, #0]
 8007efa:	3b01      	subs	r3, #1
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	9b02      	ldr	r3, [sp, #8]
 8007f00:	3c04      	subs	r4, #4
 8007f02:	42a3      	cmp	r3, r4
 8007f04:	d3f5      	bcc.n	8007ef2 <quorem+0xe2>
 8007f06:	9b00      	ldr	r3, [sp, #0]
 8007f08:	6133      	str	r3, [r6, #16]
 8007f0a:	e7c7      	b.n	8007e9c <quorem+0x8c>
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	2a00      	cmp	r2, #0
 8007f10:	d106      	bne.n	8007f20 <quorem+0x110>
 8007f12:	9a00      	ldr	r2, [sp, #0]
 8007f14:	3a01      	subs	r2, #1
 8007f16:	9200      	str	r2, [sp, #0]
 8007f18:	9a02      	ldr	r2, [sp, #8]
 8007f1a:	3b04      	subs	r3, #4
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d3f5      	bcc.n	8007f0c <quorem+0xfc>
 8007f20:	9b00      	ldr	r3, [sp, #0]
 8007f22:	6133      	str	r3, [r6, #16]
 8007f24:	e7e2      	b.n	8007eec <quorem+0xdc>
	...

08007f28 <_dtoa_r>:
 8007f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f2a:	b09d      	sub	sp, #116	; 0x74
 8007f2c:	9202      	str	r2, [sp, #8]
 8007f2e:	9303      	str	r3, [sp, #12]
 8007f30:	9b02      	ldr	r3, [sp, #8]
 8007f32:	9c03      	ldr	r4, [sp, #12]
 8007f34:	9308      	str	r3, [sp, #32]
 8007f36:	9409      	str	r4, [sp, #36]	; 0x24
 8007f38:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007f3a:	0007      	movs	r7, r0
 8007f3c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007f3e:	2c00      	cmp	r4, #0
 8007f40:	d10e      	bne.n	8007f60 <_dtoa_r+0x38>
 8007f42:	2010      	movs	r0, #16
 8007f44:	f000 fe1a 	bl	8008b7c <malloc>
 8007f48:	1e02      	subs	r2, r0, #0
 8007f4a:	6278      	str	r0, [r7, #36]	; 0x24
 8007f4c:	d104      	bne.n	8007f58 <_dtoa_r+0x30>
 8007f4e:	21ea      	movs	r1, #234	; 0xea
 8007f50:	4bc7      	ldr	r3, [pc, #796]	; (8008270 <_dtoa_r+0x348>)
 8007f52:	48c8      	ldr	r0, [pc, #800]	; (8008274 <_dtoa_r+0x34c>)
 8007f54:	f7ff ff3e 	bl	8007dd4 <__assert_func>
 8007f58:	6044      	str	r4, [r0, #4]
 8007f5a:	6084      	str	r4, [r0, #8]
 8007f5c:	6004      	str	r4, [r0, #0]
 8007f5e:	60c4      	str	r4, [r0, #12]
 8007f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f62:	6819      	ldr	r1, [r3, #0]
 8007f64:	2900      	cmp	r1, #0
 8007f66:	d00a      	beq.n	8007f7e <_dtoa_r+0x56>
 8007f68:	685a      	ldr	r2, [r3, #4]
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	4093      	lsls	r3, r2
 8007f6e:	604a      	str	r2, [r1, #4]
 8007f70:	608b      	str	r3, [r1, #8]
 8007f72:	0038      	movs	r0, r7
 8007f74:	f7fe ffca 	bl	8006f0c <_Bfree>
 8007f78:	2200      	movs	r2, #0
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	601a      	str	r2, [r3, #0]
 8007f7e:	9b03      	ldr	r3, [sp, #12]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	da20      	bge.n	8007fc6 <_dtoa_r+0x9e>
 8007f84:	2301      	movs	r3, #1
 8007f86:	602b      	str	r3, [r5, #0]
 8007f88:	9b03      	ldr	r3, [sp, #12]
 8007f8a:	005b      	lsls	r3, r3, #1
 8007f8c:	085b      	lsrs	r3, r3, #1
 8007f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f90:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007f92:	4bb9      	ldr	r3, [pc, #740]	; (8008278 <_dtoa_r+0x350>)
 8007f94:	4ab8      	ldr	r2, [pc, #736]	; (8008278 <_dtoa_r+0x350>)
 8007f96:	402b      	ands	r3, r5
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d117      	bne.n	8007fcc <_dtoa_r+0xa4>
 8007f9c:	4bb7      	ldr	r3, [pc, #732]	; (800827c <_dtoa_r+0x354>)
 8007f9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007fa0:	0328      	lsls	r0, r5, #12
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	9b02      	ldr	r3, [sp, #8]
 8007fa6:	0b00      	lsrs	r0, r0, #12
 8007fa8:	4318      	orrs	r0, r3
 8007faa:	d101      	bne.n	8007fb0 <_dtoa_r+0x88>
 8007fac:	f000 fdbf 	bl	8008b2e <_dtoa_r+0xc06>
 8007fb0:	48b3      	ldr	r0, [pc, #716]	; (8008280 <_dtoa_r+0x358>)
 8007fb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007fb4:	9006      	str	r0, [sp, #24]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d002      	beq.n	8007fc0 <_dtoa_r+0x98>
 8007fba:	4bb2      	ldr	r3, [pc, #712]	; (8008284 <_dtoa_r+0x35c>)
 8007fbc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007fbe:	6013      	str	r3, [r2, #0]
 8007fc0:	9806      	ldr	r0, [sp, #24]
 8007fc2:	b01d      	add	sp, #116	; 0x74
 8007fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	602b      	str	r3, [r5, #0]
 8007fca:	e7e1      	b.n	8007f90 <_dtoa_r+0x68>
 8007fcc:	9b08      	ldr	r3, [sp, #32]
 8007fce:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007fd0:	9312      	str	r3, [sp, #72]	; 0x48
 8007fd2:	9413      	str	r4, [sp, #76]	; 0x4c
 8007fd4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007fd6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007fd8:	2200      	movs	r2, #0
 8007fda:	2300      	movs	r3, #0
 8007fdc:	f7f8 fa2e 	bl	800043c <__aeabi_dcmpeq>
 8007fe0:	1e04      	subs	r4, r0, #0
 8007fe2:	d009      	beq.n	8007ff8 <_dtoa_r+0xd0>
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	4ba7      	ldr	r3, [pc, #668]	; (8008288 <_dtoa_r+0x360>)
 8007fec:	9306      	str	r3, [sp, #24]
 8007fee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d0e5      	beq.n	8007fc0 <_dtoa_r+0x98>
 8007ff4:	4ba5      	ldr	r3, [pc, #660]	; (800828c <_dtoa_r+0x364>)
 8007ff6:	e7e1      	b.n	8007fbc <_dtoa_r+0x94>
 8007ff8:	ab1a      	add	r3, sp, #104	; 0x68
 8007ffa:	9301      	str	r3, [sp, #4]
 8007ffc:	ab1b      	add	r3, sp, #108	; 0x6c
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	0038      	movs	r0, r7
 8008002:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008004:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008006:	f7ff fa75 	bl	80074f4 <__d2b>
 800800a:	006e      	lsls	r6, r5, #1
 800800c:	9005      	str	r0, [sp, #20]
 800800e:	0d76      	lsrs	r6, r6, #21
 8008010:	d100      	bne.n	8008014 <_dtoa_r+0xec>
 8008012:	e07c      	b.n	800810e <_dtoa_r+0x1e6>
 8008014:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008016:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008018:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800801a:	4a9d      	ldr	r2, [pc, #628]	; (8008290 <_dtoa_r+0x368>)
 800801c:	031b      	lsls	r3, r3, #12
 800801e:	0b1b      	lsrs	r3, r3, #12
 8008020:	431a      	orrs	r2, r3
 8008022:	0011      	movs	r1, r2
 8008024:	4b9b      	ldr	r3, [pc, #620]	; (8008294 <_dtoa_r+0x36c>)
 8008026:	9418      	str	r4, [sp, #96]	; 0x60
 8008028:	18f6      	adds	r6, r6, r3
 800802a:	2200      	movs	r2, #0
 800802c:	4b9a      	ldr	r3, [pc, #616]	; (8008298 <_dtoa_r+0x370>)
 800802e:	f7f9 fd55 	bl	8001adc <__aeabi_dsub>
 8008032:	4a9a      	ldr	r2, [pc, #616]	; (800829c <_dtoa_r+0x374>)
 8008034:	4b9a      	ldr	r3, [pc, #616]	; (80082a0 <_dtoa_r+0x378>)
 8008036:	f7f9 fae5 	bl	8001604 <__aeabi_dmul>
 800803a:	4a9a      	ldr	r2, [pc, #616]	; (80082a4 <_dtoa_r+0x37c>)
 800803c:	4b9a      	ldr	r3, [pc, #616]	; (80082a8 <_dtoa_r+0x380>)
 800803e:	f7f8 fba3 	bl	8000788 <__aeabi_dadd>
 8008042:	0004      	movs	r4, r0
 8008044:	0030      	movs	r0, r6
 8008046:	000d      	movs	r5, r1
 8008048:	f7fa f92e 	bl	80022a8 <__aeabi_i2d>
 800804c:	4a97      	ldr	r2, [pc, #604]	; (80082ac <_dtoa_r+0x384>)
 800804e:	4b98      	ldr	r3, [pc, #608]	; (80082b0 <_dtoa_r+0x388>)
 8008050:	f7f9 fad8 	bl	8001604 <__aeabi_dmul>
 8008054:	0002      	movs	r2, r0
 8008056:	000b      	movs	r3, r1
 8008058:	0020      	movs	r0, r4
 800805a:	0029      	movs	r1, r5
 800805c:	f7f8 fb94 	bl	8000788 <__aeabi_dadd>
 8008060:	0004      	movs	r4, r0
 8008062:	000d      	movs	r5, r1
 8008064:	f7fa f8ea 	bl	800223c <__aeabi_d2iz>
 8008068:	2200      	movs	r2, #0
 800806a:	9002      	str	r0, [sp, #8]
 800806c:	2300      	movs	r3, #0
 800806e:	0020      	movs	r0, r4
 8008070:	0029      	movs	r1, r5
 8008072:	f7f8 f9e9 	bl	8000448 <__aeabi_dcmplt>
 8008076:	2800      	cmp	r0, #0
 8008078:	d00b      	beq.n	8008092 <_dtoa_r+0x16a>
 800807a:	9802      	ldr	r0, [sp, #8]
 800807c:	f7fa f914 	bl	80022a8 <__aeabi_i2d>
 8008080:	002b      	movs	r3, r5
 8008082:	0022      	movs	r2, r4
 8008084:	f7f8 f9da 	bl	800043c <__aeabi_dcmpeq>
 8008088:	4243      	negs	r3, r0
 800808a:	4158      	adcs	r0, r3
 800808c:	9b02      	ldr	r3, [sp, #8]
 800808e:	1a1b      	subs	r3, r3, r0
 8008090:	9302      	str	r3, [sp, #8]
 8008092:	2301      	movs	r3, #1
 8008094:	9316      	str	r3, [sp, #88]	; 0x58
 8008096:	9b02      	ldr	r3, [sp, #8]
 8008098:	2b16      	cmp	r3, #22
 800809a:	d80f      	bhi.n	80080bc <_dtoa_r+0x194>
 800809c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800809e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80080a0:	00da      	lsls	r2, r3, #3
 80080a2:	4b84      	ldr	r3, [pc, #528]	; (80082b4 <_dtoa_r+0x38c>)
 80080a4:	189b      	adds	r3, r3, r2
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f7f8 f9cd 	bl	8000448 <__aeabi_dcmplt>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d049      	beq.n	8008146 <_dtoa_r+0x21e>
 80080b2:	9b02      	ldr	r3, [sp, #8]
 80080b4:	3b01      	subs	r3, #1
 80080b6:	9302      	str	r3, [sp, #8]
 80080b8:	2300      	movs	r3, #0
 80080ba:	9316      	str	r3, [sp, #88]	; 0x58
 80080bc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80080be:	1b9e      	subs	r6, r3, r6
 80080c0:	2300      	movs	r3, #0
 80080c2:	930a      	str	r3, [sp, #40]	; 0x28
 80080c4:	0033      	movs	r3, r6
 80080c6:	3b01      	subs	r3, #1
 80080c8:	930d      	str	r3, [sp, #52]	; 0x34
 80080ca:	d504      	bpl.n	80080d6 <_dtoa_r+0x1ae>
 80080cc:	2301      	movs	r3, #1
 80080ce:	1b9b      	subs	r3, r3, r6
 80080d0:	930a      	str	r3, [sp, #40]	; 0x28
 80080d2:	2300      	movs	r3, #0
 80080d4:	930d      	str	r3, [sp, #52]	; 0x34
 80080d6:	9b02      	ldr	r3, [sp, #8]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	db36      	blt.n	800814a <_dtoa_r+0x222>
 80080dc:	9a02      	ldr	r2, [sp, #8]
 80080de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080e0:	4694      	mov	ip, r2
 80080e2:	4463      	add	r3, ip
 80080e4:	930d      	str	r3, [sp, #52]	; 0x34
 80080e6:	2300      	movs	r3, #0
 80080e8:	9215      	str	r2, [sp, #84]	; 0x54
 80080ea:	930e      	str	r3, [sp, #56]	; 0x38
 80080ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080ee:	2401      	movs	r4, #1
 80080f0:	2b09      	cmp	r3, #9
 80080f2:	d864      	bhi.n	80081be <_dtoa_r+0x296>
 80080f4:	2b05      	cmp	r3, #5
 80080f6:	dd02      	ble.n	80080fe <_dtoa_r+0x1d6>
 80080f8:	2400      	movs	r4, #0
 80080fa:	3b04      	subs	r3, #4
 80080fc:	9322      	str	r3, [sp, #136]	; 0x88
 80080fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008100:	1e98      	subs	r0, r3, #2
 8008102:	2803      	cmp	r0, #3
 8008104:	d864      	bhi.n	80081d0 <_dtoa_r+0x2a8>
 8008106:	f7f7 ffff 	bl	8000108 <__gnu_thumb1_case_uqi>
 800810a:	3829      	.short	0x3829
 800810c:	5836      	.short	0x5836
 800810e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008110:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008112:	189e      	adds	r6, r3, r2
 8008114:	4b68      	ldr	r3, [pc, #416]	; (80082b8 <_dtoa_r+0x390>)
 8008116:	18f2      	adds	r2, r6, r3
 8008118:	2a20      	cmp	r2, #32
 800811a:	dd0f      	ble.n	800813c <_dtoa_r+0x214>
 800811c:	2340      	movs	r3, #64	; 0x40
 800811e:	1a9b      	subs	r3, r3, r2
 8008120:	409d      	lsls	r5, r3
 8008122:	4b66      	ldr	r3, [pc, #408]	; (80082bc <_dtoa_r+0x394>)
 8008124:	9802      	ldr	r0, [sp, #8]
 8008126:	18f3      	adds	r3, r6, r3
 8008128:	40d8      	lsrs	r0, r3
 800812a:	4328      	orrs	r0, r5
 800812c:	f7fa f8ec 	bl	8002308 <__aeabi_ui2d>
 8008130:	2301      	movs	r3, #1
 8008132:	4c63      	ldr	r4, [pc, #396]	; (80082c0 <_dtoa_r+0x398>)
 8008134:	3e01      	subs	r6, #1
 8008136:	1909      	adds	r1, r1, r4
 8008138:	9318      	str	r3, [sp, #96]	; 0x60
 800813a:	e776      	b.n	800802a <_dtoa_r+0x102>
 800813c:	2320      	movs	r3, #32
 800813e:	9802      	ldr	r0, [sp, #8]
 8008140:	1a9b      	subs	r3, r3, r2
 8008142:	4098      	lsls	r0, r3
 8008144:	e7f2      	b.n	800812c <_dtoa_r+0x204>
 8008146:	9016      	str	r0, [sp, #88]	; 0x58
 8008148:	e7b8      	b.n	80080bc <_dtoa_r+0x194>
 800814a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800814c:	9a02      	ldr	r2, [sp, #8]
 800814e:	1a9b      	subs	r3, r3, r2
 8008150:	930a      	str	r3, [sp, #40]	; 0x28
 8008152:	4253      	negs	r3, r2
 8008154:	930e      	str	r3, [sp, #56]	; 0x38
 8008156:	2300      	movs	r3, #0
 8008158:	9315      	str	r3, [sp, #84]	; 0x54
 800815a:	e7c7      	b.n	80080ec <_dtoa_r+0x1c4>
 800815c:	2300      	movs	r3, #0
 800815e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008160:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008162:	930c      	str	r3, [sp, #48]	; 0x30
 8008164:	9307      	str	r3, [sp, #28]
 8008166:	2b00      	cmp	r3, #0
 8008168:	dc13      	bgt.n	8008192 <_dtoa_r+0x26a>
 800816a:	2301      	movs	r3, #1
 800816c:	001a      	movs	r2, r3
 800816e:	930c      	str	r3, [sp, #48]	; 0x30
 8008170:	9307      	str	r3, [sp, #28]
 8008172:	9223      	str	r2, [sp, #140]	; 0x8c
 8008174:	e00d      	b.n	8008192 <_dtoa_r+0x26a>
 8008176:	2301      	movs	r3, #1
 8008178:	e7f1      	b.n	800815e <_dtoa_r+0x236>
 800817a:	2300      	movs	r3, #0
 800817c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800817e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008180:	4694      	mov	ip, r2
 8008182:	9b02      	ldr	r3, [sp, #8]
 8008184:	4463      	add	r3, ip
 8008186:	930c      	str	r3, [sp, #48]	; 0x30
 8008188:	3301      	adds	r3, #1
 800818a:	9307      	str	r3, [sp, #28]
 800818c:	2b00      	cmp	r3, #0
 800818e:	dc00      	bgt.n	8008192 <_dtoa_r+0x26a>
 8008190:	2301      	movs	r3, #1
 8008192:	2200      	movs	r2, #0
 8008194:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008196:	6042      	str	r2, [r0, #4]
 8008198:	3204      	adds	r2, #4
 800819a:	0015      	movs	r5, r2
 800819c:	3514      	adds	r5, #20
 800819e:	6841      	ldr	r1, [r0, #4]
 80081a0:	429d      	cmp	r5, r3
 80081a2:	d919      	bls.n	80081d8 <_dtoa_r+0x2b0>
 80081a4:	0038      	movs	r0, r7
 80081a6:	f7fe fe6d 	bl	8006e84 <_Balloc>
 80081aa:	9006      	str	r0, [sp, #24]
 80081ac:	2800      	cmp	r0, #0
 80081ae:	d117      	bne.n	80081e0 <_dtoa_r+0x2b8>
 80081b0:	21d5      	movs	r1, #213	; 0xd5
 80081b2:	0002      	movs	r2, r0
 80081b4:	4b43      	ldr	r3, [pc, #268]	; (80082c4 <_dtoa_r+0x39c>)
 80081b6:	0049      	lsls	r1, r1, #1
 80081b8:	e6cb      	b.n	8007f52 <_dtoa_r+0x2a>
 80081ba:	2301      	movs	r3, #1
 80081bc:	e7de      	b.n	800817c <_dtoa_r+0x254>
 80081be:	2300      	movs	r3, #0
 80081c0:	940f      	str	r4, [sp, #60]	; 0x3c
 80081c2:	9322      	str	r3, [sp, #136]	; 0x88
 80081c4:	3b01      	subs	r3, #1
 80081c6:	930c      	str	r3, [sp, #48]	; 0x30
 80081c8:	9307      	str	r3, [sp, #28]
 80081ca:	2200      	movs	r2, #0
 80081cc:	3313      	adds	r3, #19
 80081ce:	e7d0      	b.n	8008172 <_dtoa_r+0x24a>
 80081d0:	2301      	movs	r3, #1
 80081d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80081d4:	3b02      	subs	r3, #2
 80081d6:	e7f6      	b.n	80081c6 <_dtoa_r+0x29e>
 80081d8:	3101      	adds	r1, #1
 80081da:	6041      	str	r1, [r0, #4]
 80081dc:	0052      	lsls	r2, r2, #1
 80081de:	e7dc      	b.n	800819a <_dtoa_r+0x272>
 80081e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e2:	9a06      	ldr	r2, [sp, #24]
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	9b07      	ldr	r3, [sp, #28]
 80081e8:	2b0e      	cmp	r3, #14
 80081ea:	d900      	bls.n	80081ee <_dtoa_r+0x2c6>
 80081ec:	e0eb      	b.n	80083c6 <_dtoa_r+0x49e>
 80081ee:	2c00      	cmp	r4, #0
 80081f0:	d100      	bne.n	80081f4 <_dtoa_r+0x2cc>
 80081f2:	e0e8      	b.n	80083c6 <_dtoa_r+0x49e>
 80081f4:	9b02      	ldr	r3, [sp, #8]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	dd68      	ble.n	80082cc <_dtoa_r+0x3a4>
 80081fa:	001a      	movs	r2, r3
 80081fc:	210f      	movs	r1, #15
 80081fe:	4b2d      	ldr	r3, [pc, #180]	; (80082b4 <_dtoa_r+0x38c>)
 8008200:	400a      	ands	r2, r1
 8008202:	00d2      	lsls	r2, r2, #3
 8008204:	189b      	adds	r3, r3, r2
 8008206:	681d      	ldr	r5, [r3, #0]
 8008208:	685e      	ldr	r6, [r3, #4]
 800820a:	9b02      	ldr	r3, [sp, #8]
 800820c:	111c      	asrs	r4, r3, #4
 800820e:	2302      	movs	r3, #2
 8008210:	9310      	str	r3, [sp, #64]	; 0x40
 8008212:	9b02      	ldr	r3, [sp, #8]
 8008214:	05db      	lsls	r3, r3, #23
 8008216:	d50b      	bpl.n	8008230 <_dtoa_r+0x308>
 8008218:	4b2b      	ldr	r3, [pc, #172]	; (80082c8 <_dtoa_r+0x3a0>)
 800821a:	400c      	ands	r4, r1
 800821c:	6a1a      	ldr	r2, [r3, #32]
 800821e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008220:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008222:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008224:	f7f8 fdec 	bl	8000e00 <__aeabi_ddiv>
 8008228:	2303      	movs	r3, #3
 800822a:	9008      	str	r0, [sp, #32]
 800822c:	9109      	str	r1, [sp, #36]	; 0x24
 800822e:	9310      	str	r3, [sp, #64]	; 0x40
 8008230:	4b25      	ldr	r3, [pc, #148]	; (80082c8 <_dtoa_r+0x3a0>)
 8008232:	9314      	str	r3, [sp, #80]	; 0x50
 8008234:	2c00      	cmp	r4, #0
 8008236:	d108      	bne.n	800824a <_dtoa_r+0x322>
 8008238:	9808      	ldr	r0, [sp, #32]
 800823a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800823c:	002a      	movs	r2, r5
 800823e:	0033      	movs	r3, r6
 8008240:	f7f8 fdde 	bl	8000e00 <__aeabi_ddiv>
 8008244:	9008      	str	r0, [sp, #32]
 8008246:	9109      	str	r1, [sp, #36]	; 0x24
 8008248:	e05c      	b.n	8008304 <_dtoa_r+0x3dc>
 800824a:	2301      	movs	r3, #1
 800824c:	421c      	tst	r4, r3
 800824e:	d00b      	beq.n	8008268 <_dtoa_r+0x340>
 8008250:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008252:	0028      	movs	r0, r5
 8008254:	3301      	adds	r3, #1
 8008256:	9310      	str	r3, [sp, #64]	; 0x40
 8008258:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800825a:	0031      	movs	r1, r6
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	f7f9 f9d0 	bl	8001604 <__aeabi_dmul>
 8008264:	0005      	movs	r5, r0
 8008266:	000e      	movs	r6, r1
 8008268:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800826a:	1064      	asrs	r4, r4, #1
 800826c:	3308      	adds	r3, #8
 800826e:	e7e0      	b.n	8008232 <_dtoa_r+0x30a>
 8008270:	0800a77c 	.word	0x0800a77c
 8008274:	0800a97a 	.word	0x0800a97a
 8008278:	7ff00000 	.word	0x7ff00000
 800827c:	0000270f 	.word	0x0000270f
 8008280:	0800a974 	.word	0x0800a974
 8008284:	0800a977 	.word	0x0800a977
 8008288:	0800a978 	.word	0x0800a978
 800828c:	0800a979 	.word	0x0800a979
 8008290:	3ff00000 	.word	0x3ff00000
 8008294:	fffffc01 	.word	0xfffffc01
 8008298:	3ff80000 	.word	0x3ff80000
 800829c:	636f4361 	.word	0x636f4361
 80082a0:	3fd287a7 	.word	0x3fd287a7
 80082a4:	8b60c8b3 	.word	0x8b60c8b3
 80082a8:	3fc68a28 	.word	0x3fc68a28
 80082ac:	509f79fb 	.word	0x509f79fb
 80082b0:	3fd34413 	.word	0x3fd34413
 80082b4:	0800a828 	.word	0x0800a828
 80082b8:	00000432 	.word	0x00000432
 80082bc:	00000412 	.word	0x00000412
 80082c0:	fe100000 	.word	0xfe100000
 80082c4:	0800a7ef 	.word	0x0800a7ef
 80082c8:	0800a800 	.word	0x0800a800
 80082cc:	2302      	movs	r3, #2
 80082ce:	9310      	str	r3, [sp, #64]	; 0x40
 80082d0:	9b02      	ldr	r3, [sp, #8]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d016      	beq.n	8008304 <_dtoa_r+0x3dc>
 80082d6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80082d8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80082da:	425c      	negs	r4, r3
 80082dc:	230f      	movs	r3, #15
 80082de:	4ab6      	ldr	r2, [pc, #728]	; (80085b8 <_dtoa_r+0x690>)
 80082e0:	4023      	ands	r3, r4
 80082e2:	00db      	lsls	r3, r3, #3
 80082e4:	18d3      	adds	r3, r2, r3
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	f7f9 f98b 	bl	8001604 <__aeabi_dmul>
 80082ee:	2601      	movs	r6, #1
 80082f0:	2300      	movs	r3, #0
 80082f2:	9008      	str	r0, [sp, #32]
 80082f4:	9109      	str	r1, [sp, #36]	; 0x24
 80082f6:	4db1      	ldr	r5, [pc, #708]	; (80085bc <_dtoa_r+0x694>)
 80082f8:	1124      	asrs	r4, r4, #4
 80082fa:	2c00      	cmp	r4, #0
 80082fc:	d000      	beq.n	8008300 <_dtoa_r+0x3d8>
 80082fe:	e094      	b.n	800842a <_dtoa_r+0x502>
 8008300:	2b00      	cmp	r3, #0
 8008302:	d19f      	bne.n	8008244 <_dtoa_r+0x31c>
 8008304:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008306:	2b00      	cmp	r3, #0
 8008308:	d100      	bne.n	800830c <_dtoa_r+0x3e4>
 800830a:	e09b      	b.n	8008444 <_dtoa_r+0x51c>
 800830c:	9c08      	ldr	r4, [sp, #32]
 800830e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008310:	2200      	movs	r2, #0
 8008312:	0020      	movs	r0, r4
 8008314:	0029      	movs	r1, r5
 8008316:	4baa      	ldr	r3, [pc, #680]	; (80085c0 <_dtoa_r+0x698>)
 8008318:	f7f8 f896 	bl	8000448 <__aeabi_dcmplt>
 800831c:	2800      	cmp	r0, #0
 800831e:	d100      	bne.n	8008322 <_dtoa_r+0x3fa>
 8008320:	e090      	b.n	8008444 <_dtoa_r+0x51c>
 8008322:	9b07      	ldr	r3, [sp, #28]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d100      	bne.n	800832a <_dtoa_r+0x402>
 8008328:	e08c      	b.n	8008444 <_dtoa_r+0x51c>
 800832a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800832c:	2b00      	cmp	r3, #0
 800832e:	dd46      	ble.n	80083be <_dtoa_r+0x496>
 8008330:	9b02      	ldr	r3, [sp, #8]
 8008332:	2200      	movs	r2, #0
 8008334:	0020      	movs	r0, r4
 8008336:	0029      	movs	r1, r5
 8008338:	1e5e      	subs	r6, r3, #1
 800833a:	4ba2      	ldr	r3, [pc, #648]	; (80085c4 <_dtoa_r+0x69c>)
 800833c:	f7f9 f962 	bl	8001604 <__aeabi_dmul>
 8008340:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008342:	9008      	str	r0, [sp, #32]
 8008344:	9109      	str	r1, [sp, #36]	; 0x24
 8008346:	3301      	adds	r3, #1
 8008348:	9310      	str	r3, [sp, #64]	; 0x40
 800834a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800834c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800834e:	9c08      	ldr	r4, [sp, #32]
 8008350:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008352:	9314      	str	r3, [sp, #80]	; 0x50
 8008354:	f7f9 ffa8 	bl	80022a8 <__aeabi_i2d>
 8008358:	0022      	movs	r2, r4
 800835a:	002b      	movs	r3, r5
 800835c:	f7f9 f952 	bl	8001604 <__aeabi_dmul>
 8008360:	2200      	movs	r2, #0
 8008362:	4b99      	ldr	r3, [pc, #612]	; (80085c8 <_dtoa_r+0x6a0>)
 8008364:	f7f8 fa10 	bl	8000788 <__aeabi_dadd>
 8008368:	9010      	str	r0, [sp, #64]	; 0x40
 800836a:	9111      	str	r1, [sp, #68]	; 0x44
 800836c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800836e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008370:	9208      	str	r2, [sp, #32]
 8008372:	9309      	str	r3, [sp, #36]	; 0x24
 8008374:	4a95      	ldr	r2, [pc, #596]	; (80085cc <_dtoa_r+0x6a4>)
 8008376:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008378:	4694      	mov	ip, r2
 800837a:	4463      	add	r3, ip
 800837c:	9317      	str	r3, [sp, #92]	; 0x5c
 800837e:	9309      	str	r3, [sp, #36]	; 0x24
 8008380:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008382:	2b00      	cmp	r3, #0
 8008384:	d161      	bne.n	800844a <_dtoa_r+0x522>
 8008386:	2200      	movs	r2, #0
 8008388:	0020      	movs	r0, r4
 800838a:	0029      	movs	r1, r5
 800838c:	4b90      	ldr	r3, [pc, #576]	; (80085d0 <_dtoa_r+0x6a8>)
 800838e:	f7f9 fba5 	bl	8001adc <__aeabi_dsub>
 8008392:	9a08      	ldr	r2, [sp, #32]
 8008394:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008396:	0004      	movs	r4, r0
 8008398:	000d      	movs	r5, r1
 800839a:	f7f8 f869 	bl	8000470 <__aeabi_dcmpgt>
 800839e:	2800      	cmp	r0, #0
 80083a0:	d000      	beq.n	80083a4 <_dtoa_r+0x47c>
 80083a2:	e2af      	b.n	8008904 <_dtoa_r+0x9dc>
 80083a4:	488b      	ldr	r0, [pc, #556]	; (80085d4 <_dtoa_r+0x6ac>)
 80083a6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80083a8:	4684      	mov	ip, r0
 80083aa:	4461      	add	r1, ip
 80083ac:	000b      	movs	r3, r1
 80083ae:	0020      	movs	r0, r4
 80083b0:	0029      	movs	r1, r5
 80083b2:	9a08      	ldr	r2, [sp, #32]
 80083b4:	f7f8 f848 	bl	8000448 <__aeabi_dcmplt>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	d000      	beq.n	80083be <_dtoa_r+0x496>
 80083bc:	e29f      	b.n	80088fe <_dtoa_r+0x9d6>
 80083be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083c0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80083c2:	9308      	str	r3, [sp, #32]
 80083c4:	9409      	str	r4, [sp, #36]	; 0x24
 80083c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	da00      	bge.n	80083ce <_dtoa_r+0x4a6>
 80083cc:	e172      	b.n	80086b4 <_dtoa_r+0x78c>
 80083ce:	9a02      	ldr	r2, [sp, #8]
 80083d0:	2a0e      	cmp	r2, #14
 80083d2:	dd00      	ble.n	80083d6 <_dtoa_r+0x4ae>
 80083d4:	e16e      	b.n	80086b4 <_dtoa_r+0x78c>
 80083d6:	4b78      	ldr	r3, [pc, #480]	; (80085b8 <_dtoa_r+0x690>)
 80083d8:	00d2      	lsls	r2, r2, #3
 80083da:	189b      	adds	r3, r3, r2
 80083dc:	685c      	ldr	r4, [r3, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	930a      	str	r3, [sp, #40]	; 0x28
 80083e2:	940b      	str	r4, [sp, #44]	; 0x2c
 80083e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	db00      	blt.n	80083ec <_dtoa_r+0x4c4>
 80083ea:	e0f7      	b.n	80085dc <_dtoa_r+0x6b4>
 80083ec:	9b07      	ldr	r3, [sp, #28]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	dd00      	ble.n	80083f4 <_dtoa_r+0x4cc>
 80083f2:	e0f3      	b.n	80085dc <_dtoa_r+0x6b4>
 80083f4:	d000      	beq.n	80083f8 <_dtoa_r+0x4d0>
 80083f6:	e282      	b.n	80088fe <_dtoa_r+0x9d6>
 80083f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80083fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083fc:	2200      	movs	r2, #0
 80083fe:	4b74      	ldr	r3, [pc, #464]	; (80085d0 <_dtoa_r+0x6a8>)
 8008400:	f7f9 f900 	bl	8001604 <__aeabi_dmul>
 8008404:	9a08      	ldr	r2, [sp, #32]
 8008406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008408:	f7f8 f83c 	bl	8000484 <__aeabi_dcmpge>
 800840c:	9e07      	ldr	r6, [sp, #28]
 800840e:	0035      	movs	r5, r6
 8008410:	2800      	cmp	r0, #0
 8008412:	d000      	beq.n	8008416 <_dtoa_r+0x4ee>
 8008414:	e259      	b.n	80088ca <_dtoa_r+0x9a2>
 8008416:	9b06      	ldr	r3, [sp, #24]
 8008418:	9a06      	ldr	r2, [sp, #24]
 800841a:	3301      	adds	r3, #1
 800841c:	9308      	str	r3, [sp, #32]
 800841e:	2331      	movs	r3, #49	; 0x31
 8008420:	7013      	strb	r3, [r2, #0]
 8008422:	9b02      	ldr	r3, [sp, #8]
 8008424:	3301      	adds	r3, #1
 8008426:	9302      	str	r3, [sp, #8]
 8008428:	e254      	b.n	80088d4 <_dtoa_r+0x9ac>
 800842a:	4234      	tst	r4, r6
 800842c:	d007      	beq.n	800843e <_dtoa_r+0x516>
 800842e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008430:	3301      	adds	r3, #1
 8008432:	9310      	str	r3, [sp, #64]	; 0x40
 8008434:	682a      	ldr	r2, [r5, #0]
 8008436:	686b      	ldr	r3, [r5, #4]
 8008438:	f7f9 f8e4 	bl	8001604 <__aeabi_dmul>
 800843c:	0033      	movs	r3, r6
 800843e:	1064      	asrs	r4, r4, #1
 8008440:	3508      	adds	r5, #8
 8008442:	e75a      	b.n	80082fa <_dtoa_r+0x3d2>
 8008444:	9e02      	ldr	r6, [sp, #8]
 8008446:	9b07      	ldr	r3, [sp, #28]
 8008448:	e780      	b.n	800834c <_dtoa_r+0x424>
 800844a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800844c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800844e:	1e5a      	subs	r2, r3, #1
 8008450:	4b59      	ldr	r3, [pc, #356]	; (80085b8 <_dtoa_r+0x690>)
 8008452:	00d2      	lsls	r2, r2, #3
 8008454:	189b      	adds	r3, r3, r2
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	2900      	cmp	r1, #0
 800845c:	d051      	beq.n	8008502 <_dtoa_r+0x5da>
 800845e:	2000      	movs	r0, #0
 8008460:	495d      	ldr	r1, [pc, #372]	; (80085d8 <_dtoa_r+0x6b0>)
 8008462:	f7f8 fccd 	bl	8000e00 <__aeabi_ddiv>
 8008466:	9a08      	ldr	r2, [sp, #32]
 8008468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800846a:	f7f9 fb37 	bl	8001adc <__aeabi_dsub>
 800846e:	9a06      	ldr	r2, [sp, #24]
 8008470:	9b06      	ldr	r3, [sp, #24]
 8008472:	4694      	mov	ip, r2
 8008474:	9317      	str	r3, [sp, #92]	; 0x5c
 8008476:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008478:	9010      	str	r0, [sp, #64]	; 0x40
 800847a:	9111      	str	r1, [sp, #68]	; 0x44
 800847c:	4463      	add	r3, ip
 800847e:	9319      	str	r3, [sp, #100]	; 0x64
 8008480:	0029      	movs	r1, r5
 8008482:	0020      	movs	r0, r4
 8008484:	f7f9 feda 	bl	800223c <__aeabi_d2iz>
 8008488:	9014      	str	r0, [sp, #80]	; 0x50
 800848a:	f7f9 ff0d 	bl	80022a8 <__aeabi_i2d>
 800848e:	0002      	movs	r2, r0
 8008490:	000b      	movs	r3, r1
 8008492:	0020      	movs	r0, r4
 8008494:	0029      	movs	r1, r5
 8008496:	f7f9 fb21 	bl	8001adc <__aeabi_dsub>
 800849a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800849c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800849e:	3301      	adds	r3, #1
 80084a0:	9308      	str	r3, [sp, #32]
 80084a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084a4:	0004      	movs	r4, r0
 80084a6:	3330      	adds	r3, #48	; 0x30
 80084a8:	7013      	strb	r3, [r2, #0]
 80084aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084ae:	000d      	movs	r5, r1
 80084b0:	f7f7 ffca 	bl	8000448 <__aeabi_dcmplt>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	d175      	bne.n	80085a4 <_dtoa_r+0x67c>
 80084b8:	0022      	movs	r2, r4
 80084ba:	002b      	movs	r3, r5
 80084bc:	2000      	movs	r0, #0
 80084be:	4940      	ldr	r1, [pc, #256]	; (80085c0 <_dtoa_r+0x698>)
 80084c0:	f7f9 fb0c 	bl	8001adc <__aeabi_dsub>
 80084c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084c8:	f7f7 ffbe 	bl	8000448 <__aeabi_dcmplt>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	d000      	beq.n	80084d2 <_dtoa_r+0x5aa>
 80084d0:	e0d2      	b.n	8008678 <_dtoa_r+0x750>
 80084d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084d4:	9a08      	ldr	r2, [sp, #32]
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d100      	bne.n	80084dc <_dtoa_r+0x5b4>
 80084da:	e770      	b.n	80083be <_dtoa_r+0x496>
 80084dc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80084de:	9911      	ldr	r1, [sp, #68]	; 0x44
 80084e0:	2200      	movs	r2, #0
 80084e2:	4b38      	ldr	r3, [pc, #224]	; (80085c4 <_dtoa_r+0x69c>)
 80084e4:	f7f9 f88e 	bl	8001604 <__aeabi_dmul>
 80084e8:	4b36      	ldr	r3, [pc, #216]	; (80085c4 <_dtoa_r+0x69c>)
 80084ea:	9010      	str	r0, [sp, #64]	; 0x40
 80084ec:	9111      	str	r1, [sp, #68]	; 0x44
 80084ee:	2200      	movs	r2, #0
 80084f0:	0020      	movs	r0, r4
 80084f2:	0029      	movs	r1, r5
 80084f4:	f7f9 f886 	bl	8001604 <__aeabi_dmul>
 80084f8:	9b08      	ldr	r3, [sp, #32]
 80084fa:	0004      	movs	r4, r0
 80084fc:	000d      	movs	r5, r1
 80084fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8008500:	e7be      	b.n	8008480 <_dtoa_r+0x558>
 8008502:	9808      	ldr	r0, [sp, #32]
 8008504:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008506:	f7f9 f87d 	bl	8001604 <__aeabi_dmul>
 800850a:	9a06      	ldr	r2, [sp, #24]
 800850c:	9b06      	ldr	r3, [sp, #24]
 800850e:	4694      	mov	ip, r2
 8008510:	9308      	str	r3, [sp, #32]
 8008512:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008514:	9010      	str	r0, [sp, #64]	; 0x40
 8008516:	9111      	str	r1, [sp, #68]	; 0x44
 8008518:	4463      	add	r3, ip
 800851a:	9319      	str	r3, [sp, #100]	; 0x64
 800851c:	0029      	movs	r1, r5
 800851e:	0020      	movs	r0, r4
 8008520:	f7f9 fe8c 	bl	800223c <__aeabi_d2iz>
 8008524:	9017      	str	r0, [sp, #92]	; 0x5c
 8008526:	f7f9 febf 	bl	80022a8 <__aeabi_i2d>
 800852a:	0002      	movs	r2, r0
 800852c:	000b      	movs	r3, r1
 800852e:	0020      	movs	r0, r4
 8008530:	0029      	movs	r1, r5
 8008532:	f7f9 fad3 	bl	8001adc <__aeabi_dsub>
 8008536:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008538:	9a08      	ldr	r2, [sp, #32]
 800853a:	3330      	adds	r3, #48	; 0x30
 800853c:	7013      	strb	r3, [r2, #0]
 800853e:	0013      	movs	r3, r2
 8008540:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008542:	3301      	adds	r3, #1
 8008544:	0004      	movs	r4, r0
 8008546:	000d      	movs	r5, r1
 8008548:	9308      	str	r3, [sp, #32]
 800854a:	4293      	cmp	r3, r2
 800854c:	d12c      	bne.n	80085a8 <_dtoa_r+0x680>
 800854e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008550:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008552:	9a06      	ldr	r2, [sp, #24]
 8008554:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008556:	4694      	mov	ip, r2
 8008558:	4463      	add	r3, ip
 800855a:	2200      	movs	r2, #0
 800855c:	9308      	str	r3, [sp, #32]
 800855e:	4b1e      	ldr	r3, [pc, #120]	; (80085d8 <_dtoa_r+0x6b0>)
 8008560:	f7f8 f912 	bl	8000788 <__aeabi_dadd>
 8008564:	0002      	movs	r2, r0
 8008566:	000b      	movs	r3, r1
 8008568:	0020      	movs	r0, r4
 800856a:	0029      	movs	r1, r5
 800856c:	f7f7 ff80 	bl	8000470 <__aeabi_dcmpgt>
 8008570:	2800      	cmp	r0, #0
 8008572:	d000      	beq.n	8008576 <_dtoa_r+0x64e>
 8008574:	e080      	b.n	8008678 <_dtoa_r+0x750>
 8008576:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008578:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800857a:	2000      	movs	r0, #0
 800857c:	4916      	ldr	r1, [pc, #88]	; (80085d8 <_dtoa_r+0x6b0>)
 800857e:	f7f9 faad 	bl	8001adc <__aeabi_dsub>
 8008582:	0002      	movs	r2, r0
 8008584:	000b      	movs	r3, r1
 8008586:	0020      	movs	r0, r4
 8008588:	0029      	movs	r1, r5
 800858a:	f7f7 ff5d 	bl	8000448 <__aeabi_dcmplt>
 800858e:	2800      	cmp	r0, #0
 8008590:	d100      	bne.n	8008594 <_dtoa_r+0x66c>
 8008592:	e714      	b.n	80083be <_dtoa_r+0x496>
 8008594:	9b08      	ldr	r3, [sp, #32]
 8008596:	001a      	movs	r2, r3
 8008598:	3a01      	subs	r2, #1
 800859a:	9208      	str	r2, [sp, #32]
 800859c:	7812      	ldrb	r2, [r2, #0]
 800859e:	2a30      	cmp	r2, #48	; 0x30
 80085a0:	d0f8      	beq.n	8008594 <_dtoa_r+0x66c>
 80085a2:	9308      	str	r3, [sp, #32]
 80085a4:	9602      	str	r6, [sp, #8]
 80085a6:	e055      	b.n	8008654 <_dtoa_r+0x72c>
 80085a8:	2200      	movs	r2, #0
 80085aa:	4b06      	ldr	r3, [pc, #24]	; (80085c4 <_dtoa_r+0x69c>)
 80085ac:	f7f9 f82a 	bl	8001604 <__aeabi_dmul>
 80085b0:	0004      	movs	r4, r0
 80085b2:	000d      	movs	r5, r1
 80085b4:	e7b2      	b.n	800851c <_dtoa_r+0x5f4>
 80085b6:	46c0      	nop			; (mov r8, r8)
 80085b8:	0800a828 	.word	0x0800a828
 80085bc:	0800a800 	.word	0x0800a800
 80085c0:	3ff00000 	.word	0x3ff00000
 80085c4:	40240000 	.word	0x40240000
 80085c8:	401c0000 	.word	0x401c0000
 80085cc:	fcc00000 	.word	0xfcc00000
 80085d0:	40140000 	.word	0x40140000
 80085d4:	7cc00000 	.word	0x7cc00000
 80085d8:	3fe00000 	.word	0x3fe00000
 80085dc:	9b07      	ldr	r3, [sp, #28]
 80085de:	9e06      	ldr	r6, [sp, #24]
 80085e0:	3b01      	subs	r3, #1
 80085e2:	199b      	adds	r3, r3, r6
 80085e4:	930c      	str	r3, [sp, #48]	; 0x30
 80085e6:	9c08      	ldr	r4, [sp, #32]
 80085e8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80085ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085ee:	0020      	movs	r0, r4
 80085f0:	0029      	movs	r1, r5
 80085f2:	f7f8 fc05 	bl	8000e00 <__aeabi_ddiv>
 80085f6:	f7f9 fe21 	bl	800223c <__aeabi_d2iz>
 80085fa:	9007      	str	r0, [sp, #28]
 80085fc:	f7f9 fe54 	bl	80022a8 <__aeabi_i2d>
 8008600:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008604:	f7f8 fffe 	bl	8001604 <__aeabi_dmul>
 8008608:	0002      	movs	r2, r0
 800860a:	000b      	movs	r3, r1
 800860c:	0020      	movs	r0, r4
 800860e:	0029      	movs	r1, r5
 8008610:	f7f9 fa64 	bl	8001adc <__aeabi_dsub>
 8008614:	0033      	movs	r3, r6
 8008616:	9a07      	ldr	r2, [sp, #28]
 8008618:	3601      	adds	r6, #1
 800861a:	3230      	adds	r2, #48	; 0x30
 800861c:	701a      	strb	r2, [r3, #0]
 800861e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008620:	9608      	str	r6, [sp, #32]
 8008622:	429a      	cmp	r2, r3
 8008624:	d139      	bne.n	800869a <_dtoa_r+0x772>
 8008626:	0002      	movs	r2, r0
 8008628:	000b      	movs	r3, r1
 800862a:	f7f8 f8ad 	bl	8000788 <__aeabi_dadd>
 800862e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008632:	0004      	movs	r4, r0
 8008634:	000d      	movs	r5, r1
 8008636:	f7f7 ff1b 	bl	8000470 <__aeabi_dcmpgt>
 800863a:	2800      	cmp	r0, #0
 800863c:	d11b      	bne.n	8008676 <_dtoa_r+0x74e>
 800863e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008642:	0020      	movs	r0, r4
 8008644:	0029      	movs	r1, r5
 8008646:	f7f7 fef9 	bl	800043c <__aeabi_dcmpeq>
 800864a:	2800      	cmp	r0, #0
 800864c:	d002      	beq.n	8008654 <_dtoa_r+0x72c>
 800864e:	9b07      	ldr	r3, [sp, #28]
 8008650:	07db      	lsls	r3, r3, #31
 8008652:	d410      	bmi.n	8008676 <_dtoa_r+0x74e>
 8008654:	0038      	movs	r0, r7
 8008656:	9905      	ldr	r1, [sp, #20]
 8008658:	f7fe fc58 	bl	8006f0c <_Bfree>
 800865c:	2300      	movs	r3, #0
 800865e:	9a08      	ldr	r2, [sp, #32]
 8008660:	9802      	ldr	r0, [sp, #8]
 8008662:	7013      	strb	r3, [r2, #0]
 8008664:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008666:	3001      	adds	r0, #1
 8008668:	6018      	str	r0, [r3, #0]
 800866a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800866c:	2b00      	cmp	r3, #0
 800866e:	d100      	bne.n	8008672 <_dtoa_r+0x74a>
 8008670:	e4a6      	b.n	8007fc0 <_dtoa_r+0x98>
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	e4a4      	b.n	8007fc0 <_dtoa_r+0x98>
 8008676:	9e02      	ldr	r6, [sp, #8]
 8008678:	9b08      	ldr	r3, [sp, #32]
 800867a:	9308      	str	r3, [sp, #32]
 800867c:	3b01      	subs	r3, #1
 800867e:	781a      	ldrb	r2, [r3, #0]
 8008680:	2a39      	cmp	r2, #57	; 0x39
 8008682:	d106      	bne.n	8008692 <_dtoa_r+0x76a>
 8008684:	9a06      	ldr	r2, [sp, #24]
 8008686:	429a      	cmp	r2, r3
 8008688:	d1f7      	bne.n	800867a <_dtoa_r+0x752>
 800868a:	2230      	movs	r2, #48	; 0x30
 800868c:	9906      	ldr	r1, [sp, #24]
 800868e:	3601      	adds	r6, #1
 8008690:	700a      	strb	r2, [r1, #0]
 8008692:	781a      	ldrb	r2, [r3, #0]
 8008694:	3201      	adds	r2, #1
 8008696:	701a      	strb	r2, [r3, #0]
 8008698:	e784      	b.n	80085a4 <_dtoa_r+0x67c>
 800869a:	2200      	movs	r2, #0
 800869c:	4baa      	ldr	r3, [pc, #680]	; (8008948 <_dtoa_r+0xa20>)
 800869e:	f7f8 ffb1 	bl	8001604 <__aeabi_dmul>
 80086a2:	2200      	movs	r2, #0
 80086a4:	2300      	movs	r3, #0
 80086a6:	0004      	movs	r4, r0
 80086a8:	000d      	movs	r5, r1
 80086aa:	f7f7 fec7 	bl	800043c <__aeabi_dcmpeq>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	d09b      	beq.n	80085ea <_dtoa_r+0x6c2>
 80086b2:	e7cf      	b.n	8008654 <_dtoa_r+0x72c>
 80086b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80086b6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80086b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80086ba:	2d00      	cmp	r5, #0
 80086bc:	d012      	beq.n	80086e4 <_dtoa_r+0x7bc>
 80086be:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80086c0:	2a01      	cmp	r2, #1
 80086c2:	dc66      	bgt.n	8008792 <_dtoa_r+0x86a>
 80086c4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80086c6:	2a00      	cmp	r2, #0
 80086c8:	d05d      	beq.n	8008786 <_dtoa_r+0x85e>
 80086ca:	4aa0      	ldr	r2, [pc, #640]	; (800894c <_dtoa_r+0xa24>)
 80086cc:	189b      	adds	r3, r3, r2
 80086ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086d0:	2101      	movs	r1, #1
 80086d2:	18d2      	adds	r2, r2, r3
 80086d4:	920a      	str	r2, [sp, #40]	; 0x28
 80086d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086d8:	0038      	movs	r0, r7
 80086da:	18d3      	adds	r3, r2, r3
 80086dc:	930d      	str	r3, [sp, #52]	; 0x34
 80086de:	f7fe fcc5 	bl	800706c <__i2b>
 80086e2:	0005      	movs	r5, r0
 80086e4:	2c00      	cmp	r4, #0
 80086e6:	dd0e      	ble.n	8008706 <_dtoa_r+0x7de>
 80086e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	dd0b      	ble.n	8008706 <_dtoa_r+0x7de>
 80086ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086f0:	0023      	movs	r3, r4
 80086f2:	4294      	cmp	r4, r2
 80086f4:	dd00      	ble.n	80086f8 <_dtoa_r+0x7d0>
 80086f6:	0013      	movs	r3, r2
 80086f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086fa:	1ae4      	subs	r4, r4, r3
 80086fc:	1ad2      	subs	r2, r2, r3
 80086fe:	920a      	str	r2, [sp, #40]	; 0x28
 8008700:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	930d      	str	r3, [sp, #52]	; 0x34
 8008706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008708:	2b00      	cmp	r3, #0
 800870a:	d01f      	beq.n	800874c <_dtoa_r+0x824>
 800870c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800870e:	2b00      	cmp	r3, #0
 8008710:	d054      	beq.n	80087bc <_dtoa_r+0x894>
 8008712:	2e00      	cmp	r6, #0
 8008714:	dd11      	ble.n	800873a <_dtoa_r+0x812>
 8008716:	0029      	movs	r1, r5
 8008718:	0032      	movs	r2, r6
 800871a:	0038      	movs	r0, r7
 800871c:	f7fe fd6c 	bl	80071f8 <__pow5mult>
 8008720:	9a05      	ldr	r2, [sp, #20]
 8008722:	0001      	movs	r1, r0
 8008724:	0005      	movs	r5, r0
 8008726:	0038      	movs	r0, r7
 8008728:	f7fe fcb6 	bl	8007098 <__multiply>
 800872c:	9905      	ldr	r1, [sp, #20]
 800872e:	9014      	str	r0, [sp, #80]	; 0x50
 8008730:	0038      	movs	r0, r7
 8008732:	f7fe fbeb 	bl	8006f0c <_Bfree>
 8008736:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008738:	9305      	str	r3, [sp, #20]
 800873a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800873c:	1b9a      	subs	r2, r3, r6
 800873e:	42b3      	cmp	r3, r6
 8008740:	d004      	beq.n	800874c <_dtoa_r+0x824>
 8008742:	0038      	movs	r0, r7
 8008744:	9905      	ldr	r1, [sp, #20]
 8008746:	f7fe fd57 	bl	80071f8 <__pow5mult>
 800874a:	9005      	str	r0, [sp, #20]
 800874c:	2101      	movs	r1, #1
 800874e:	0038      	movs	r0, r7
 8008750:	f7fe fc8c 	bl	800706c <__i2b>
 8008754:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008756:	0006      	movs	r6, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	dd31      	ble.n	80087c0 <_dtoa_r+0x898>
 800875c:	001a      	movs	r2, r3
 800875e:	0001      	movs	r1, r0
 8008760:	0038      	movs	r0, r7
 8008762:	f7fe fd49 	bl	80071f8 <__pow5mult>
 8008766:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008768:	0006      	movs	r6, r0
 800876a:	2b01      	cmp	r3, #1
 800876c:	dd2d      	ble.n	80087ca <_dtoa_r+0x8a2>
 800876e:	2300      	movs	r3, #0
 8008770:	930e      	str	r3, [sp, #56]	; 0x38
 8008772:	6933      	ldr	r3, [r6, #16]
 8008774:	3303      	adds	r3, #3
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	18f3      	adds	r3, r6, r3
 800877a:	6858      	ldr	r0, [r3, #4]
 800877c:	f7fe fc2e 	bl	8006fdc <__hi0bits>
 8008780:	2320      	movs	r3, #32
 8008782:	1a18      	subs	r0, r3, r0
 8008784:	e039      	b.n	80087fa <_dtoa_r+0x8d2>
 8008786:	2336      	movs	r3, #54	; 0x36
 8008788:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800878a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800878c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800878e:	1a9b      	subs	r3, r3, r2
 8008790:	e79d      	b.n	80086ce <_dtoa_r+0x7a6>
 8008792:	9b07      	ldr	r3, [sp, #28]
 8008794:	1e5e      	subs	r6, r3, #1
 8008796:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008798:	42b3      	cmp	r3, r6
 800879a:	db07      	blt.n	80087ac <_dtoa_r+0x884>
 800879c:	1b9e      	subs	r6, r3, r6
 800879e:	9b07      	ldr	r3, [sp, #28]
 80087a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	da93      	bge.n	80086ce <_dtoa_r+0x7a6>
 80087a6:	1ae4      	subs	r4, r4, r3
 80087a8:	2300      	movs	r3, #0
 80087aa:	e790      	b.n	80086ce <_dtoa_r+0x7a6>
 80087ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80087b0:	1af3      	subs	r3, r6, r3
 80087b2:	18d3      	adds	r3, r2, r3
 80087b4:	960e      	str	r6, [sp, #56]	; 0x38
 80087b6:	9315      	str	r3, [sp, #84]	; 0x54
 80087b8:	2600      	movs	r6, #0
 80087ba:	e7f0      	b.n	800879e <_dtoa_r+0x876>
 80087bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087be:	e7c0      	b.n	8008742 <_dtoa_r+0x81a>
 80087c0:	2300      	movs	r3, #0
 80087c2:	930e      	str	r3, [sp, #56]	; 0x38
 80087c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	dc13      	bgt.n	80087f2 <_dtoa_r+0x8ca>
 80087ca:	2300      	movs	r3, #0
 80087cc:	930e      	str	r3, [sp, #56]	; 0x38
 80087ce:	9b08      	ldr	r3, [sp, #32]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10e      	bne.n	80087f2 <_dtoa_r+0x8ca>
 80087d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d6:	031b      	lsls	r3, r3, #12
 80087d8:	d10b      	bne.n	80087f2 <_dtoa_r+0x8ca>
 80087da:	4b5d      	ldr	r3, [pc, #372]	; (8008950 <_dtoa_r+0xa28>)
 80087dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087de:	4213      	tst	r3, r2
 80087e0:	d007      	beq.n	80087f2 <_dtoa_r+0x8ca>
 80087e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087e4:	3301      	adds	r3, #1
 80087e6:	930a      	str	r3, [sp, #40]	; 0x28
 80087e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087ea:	3301      	adds	r3, #1
 80087ec:	930d      	str	r3, [sp, #52]	; 0x34
 80087ee:	2301      	movs	r3, #1
 80087f0:	930e      	str	r3, [sp, #56]	; 0x38
 80087f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087f4:	2001      	movs	r0, #1
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1bb      	bne.n	8008772 <_dtoa_r+0x84a>
 80087fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087fc:	221f      	movs	r2, #31
 80087fe:	1818      	adds	r0, r3, r0
 8008800:	0003      	movs	r3, r0
 8008802:	4013      	ands	r3, r2
 8008804:	4210      	tst	r0, r2
 8008806:	d046      	beq.n	8008896 <_dtoa_r+0x96e>
 8008808:	3201      	adds	r2, #1
 800880a:	1ad2      	subs	r2, r2, r3
 800880c:	2a04      	cmp	r2, #4
 800880e:	dd3f      	ble.n	8008890 <_dtoa_r+0x968>
 8008810:	221c      	movs	r2, #28
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008816:	18e4      	adds	r4, r4, r3
 8008818:	18d2      	adds	r2, r2, r3
 800881a:	920a      	str	r2, [sp, #40]	; 0x28
 800881c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800881e:	18d3      	adds	r3, r2, r3
 8008820:	930d      	str	r3, [sp, #52]	; 0x34
 8008822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008824:	2b00      	cmp	r3, #0
 8008826:	dd05      	ble.n	8008834 <_dtoa_r+0x90c>
 8008828:	001a      	movs	r2, r3
 800882a:	0038      	movs	r0, r7
 800882c:	9905      	ldr	r1, [sp, #20]
 800882e:	f7fe fd3f 	bl	80072b0 <__lshift>
 8008832:	9005      	str	r0, [sp, #20]
 8008834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008836:	2b00      	cmp	r3, #0
 8008838:	dd05      	ble.n	8008846 <_dtoa_r+0x91e>
 800883a:	0031      	movs	r1, r6
 800883c:	001a      	movs	r2, r3
 800883e:	0038      	movs	r0, r7
 8008840:	f7fe fd36 	bl	80072b0 <__lshift>
 8008844:	0006      	movs	r6, r0
 8008846:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008848:	2b00      	cmp	r3, #0
 800884a:	d026      	beq.n	800889a <_dtoa_r+0x972>
 800884c:	0031      	movs	r1, r6
 800884e:	9805      	ldr	r0, [sp, #20]
 8008850:	f7fe fd9c 	bl	800738c <__mcmp>
 8008854:	2800      	cmp	r0, #0
 8008856:	da20      	bge.n	800889a <_dtoa_r+0x972>
 8008858:	9b02      	ldr	r3, [sp, #8]
 800885a:	220a      	movs	r2, #10
 800885c:	3b01      	subs	r3, #1
 800885e:	9302      	str	r3, [sp, #8]
 8008860:	0038      	movs	r0, r7
 8008862:	2300      	movs	r3, #0
 8008864:	9905      	ldr	r1, [sp, #20]
 8008866:	f7fe fb75 	bl	8006f54 <__multadd>
 800886a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800886c:	9005      	str	r0, [sp, #20]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d100      	bne.n	8008874 <_dtoa_r+0x94c>
 8008872:	e166      	b.n	8008b42 <_dtoa_r+0xc1a>
 8008874:	2300      	movs	r3, #0
 8008876:	0029      	movs	r1, r5
 8008878:	220a      	movs	r2, #10
 800887a:	0038      	movs	r0, r7
 800887c:	f7fe fb6a 	bl	8006f54 <__multadd>
 8008880:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008882:	0005      	movs	r5, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	dc47      	bgt.n	8008918 <_dtoa_r+0x9f0>
 8008888:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800888a:	2b02      	cmp	r3, #2
 800888c:	dc0d      	bgt.n	80088aa <_dtoa_r+0x982>
 800888e:	e043      	b.n	8008918 <_dtoa_r+0x9f0>
 8008890:	2a04      	cmp	r2, #4
 8008892:	d0c6      	beq.n	8008822 <_dtoa_r+0x8fa>
 8008894:	0013      	movs	r3, r2
 8008896:	331c      	adds	r3, #28
 8008898:	e7bc      	b.n	8008814 <_dtoa_r+0x8ec>
 800889a:	9b07      	ldr	r3, [sp, #28]
 800889c:	2b00      	cmp	r3, #0
 800889e:	dc35      	bgt.n	800890c <_dtoa_r+0x9e4>
 80088a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	dd32      	ble.n	800890c <_dtoa_r+0x9e4>
 80088a6:	9b07      	ldr	r3, [sp, #28]
 80088a8:	930c      	str	r3, [sp, #48]	; 0x30
 80088aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10c      	bne.n	80088ca <_dtoa_r+0x9a2>
 80088b0:	0031      	movs	r1, r6
 80088b2:	2205      	movs	r2, #5
 80088b4:	0038      	movs	r0, r7
 80088b6:	f7fe fb4d 	bl	8006f54 <__multadd>
 80088ba:	0006      	movs	r6, r0
 80088bc:	0001      	movs	r1, r0
 80088be:	9805      	ldr	r0, [sp, #20]
 80088c0:	f7fe fd64 	bl	800738c <__mcmp>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	dd00      	ble.n	80088ca <_dtoa_r+0x9a2>
 80088c8:	e5a5      	b.n	8008416 <_dtoa_r+0x4ee>
 80088ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80088cc:	43db      	mvns	r3, r3
 80088ce:	9302      	str	r3, [sp, #8]
 80088d0:	9b06      	ldr	r3, [sp, #24]
 80088d2:	9308      	str	r3, [sp, #32]
 80088d4:	2400      	movs	r4, #0
 80088d6:	0031      	movs	r1, r6
 80088d8:	0038      	movs	r0, r7
 80088da:	f7fe fb17 	bl	8006f0c <_Bfree>
 80088de:	2d00      	cmp	r5, #0
 80088e0:	d100      	bne.n	80088e4 <_dtoa_r+0x9bc>
 80088e2:	e6b7      	b.n	8008654 <_dtoa_r+0x72c>
 80088e4:	2c00      	cmp	r4, #0
 80088e6:	d005      	beq.n	80088f4 <_dtoa_r+0x9cc>
 80088e8:	42ac      	cmp	r4, r5
 80088ea:	d003      	beq.n	80088f4 <_dtoa_r+0x9cc>
 80088ec:	0021      	movs	r1, r4
 80088ee:	0038      	movs	r0, r7
 80088f0:	f7fe fb0c 	bl	8006f0c <_Bfree>
 80088f4:	0029      	movs	r1, r5
 80088f6:	0038      	movs	r0, r7
 80088f8:	f7fe fb08 	bl	8006f0c <_Bfree>
 80088fc:	e6aa      	b.n	8008654 <_dtoa_r+0x72c>
 80088fe:	2600      	movs	r6, #0
 8008900:	0035      	movs	r5, r6
 8008902:	e7e2      	b.n	80088ca <_dtoa_r+0x9a2>
 8008904:	9602      	str	r6, [sp, #8]
 8008906:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008908:	0035      	movs	r5, r6
 800890a:	e584      	b.n	8008416 <_dtoa_r+0x4ee>
 800890c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800890e:	2b00      	cmp	r3, #0
 8008910:	d100      	bne.n	8008914 <_dtoa_r+0x9ec>
 8008912:	e0ce      	b.n	8008ab2 <_dtoa_r+0xb8a>
 8008914:	9b07      	ldr	r3, [sp, #28]
 8008916:	930c      	str	r3, [sp, #48]	; 0x30
 8008918:	2c00      	cmp	r4, #0
 800891a:	dd05      	ble.n	8008928 <_dtoa_r+0xa00>
 800891c:	0029      	movs	r1, r5
 800891e:	0022      	movs	r2, r4
 8008920:	0038      	movs	r0, r7
 8008922:	f7fe fcc5 	bl	80072b0 <__lshift>
 8008926:	0005      	movs	r5, r0
 8008928:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800892a:	0028      	movs	r0, r5
 800892c:	2b00      	cmp	r3, #0
 800892e:	d022      	beq.n	8008976 <_dtoa_r+0xa4e>
 8008930:	0038      	movs	r0, r7
 8008932:	6869      	ldr	r1, [r5, #4]
 8008934:	f7fe faa6 	bl	8006e84 <_Balloc>
 8008938:	1e04      	subs	r4, r0, #0
 800893a:	d10f      	bne.n	800895c <_dtoa_r+0xa34>
 800893c:	0002      	movs	r2, r0
 800893e:	4b05      	ldr	r3, [pc, #20]	; (8008954 <_dtoa_r+0xa2c>)
 8008940:	4905      	ldr	r1, [pc, #20]	; (8008958 <_dtoa_r+0xa30>)
 8008942:	f7ff fb06 	bl	8007f52 <_dtoa_r+0x2a>
 8008946:	46c0      	nop			; (mov r8, r8)
 8008948:	40240000 	.word	0x40240000
 800894c:	00000433 	.word	0x00000433
 8008950:	7ff00000 	.word	0x7ff00000
 8008954:	0800a7ef 	.word	0x0800a7ef
 8008958:	000002ea 	.word	0x000002ea
 800895c:	0029      	movs	r1, r5
 800895e:	692b      	ldr	r3, [r5, #16]
 8008960:	310c      	adds	r1, #12
 8008962:	1c9a      	adds	r2, r3, #2
 8008964:	0092      	lsls	r2, r2, #2
 8008966:	300c      	adds	r0, #12
 8008968:	f000 f91d 	bl	8008ba6 <memcpy>
 800896c:	2201      	movs	r2, #1
 800896e:	0021      	movs	r1, r4
 8008970:	0038      	movs	r0, r7
 8008972:	f7fe fc9d 	bl	80072b0 <__lshift>
 8008976:	9b06      	ldr	r3, [sp, #24]
 8008978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800897a:	930a      	str	r3, [sp, #40]	; 0x28
 800897c:	3b01      	subs	r3, #1
 800897e:	189b      	adds	r3, r3, r2
 8008980:	2201      	movs	r2, #1
 8008982:	002c      	movs	r4, r5
 8008984:	0005      	movs	r5, r0
 8008986:	9314      	str	r3, [sp, #80]	; 0x50
 8008988:	9b08      	ldr	r3, [sp, #32]
 800898a:	4013      	ands	r3, r2
 800898c:	930f      	str	r3, [sp, #60]	; 0x3c
 800898e:	0031      	movs	r1, r6
 8008990:	9805      	ldr	r0, [sp, #20]
 8008992:	f7ff fa3d 	bl	8007e10 <quorem>
 8008996:	0003      	movs	r3, r0
 8008998:	0021      	movs	r1, r4
 800899a:	3330      	adds	r3, #48	; 0x30
 800899c:	900d      	str	r0, [sp, #52]	; 0x34
 800899e:	9805      	ldr	r0, [sp, #20]
 80089a0:	9307      	str	r3, [sp, #28]
 80089a2:	f7fe fcf3 	bl	800738c <__mcmp>
 80089a6:	002a      	movs	r2, r5
 80089a8:	900e      	str	r0, [sp, #56]	; 0x38
 80089aa:	0031      	movs	r1, r6
 80089ac:	0038      	movs	r0, r7
 80089ae:	f7fe fd09 	bl	80073c4 <__mdiff>
 80089b2:	68c3      	ldr	r3, [r0, #12]
 80089b4:	9008      	str	r0, [sp, #32]
 80089b6:	9310      	str	r3, [sp, #64]	; 0x40
 80089b8:	2301      	movs	r3, #1
 80089ba:	930c      	str	r3, [sp, #48]	; 0x30
 80089bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d104      	bne.n	80089cc <_dtoa_r+0xaa4>
 80089c2:	0001      	movs	r1, r0
 80089c4:	9805      	ldr	r0, [sp, #20]
 80089c6:	f7fe fce1 	bl	800738c <__mcmp>
 80089ca:	900c      	str	r0, [sp, #48]	; 0x30
 80089cc:	0038      	movs	r0, r7
 80089ce:	9908      	ldr	r1, [sp, #32]
 80089d0:	f7fe fa9c 	bl	8006f0c <_Bfree>
 80089d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089d8:	3301      	adds	r3, #1
 80089da:	9308      	str	r3, [sp, #32]
 80089dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089de:	4313      	orrs	r3, r2
 80089e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80089e2:	4313      	orrs	r3, r2
 80089e4:	d10c      	bne.n	8008a00 <_dtoa_r+0xad8>
 80089e6:	9b07      	ldr	r3, [sp, #28]
 80089e8:	2b39      	cmp	r3, #57	; 0x39
 80089ea:	d026      	beq.n	8008a3a <_dtoa_r+0xb12>
 80089ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	dd02      	ble.n	80089f8 <_dtoa_r+0xad0>
 80089f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089f4:	3331      	adds	r3, #49	; 0x31
 80089f6:	9307      	str	r3, [sp, #28]
 80089f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089fa:	9a07      	ldr	r2, [sp, #28]
 80089fc:	701a      	strb	r2, [r3, #0]
 80089fe:	e76a      	b.n	80088d6 <_dtoa_r+0x9ae>
 8008a00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	db04      	blt.n	8008a10 <_dtoa_r+0xae8>
 8008a06:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	d11f      	bne.n	8008a50 <_dtoa_r+0xb28>
 8008a10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	ddf0      	ble.n	80089f8 <_dtoa_r+0xad0>
 8008a16:	9905      	ldr	r1, [sp, #20]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	0038      	movs	r0, r7
 8008a1c:	f7fe fc48 	bl	80072b0 <__lshift>
 8008a20:	0031      	movs	r1, r6
 8008a22:	9005      	str	r0, [sp, #20]
 8008a24:	f7fe fcb2 	bl	800738c <__mcmp>
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	dc03      	bgt.n	8008a34 <_dtoa_r+0xb0c>
 8008a2c:	d1e4      	bne.n	80089f8 <_dtoa_r+0xad0>
 8008a2e:	9b07      	ldr	r3, [sp, #28]
 8008a30:	07db      	lsls	r3, r3, #31
 8008a32:	d5e1      	bpl.n	80089f8 <_dtoa_r+0xad0>
 8008a34:	9b07      	ldr	r3, [sp, #28]
 8008a36:	2b39      	cmp	r3, #57	; 0x39
 8008a38:	d1db      	bne.n	80089f2 <_dtoa_r+0xaca>
 8008a3a:	2339      	movs	r3, #57	; 0x39
 8008a3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a3e:	7013      	strb	r3, [r2, #0]
 8008a40:	9b08      	ldr	r3, [sp, #32]
 8008a42:	9308      	str	r3, [sp, #32]
 8008a44:	3b01      	subs	r3, #1
 8008a46:	781a      	ldrb	r2, [r3, #0]
 8008a48:	2a39      	cmp	r2, #57	; 0x39
 8008a4a:	d068      	beq.n	8008b1e <_dtoa_r+0xbf6>
 8008a4c:	3201      	adds	r2, #1
 8008a4e:	e7d5      	b.n	80089fc <_dtoa_r+0xad4>
 8008a50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	dd07      	ble.n	8008a66 <_dtoa_r+0xb3e>
 8008a56:	9b07      	ldr	r3, [sp, #28]
 8008a58:	2b39      	cmp	r3, #57	; 0x39
 8008a5a:	d0ee      	beq.n	8008a3a <_dtoa_r+0xb12>
 8008a5c:	9b07      	ldr	r3, [sp, #28]
 8008a5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a60:	3301      	adds	r3, #1
 8008a62:	7013      	strb	r3, [r2, #0]
 8008a64:	e737      	b.n	80088d6 <_dtoa_r+0x9ae>
 8008a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a68:	9a07      	ldr	r2, [sp, #28]
 8008a6a:	701a      	strb	r2, [r3, #0]
 8008a6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d03e      	beq.n	8008af2 <_dtoa_r+0xbca>
 8008a74:	2300      	movs	r3, #0
 8008a76:	220a      	movs	r2, #10
 8008a78:	9905      	ldr	r1, [sp, #20]
 8008a7a:	0038      	movs	r0, r7
 8008a7c:	f7fe fa6a 	bl	8006f54 <__multadd>
 8008a80:	2300      	movs	r3, #0
 8008a82:	9005      	str	r0, [sp, #20]
 8008a84:	220a      	movs	r2, #10
 8008a86:	0021      	movs	r1, r4
 8008a88:	0038      	movs	r0, r7
 8008a8a:	42ac      	cmp	r4, r5
 8008a8c:	d106      	bne.n	8008a9c <_dtoa_r+0xb74>
 8008a8e:	f7fe fa61 	bl	8006f54 <__multadd>
 8008a92:	0004      	movs	r4, r0
 8008a94:	0005      	movs	r5, r0
 8008a96:	9b08      	ldr	r3, [sp, #32]
 8008a98:	930a      	str	r3, [sp, #40]	; 0x28
 8008a9a:	e778      	b.n	800898e <_dtoa_r+0xa66>
 8008a9c:	f7fe fa5a 	bl	8006f54 <__multadd>
 8008aa0:	0029      	movs	r1, r5
 8008aa2:	0004      	movs	r4, r0
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	220a      	movs	r2, #10
 8008aa8:	0038      	movs	r0, r7
 8008aaa:	f7fe fa53 	bl	8006f54 <__multadd>
 8008aae:	0005      	movs	r5, r0
 8008ab0:	e7f1      	b.n	8008a96 <_dtoa_r+0xb6e>
 8008ab2:	9b07      	ldr	r3, [sp, #28]
 8008ab4:	930c      	str	r3, [sp, #48]	; 0x30
 8008ab6:	2400      	movs	r4, #0
 8008ab8:	0031      	movs	r1, r6
 8008aba:	9805      	ldr	r0, [sp, #20]
 8008abc:	f7ff f9a8 	bl	8007e10 <quorem>
 8008ac0:	9b06      	ldr	r3, [sp, #24]
 8008ac2:	3030      	adds	r0, #48	; 0x30
 8008ac4:	5518      	strb	r0, [r3, r4]
 8008ac6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ac8:	3401      	adds	r4, #1
 8008aca:	9007      	str	r0, [sp, #28]
 8008acc:	42a3      	cmp	r3, r4
 8008ace:	dd07      	ble.n	8008ae0 <_dtoa_r+0xbb8>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	220a      	movs	r2, #10
 8008ad4:	0038      	movs	r0, r7
 8008ad6:	9905      	ldr	r1, [sp, #20]
 8008ad8:	f7fe fa3c 	bl	8006f54 <__multadd>
 8008adc:	9005      	str	r0, [sp, #20]
 8008ade:	e7eb      	b.n	8008ab8 <_dtoa_r+0xb90>
 8008ae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ae2:	2001      	movs	r0, #1
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	dd00      	ble.n	8008aea <_dtoa_r+0xbc2>
 8008ae8:	0018      	movs	r0, r3
 8008aea:	2400      	movs	r4, #0
 8008aec:	9b06      	ldr	r3, [sp, #24]
 8008aee:	181b      	adds	r3, r3, r0
 8008af0:	9308      	str	r3, [sp, #32]
 8008af2:	9905      	ldr	r1, [sp, #20]
 8008af4:	2201      	movs	r2, #1
 8008af6:	0038      	movs	r0, r7
 8008af8:	f7fe fbda 	bl	80072b0 <__lshift>
 8008afc:	0031      	movs	r1, r6
 8008afe:	9005      	str	r0, [sp, #20]
 8008b00:	f7fe fc44 	bl	800738c <__mcmp>
 8008b04:	2800      	cmp	r0, #0
 8008b06:	dc9b      	bgt.n	8008a40 <_dtoa_r+0xb18>
 8008b08:	d102      	bne.n	8008b10 <_dtoa_r+0xbe8>
 8008b0a:	9b07      	ldr	r3, [sp, #28]
 8008b0c:	07db      	lsls	r3, r3, #31
 8008b0e:	d497      	bmi.n	8008a40 <_dtoa_r+0xb18>
 8008b10:	9b08      	ldr	r3, [sp, #32]
 8008b12:	9308      	str	r3, [sp, #32]
 8008b14:	3b01      	subs	r3, #1
 8008b16:	781a      	ldrb	r2, [r3, #0]
 8008b18:	2a30      	cmp	r2, #48	; 0x30
 8008b1a:	d0fa      	beq.n	8008b12 <_dtoa_r+0xbea>
 8008b1c:	e6db      	b.n	80088d6 <_dtoa_r+0x9ae>
 8008b1e:	9a06      	ldr	r2, [sp, #24]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d18e      	bne.n	8008a42 <_dtoa_r+0xb1a>
 8008b24:	9b02      	ldr	r3, [sp, #8]
 8008b26:	3301      	adds	r3, #1
 8008b28:	9302      	str	r3, [sp, #8]
 8008b2a:	2331      	movs	r3, #49	; 0x31
 8008b2c:	e799      	b.n	8008a62 <_dtoa_r+0xb3a>
 8008b2e:	4b09      	ldr	r3, [pc, #36]	; (8008b54 <_dtoa_r+0xc2c>)
 8008b30:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008b32:	9306      	str	r3, [sp, #24]
 8008b34:	4b08      	ldr	r3, [pc, #32]	; (8008b58 <_dtoa_r+0xc30>)
 8008b36:	2a00      	cmp	r2, #0
 8008b38:	d001      	beq.n	8008b3e <_dtoa_r+0xc16>
 8008b3a:	f7ff fa3f 	bl	8007fbc <_dtoa_r+0x94>
 8008b3e:	f7ff fa3f 	bl	8007fc0 <_dtoa_r+0x98>
 8008b42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	dcb6      	bgt.n	8008ab6 <_dtoa_r+0xb8e>
 8008b48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	dd00      	ble.n	8008b50 <_dtoa_r+0xc28>
 8008b4e:	e6ac      	b.n	80088aa <_dtoa_r+0x982>
 8008b50:	e7b1      	b.n	8008ab6 <_dtoa_r+0xb8e>
 8008b52:	46c0      	nop			; (mov r8, r8)
 8008b54:	0800a96b 	.word	0x0800a96b
 8008b58:	0800a973 	.word	0x0800a973

08008b5c <fiprintf>:
 8008b5c:	b40e      	push	{r1, r2, r3}
 8008b5e:	b503      	push	{r0, r1, lr}
 8008b60:	0001      	movs	r1, r0
 8008b62:	ab03      	add	r3, sp, #12
 8008b64:	4804      	ldr	r0, [pc, #16]	; (8008b78 <fiprintf+0x1c>)
 8008b66:	cb04      	ldmia	r3!, {r2}
 8008b68:	6800      	ldr	r0, [r0, #0]
 8008b6a:	9301      	str	r3, [sp, #4]
 8008b6c:	f000 f8c2 	bl	8008cf4 <_vfiprintf_r>
 8008b70:	b002      	add	sp, #8
 8008b72:	bc08      	pop	{r3}
 8008b74:	b003      	add	sp, #12
 8008b76:	4718      	bx	r3
 8008b78:	20000010 	.word	0x20000010

08008b7c <malloc>:
 8008b7c:	b510      	push	{r4, lr}
 8008b7e:	4b03      	ldr	r3, [pc, #12]	; (8008b8c <malloc+0x10>)
 8008b80:	0001      	movs	r1, r0
 8008b82:	6818      	ldr	r0, [r3, #0]
 8008b84:	f7fe fd82 	bl	800768c <_malloc_r>
 8008b88:	bd10      	pop	{r4, pc}
 8008b8a:	46c0      	nop			; (mov r8, r8)
 8008b8c:	20000010 	.word	0x20000010

08008b90 <memchr>:
 8008b90:	b2c9      	uxtb	r1, r1
 8008b92:	1882      	adds	r2, r0, r2
 8008b94:	4290      	cmp	r0, r2
 8008b96:	d101      	bne.n	8008b9c <memchr+0xc>
 8008b98:	2000      	movs	r0, #0
 8008b9a:	4770      	bx	lr
 8008b9c:	7803      	ldrb	r3, [r0, #0]
 8008b9e:	428b      	cmp	r3, r1
 8008ba0:	d0fb      	beq.n	8008b9a <memchr+0xa>
 8008ba2:	3001      	adds	r0, #1
 8008ba4:	e7f6      	b.n	8008b94 <memchr+0x4>

08008ba6 <memcpy>:
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	b510      	push	{r4, lr}
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d100      	bne.n	8008bb0 <memcpy+0xa>
 8008bae:	bd10      	pop	{r4, pc}
 8008bb0:	5ccc      	ldrb	r4, [r1, r3]
 8008bb2:	54c4      	strb	r4, [r0, r3]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	e7f8      	b.n	8008baa <memcpy+0x4>

08008bb8 <memmove>:
 8008bb8:	b510      	push	{r4, lr}
 8008bba:	4288      	cmp	r0, r1
 8008bbc:	d902      	bls.n	8008bc4 <memmove+0xc>
 8008bbe:	188b      	adds	r3, r1, r2
 8008bc0:	4298      	cmp	r0, r3
 8008bc2:	d303      	bcc.n	8008bcc <memmove+0x14>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	e007      	b.n	8008bd8 <memmove+0x20>
 8008bc8:	5c8b      	ldrb	r3, [r1, r2]
 8008bca:	5483      	strb	r3, [r0, r2]
 8008bcc:	3a01      	subs	r2, #1
 8008bce:	d2fb      	bcs.n	8008bc8 <memmove+0x10>
 8008bd0:	bd10      	pop	{r4, pc}
 8008bd2:	5ccc      	ldrb	r4, [r1, r3]
 8008bd4:	54c4      	strb	r4, [r0, r3]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d1fa      	bne.n	8008bd2 <memmove+0x1a>
 8008bdc:	e7f8      	b.n	8008bd0 <memmove+0x18>
	...

08008be0 <__malloc_lock>:
 8008be0:	b510      	push	{r4, lr}
 8008be2:	4802      	ldr	r0, [pc, #8]	; (8008bec <__malloc_lock+0xc>)
 8008be4:	f000 fc65 	bl	80094b2 <__retarget_lock_acquire_recursive>
 8008be8:	bd10      	pop	{r4, pc}
 8008bea:	46c0      	nop			; (mov r8, r8)
 8008bec:	200002d8 	.word	0x200002d8

08008bf0 <__malloc_unlock>:
 8008bf0:	b510      	push	{r4, lr}
 8008bf2:	4802      	ldr	r0, [pc, #8]	; (8008bfc <__malloc_unlock+0xc>)
 8008bf4:	f000 fc5e 	bl	80094b4 <__retarget_lock_release_recursive>
 8008bf8:	bd10      	pop	{r4, pc}
 8008bfa:	46c0      	nop			; (mov r8, r8)
 8008bfc:	200002d8 	.word	0x200002d8

08008c00 <_free_r>:
 8008c00:	b570      	push	{r4, r5, r6, lr}
 8008c02:	0005      	movs	r5, r0
 8008c04:	2900      	cmp	r1, #0
 8008c06:	d010      	beq.n	8008c2a <_free_r+0x2a>
 8008c08:	1f0c      	subs	r4, r1, #4
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	da00      	bge.n	8008c12 <_free_r+0x12>
 8008c10:	18e4      	adds	r4, r4, r3
 8008c12:	0028      	movs	r0, r5
 8008c14:	f7ff ffe4 	bl	8008be0 <__malloc_lock>
 8008c18:	4a1d      	ldr	r2, [pc, #116]	; (8008c90 <_free_r+0x90>)
 8008c1a:	6813      	ldr	r3, [r2, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d105      	bne.n	8008c2c <_free_r+0x2c>
 8008c20:	6063      	str	r3, [r4, #4]
 8008c22:	6014      	str	r4, [r2, #0]
 8008c24:	0028      	movs	r0, r5
 8008c26:	f7ff ffe3 	bl	8008bf0 <__malloc_unlock>
 8008c2a:	bd70      	pop	{r4, r5, r6, pc}
 8008c2c:	42a3      	cmp	r3, r4
 8008c2e:	d908      	bls.n	8008c42 <_free_r+0x42>
 8008c30:	6821      	ldr	r1, [r4, #0]
 8008c32:	1860      	adds	r0, r4, r1
 8008c34:	4283      	cmp	r3, r0
 8008c36:	d1f3      	bne.n	8008c20 <_free_r+0x20>
 8008c38:	6818      	ldr	r0, [r3, #0]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	1841      	adds	r1, r0, r1
 8008c3e:	6021      	str	r1, [r4, #0]
 8008c40:	e7ee      	b.n	8008c20 <_free_r+0x20>
 8008c42:	001a      	movs	r2, r3
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <_free_r+0x4e>
 8008c4a:	42a3      	cmp	r3, r4
 8008c4c:	d9f9      	bls.n	8008c42 <_free_r+0x42>
 8008c4e:	6811      	ldr	r1, [r2, #0]
 8008c50:	1850      	adds	r0, r2, r1
 8008c52:	42a0      	cmp	r0, r4
 8008c54:	d10b      	bne.n	8008c6e <_free_r+0x6e>
 8008c56:	6820      	ldr	r0, [r4, #0]
 8008c58:	1809      	adds	r1, r1, r0
 8008c5a:	1850      	adds	r0, r2, r1
 8008c5c:	6011      	str	r1, [r2, #0]
 8008c5e:	4283      	cmp	r3, r0
 8008c60:	d1e0      	bne.n	8008c24 <_free_r+0x24>
 8008c62:	6818      	ldr	r0, [r3, #0]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	1841      	adds	r1, r0, r1
 8008c68:	6011      	str	r1, [r2, #0]
 8008c6a:	6053      	str	r3, [r2, #4]
 8008c6c:	e7da      	b.n	8008c24 <_free_r+0x24>
 8008c6e:	42a0      	cmp	r0, r4
 8008c70:	d902      	bls.n	8008c78 <_free_r+0x78>
 8008c72:	230c      	movs	r3, #12
 8008c74:	602b      	str	r3, [r5, #0]
 8008c76:	e7d5      	b.n	8008c24 <_free_r+0x24>
 8008c78:	6821      	ldr	r1, [r4, #0]
 8008c7a:	1860      	adds	r0, r4, r1
 8008c7c:	4283      	cmp	r3, r0
 8008c7e:	d103      	bne.n	8008c88 <_free_r+0x88>
 8008c80:	6818      	ldr	r0, [r3, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	1841      	adds	r1, r0, r1
 8008c86:	6021      	str	r1, [r4, #0]
 8008c88:	6063      	str	r3, [r4, #4]
 8008c8a:	6054      	str	r4, [r2, #4]
 8008c8c:	e7ca      	b.n	8008c24 <_free_r+0x24>
 8008c8e:	46c0      	nop			; (mov r8, r8)
 8008c90:	200002cc 	.word	0x200002cc

08008c94 <_malloc_usable_size_r>:
 8008c94:	1f0b      	subs	r3, r1, #4
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	1f18      	subs	r0, r3, #4
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	da01      	bge.n	8008ca2 <_malloc_usable_size_r+0xe>
 8008c9e:	580b      	ldr	r3, [r1, r0]
 8008ca0:	18c0      	adds	r0, r0, r3
 8008ca2:	4770      	bx	lr

08008ca4 <__sfputc_r>:
 8008ca4:	6893      	ldr	r3, [r2, #8]
 8008ca6:	b510      	push	{r4, lr}
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	6093      	str	r3, [r2, #8]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	da04      	bge.n	8008cba <__sfputc_r+0x16>
 8008cb0:	6994      	ldr	r4, [r2, #24]
 8008cb2:	42a3      	cmp	r3, r4
 8008cb4:	db07      	blt.n	8008cc6 <__sfputc_r+0x22>
 8008cb6:	290a      	cmp	r1, #10
 8008cb8:	d005      	beq.n	8008cc6 <__sfputc_r+0x22>
 8008cba:	6813      	ldr	r3, [r2, #0]
 8008cbc:	1c58      	adds	r0, r3, #1
 8008cbe:	6010      	str	r0, [r2, #0]
 8008cc0:	7019      	strb	r1, [r3, #0]
 8008cc2:	0008      	movs	r0, r1
 8008cc4:	bd10      	pop	{r4, pc}
 8008cc6:	f000 f94f 	bl	8008f68 <__swbuf_r>
 8008cca:	0001      	movs	r1, r0
 8008ccc:	e7f9      	b.n	8008cc2 <__sfputc_r+0x1e>

08008cce <__sfputs_r>:
 8008cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd0:	0006      	movs	r6, r0
 8008cd2:	000f      	movs	r7, r1
 8008cd4:	0014      	movs	r4, r2
 8008cd6:	18d5      	adds	r5, r2, r3
 8008cd8:	42ac      	cmp	r4, r5
 8008cda:	d101      	bne.n	8008ce0 <__sfputs_r+0x12>
 8008cdc:	2000      	movs	r0, #0
 8008cde:	e007      	b.n	8008cf0 <__sfputs_r+0x22>
 8008ce0:	7821      	ldrb	r1, [r4, #0]
 8008ce2:	003a      	movs	r2, r7
 8008ce4:	0030      	movs	r0, r6
 8008ce6:	f7ff ffdd 	bl	8008ca4 <__sfputc_r>
 8008cea:	3401      	adds	r4, #1
 8008cec:	1c43      	adds	r3, r0, #1
 8008cee:	d1f3      	bne.n	8008cd8 <__sfputs_r+0xa>
 8008cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008cf4 <_vfiprintf_r>:
 8008cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cf6:	b0a1      	sub	sp, #132	; 0x84
 8008cf8:	0006      	movs	r6, r0
 8008cfa:	000c      	movs	r4, r1
 8008cfc:	001f      	movs	r7, r3
 8008cfe:	9203      	str	r2, [sp, #12]
 8008d00:	2800      	cmp	r0, #0
 8008d02:	d004      	beq.n	8008d0e <_vfiprintf_r+0x1a>
 8008d04:	6983      	ldr	r3, [r0, #24]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <_vfiprintf_r+0x1a>
 8008d0a:	f000 fb31 	bl	8009370 <__sinit>
 8008d0e:	4b8e      	ldr	r3, [pc, #568]	; (8008f48 <_vfiprintf_r+0x254>)
 8008d10:	429c      	cmp	r4, r3
 8008d12:	d11c      	bne.n	8008d4e <_vfiprintf_r+0x5a>
 8008d14:	6874      	ldr	r4, [r6, #4]
 8008d16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d18:	07db      	lsls	r3, r3, #31
 8008d1a:	d405      	bmi.n	8008d28 <_vfiprintf_r+0x34>
 8008d1c:	89a3      	ldrh	r3, [r4, #12]
 8008d1e:	059b      	lsls	r3, r3, #22
 8008d20:	d402      	bmi.n	8008d28 <_vfiprintf_r+0x34>
 8008d22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d24:	f000 fbc5 	bl	80094b2 <__retarget_lock_acquire_recursive>
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	071b      	lsls	r3, r3, #28
 8008d2c:	d502      	bpl.n	8008d34 <_vfiprintf_r+0x40>
 8008d2e:	6923      	ldr	r3, [r4, #16]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d11d      	bne.n	8008d70 <_vfiprintf_r+0x7c>
 8008d34:	0021      	movs	r1, r4
 8008d36:	0030      	movs	r0, r6
 8008d38:	f000 f96c 	bl	8009014 <__swsetup_r>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d017      	beq.n	8008d70 <_vfiprintf_r+0x7c>
 8008d40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d42:	07db      	lsls	r3, r3, #31
 8008d44:	d50d      	bpl.n	8008d62 <_vfiprintf_r+0x6e>
 8008d46:	2001      	movs	r0, #1
 8008d48:	4240      	negs	r0, r0
 8008d4a:	b021      	add	sp, #132	; 0x84
 8008d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d4e:	4b7f      	ldr	r3, [pc, #508]	; (8008f4c <_vfiprintf_r+0x258>)
 8008d50:	429c      	cmp	r4, r3
 8008d52:	d101      	bne.n	8008d58 <_vfiprintf_r+0x64>
 8008d54:	68b4      	ldr	r4, [r6, #8]
 8008d56:	e7de      	b.n	8008d16 <_vfiprintf_r+0x22>
 8008d58:	4b7d      	ldr	r3, [pc, #500]	; (8008f50 <_vfiprintf_r+0x25c>)
 8008d5a:	429c      	cmp	r4, r3
 8008d5c:	d1db      	bne.n	8008d16 <_vfiprintf_r+0x22>
 8008d5e:	68f4      	ldr	r4, [r6, #12]
 8008d60:	e7d9      	b.n	8008d16 <_vfiprintf_r+0x22>
 8008d62:	89a3      	ldrh	r3, [r4, #12]
 8008d64:	059b      	lsls	r3, r3, #22
 8008d66:	d4ee      	bmi.n	8008d46 <_vfiprintf_r+0x52>
 8008d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d6a:	f000 fba3 	bl	80094b4 <__retarget_lock_release_recursive>
 8008d6e:	e7ea      	b.n	8008d46 <_vfiprintf_r+0x52>
 8008d70:	2300      	movs	r3, #0
 8008d72:	ad08      	add	r5, sp, #32
 8008d74:	616b      	str	r3, [r5, #20]
 8008d76:	3320      	adds	r3, #32
 8008d78:	766b      	strb	r3, [r5, #25]
 8008d7a:	3310      	adds	r3, #16
 8008d7c:	76ab      	strb	r3, [r5, #26]
 8008d7e:	9707      	str	r7, [sp, #28]
 8008d80:	9f03      	ldr	r7, [sp, #12]
 8008d82:	783b      	ldrb	r3, [r7, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d001      	beq.n	8008d8c <_vfiprintf_r+0x98>
 8008d88:	2b25      	cmp	r3, #37	; 0x25
 8008d8a:	d14e      	bne.n	8008e2a <_vfiprintf_r+0x136>
 8008d8c:	9b03      	ldr	r3, [sp, #12]
 8008d8e:	1afb      	subs	r3, r7, r3
 8008d90:	9305      	str	r3, [sp, #20]
 8008d92:	9b03      	ldr	r3, [sp, #12]
 8008d94:	429f      	cmp	r7, r3
 8008d96:	d00d      	beq.n	8008db4 <_vfiprintf_r+0xc0>
 8008d98:	9b05      	ldr	r3, [sp, #20]
 8008d9a:	0021      	movs	r1, r4
 8008d9c:	0030      	movs	r0, r6
 8008d9e:	9a03      	ldr	r2, [sp, #12]
 8008da0:	f7ff ff95 	bl	8008cce <__sfputs_r>
 8008da4:	1c43      	adds	r3, r0, #1
 8008da6:	d100      	bne.n	8008daa <_vfiprintf_r+0xb6>
 8008da8:	e0b5      	b.n	8008f16 <_vfiprintf_r+0x222>
 8008daa:	696a      	ldr	r2, [r5, #20]
 8008dac:	9b05      	ldr	r3, [sp, #20]
 8008dae:	4694      	mov	ip, r2
 8008db0:	4463      	add	r3, ip
 8008db2:	616b      	str	r3, [r5, #20]
 8008db4:	783b      	ldrb	r3, [r7, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d100      	bne.n	8008dbc <_vfiprintf_r+0xc8>
 8008dba:	e0ac      	b.n	8008f16 <_vfiprintf_r+0x222>
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	1c7b      	adds	r3, r7, #1
 8008dc0:	9303      	str	r3, [sp, #12]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	4252      	negs	r2, r2
 8008dc6:	606a      	str	r2, [r5, #4]
 8008dc8:	a904      	add	r1, sp, #16
 8008dca:	3254      	adds	r2, #84	; 0x54
 8008dcc:	1852      	adds	r2, r2, r1
 8008dce:	602b      	str	r3, [r5, #0]
 8008dd0:	60eb      	str	r3, [r5, #12]
 8008dd2:	60ab      	str	r3, [r5, #8]
 8008dd4:	7013      	strb	r3, [r2, #0]
 8008dd6:	65ab      	str	r3, [r5, #88]	; 0x58
 8008dd8:	9b03      	ldr	r3, [sp, #12]
 8008dda:	2205      	movs	r2, #5
 8008ddc:	7819      	ldrb	r1, [r3, #0]
 8008dde:	485d      	ldr	r0, [pc, #372]	; (8008f54 <_vfiprintf_r+0x260>)
 8008de0:	f7ff fed6 	bl	8008b90 <memchr>
 8008de4:	9b03      	ldr	r3, [sp, #12]
 8008de6:	1c5f      	adds	r7, r3, #1
 8008de8:	2800      	cmp	r0, #0
 8008dea:	d120      	bne.n	8008e2e <_vfiprintf_r+0x13a>
 8008dec:	682a      	ldr	r2, [r5, #0]
 8008dee:	06d3      	lsls	r3, r2, #27
 8008df0:	d504      	bpl.n	8008dfc <_vfiprintf_r+0x108>
 8008df2:	2353      	movs	r3, #83	; 0x53
 8008df4:	a904      	add	r1, sp, #16
 8008df6:	185b      	adds	r3, r3, r1
 8008df8:	2120      	movs	r1, #32
 8008dfa:	7019      	strb	r1, [r3, #0]
 8008dfc:	0713      	lsls	r3, r2, #28
 8008dfe:	d504      	bpl.n	8008e0a <_vfiprintf_r+0x116>
 8008e00:	2353      	movs	r3, #83	; 0x53
 8008e02:	a904      	add	r1, sp, #16
 8008e04:	185b      	adds	r3, r3, r1
 8008e06:	212b      	movs	r1, #43	; 0x2b
 8008e08:	7019      	strb	r1, [r3, #0]
 8008e0a:	9b03      	ldr	r3, [sp, #12]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8008e10:	d016      	beq.n	8008e40 <_vfiprintf_r+0x14c>
 8008e12:	2100      	movs	r1, #0
 8008e14:	68eb      	ldr	r3, [r5, #12]
 8008e16:	9f03      	ldr	r7, [sp, #12]
 8008e18:	783a      	ldrb	r2, [r7, #0]
 8008e1a:	1c78      	adds	r0, r7, #1
 8008e1c:	3a30      	subs	r2, #48	; 0x30
 8008e1e:	4684      	mov	ip, r0
 8008e20:	2a09      	cmp	r2, #9
 8008e22:	d94f      	bls.n	8008ec4 <_vfiprintf_r+0x1d0>
 8008e24:	2900      	cmp	r1, #0
 8008e26:	d111      	bne.n	8008e4c <_vfiprintf_r+0x158>
 8008e28:	e017      	b.n	8008e5a <_vfiprintf_r+0x166>
 8008e2a:	3701      	adds	r7, #1
 8008e2c:	e7a9      	b.n	8008d82 <_vfiprintf_r+0x8e>
 8008e2e:	4b49      	ldr	r3, [pc, #292]	; (8008f54 <_vfiprintf_r+0x260>)
 8008e30:	682a      	ldr	r2, [r5, #0]
 8008e32:	1ac0      	subs	r0, r0, r3
 8008e34:	2301      	movs	r3, #1
 8008e36:	4083      	lsls	r3, r0
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	602b      	str	r3, [r5, #0]
 8008e3c:	9703      	str	r7, [sp, #12]
 8008e3e:	e7cb      	b.n	8008dd8 <_vfiprintf_r+0xe4>
 8008e40:	9b07      	ldr	r3, [sp, #28]
 8008e42:	1d19      	adds	r1, r3, #4
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	9107      	str	r1, [sp, #28]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	db01      	blt.n	8008e50 <_vfiprintf_r+0x15c>
 8008e4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e4e:	e004      	b.n	8008e5a <_vfiprintf_r+0x166>
 8008e50:	425b      	negs	r3, r3
 8008e52:	60eb      	str	r3, [r5, #12]
 8008e54:	2302      	movs	r3, #2
 8008e56:	4313      	orrs	r3, r2
 8008e58:	602b      	str	r3, [r5, #0]
 8008e5a:	783b      	ldrb	r3, [r7, #0]
 8008e5c:	2b2e      	cmp	r3, #46	; 0x2e
 8008e5e:	d10a      	bne.n	8008e76 <_vfiprintf_r+0x182>
 8008e60:	787b      	ldrb	r3, [r7, #1]
 8008e62:	2b2a      	cmp	r3, #42	; 0x2a
 8008e64:	d137      	bne.n	8008ed6 <_vfiprintf_r+0x1e2>
 8008e66:	9b07      	ldr	r3, [sp, #28]
 8008e68:	3702      	adds	r7, #2
 8008e6a:	1d1a      	adds	r2, r3, #4
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	9207      	str	r2, [sp, #28]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	db2d      	blt.n	8008ed0 <_vfiprintf_r+0x1dc>
 8008e74:	9309      	str	r3, [sp, #36]	; 0x24
 8008e76:	2203      	movs	r2, #3
 8008e78:	7839      	ldrb	r1, [r7, #0]
 8008e7a:	4837      	ldr	r0, [pc, #220]	; (8008f58 <_vfiprintf_r+0x264>)
 8008e7c:	f7ff fe88 	bl	8008b90 <memchr>
 8008e80:	2800      	cmp	r0, #0
 8008e82:	d007      	beq.n	8008e94 <_vfiprintf_r+0x1a0>
 8008e84:	4b34      	ldr	r3, [pc, #208]	; (8008f58 <_vfiprintf_r+0x264>)
 8008e86:	682a      	ldr	r2, [r5, #0]
 8008e88:	1ac0      	subs	r0, r0, r3
 8008e8a:	2340      	movs	r3, #64	; 0x40
 8008e8c:	4083      	lsls	r3, r0
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	3701      	adds	r7, #1
 8008e92:	602b      	str	r3, [r5, #0]
 8008e94:	7839      	ldrb	r1, [r7, #0]
 8008e96:	1c7b      	adds	r3, r7, #1
 8008e98:	2206      	movs	r2, #6
 8008e9a:	4830      	ldr	r0, [pc, #192]	; (8008f5c <_vfiprintf_r+0x268>)
 8008e9c:	9303      	str	r3, [sp, #12]
 8008e9e:	7629      	strb	r1, [r5, #24]
 8008ea0:	f7ff fe76 	bl	8008b90 <memchr>
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	d045      	beq.n	8008f34 <_vfiprintf_r+0x240>
 8008ea8:	4b2d      	ldr	r3, [pc, #180]	; (8008f60 <_vfiprintf_r+0x26c>)
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d127      	bne.n	8008efe <_vfiprintf_r+0x20a>
 8008eae:	2207      	movs	r2, #7
 8008eb0:	9b07      	ldr	r3, [sp, #28]
 8008eb2:	3307      	adds	r3, #7
 8008eb4:	4393      	bics	r3, r2
 8008eb6:	3308      	adds	r3, #8
 8008eb8:	9307      	str	r3, [sp, #28]
 8008eba:	696b      	ldr	r3, [r5, #20]
 8008ebc:	9a04      	ldr	r2, [sp, #16]
 8008ebe:	189b      	adds	r3, r3, r2
 8008ec0:	616b      	str	r3, [r5, #20]
 8008ec2:	e75d      	b.n	8008d80 <_vfiprintf_r+0x8c>
 8008ec4:	210a      	movs	r1, #10
 8008ec6:	434b      	muls	r3, r1
 8008ec8:	4667      	mov	r7, ip
 8008eca:	189b      	adds	r3, r3, r2
 8008ecc:	3909      	subs	r1, #9
 8008ece:	e7a3      	b.n	8008e18 <_vfiprintf_r+0x124>
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	425b      	negs	r3, r3
 8008ed4:	e7ce      	b.n	8008e74 <_vfiprintf_r+0x180>
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	001a      	movs	r2, r3
 8008eda:	3701      	adds	r7, #1
 8008edc:	606b      	str	r3, [r5, #4]
 8008ede:	7839      	ldrb	r1, [r7, #0]
 8008ee0:	1c78      	adds	r0, r7, #1
 8008ee2:	3930      	subs	r1, #48	; 0x30
 8008ee4:	4684      	mov	ip, r0
 8008ee6:	2909      	cmp	r1, #9
 8008ee8:	d903      	bls.n	8008ef2 <_vfiprintf_r+0x1fe>
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d0c3      	beq.n	8008e76 <_vfiprintf_r+0x182>
 8008eee:	9209      	str	r2, [sp, #36]	; 0x24
 8008ef0:	e7c1      	b.n	8008e76 <_vfiprintf_r+0x182>
 8008ef2:	230a      	movs	r3, #10
 8008ef4:	435a      	muls	r2, r3
 8008ef6:	4667      	mov	r7, ip
 8008ef8:	1852      	adds	r2, r2, r1
 8008efa:	3b09      	subs	r3, #9
 8008efc:	e7ef      	b.n	8008ede <_vfiprintf_r+0x1ea>
 8008efe:	ab07      	add	r3, sp, #28
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	0022      	movs	r2, r4
 8008f04:	0029      	movs	r1, r5
 8008f06:	0030      	movs	r0, r6
 8008f08:	4b16      	ldr	r3, [pc, #88]	; (8008f64 <_vfiprintf_r+0x270>)
 8008f0a:	e000      	b.n	8008f0e <_vfiprintf_r+0x21a>
 8008f0c:	bf00      	nop
 8008f0e:	9004      	str	r0, [sp, #16]
 8008f10:	9b04      	ldr	r3, [sp, #16]
 8008f12:	3301      	adds	r3, #1
 8008f14:	d1d1      	bne.n	8008eba <_vfiprintf_r+0x1c6>
 8008f16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f18:	07db      	lsls	r3, r3, #31
 8008f1a:	d405      	bmi.n	8008f28 <_vfiprintf_r+0x234>
 8008f1c:	89a3      	ldrh	r3, [r4, #12]
 8008f1e:	059b      	lsls	r3, r3, #22
 8008f20:	d402      	bmi.n	8008f28 <_vfiprintf_r+0x234>
 8008f22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f24:	f000 fac6 	bl	80094b4 <__retarget_lock_release_recursive>
 8008f28:	89a3      	ldrh	r3, [r4, #12]
 8008f2a:	065b      	lsls	r3, r3, #25
 8008f2c:	d500      	bpl.n	8008f30 <_vfiprintf_r+0x23c>
 8008f2e:	e70a      	b.n	8008d46 <_vfiprintf_r+0x52>
 8008f30:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008f32:	e70a      	b.n	8008d4a <_vfiprintf_r+0x56>
 8008f34:	ab07      	add	r3, sp, #28
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	0022      	movs	r2, r4
 8008f3a:	0029      	movs	r1, r5
 8008f3c:	0030      	movs	r0, r6
 8008f3e:	4b09      	ldr	r3, [pc, #36]	; (8008f64 <_vfiprintf_r+0x270>)
 8008f40:	f7fe fe1c 	bl	8007b7c <_printf_i>
 8008f44:	e7e3      	b.n	8008f0e <_vfiprintf_r+0x21a>
 8008f46:	46c0      	nop			; (mov r8, r8)
 8008f48:	0800a9f8 	.word	0x0800a9f8
 8008f4c:	0800aa18 	.word	0x0800aa18
 8008f50:	0800a9d8 	.word	0x0800a9d8
 8008f54:	0800a8fc 	.word	0x0800a8fc
 8008f58:	0800a902 	.word	0x0800a902
 8008f5c:	0800a906 	.word	0x0800a906
 8008f60:	00000000 	.word	0x00000000
 8008f64:	08008ccf 	.word	0x08008ccf

08008f68 <__swbuf_r>:
 8008f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6a:	0005      	movs	r5, r0
 8008f6c:	000e      	movs	r6, r1
 8008f6e:	0014      	movs	r4, r2
 8008f70:	2800      	cmp	r0, #0
 8008f72:	d004      	beq.n	8008f7e <__swbuf_r+0x16>
 8008f74:	6983      	ldr	r3, [r0, #24]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d101      	bne.n	8008f7e <__swbuf_r+0x16>
 8008f7a:	f000 f9f9 	bl	8009370 <__sinit>
 8008f7e:	4b22      	ldr	r3, [pc, #136]	; (8009008 <__swbuf_r+0xa0>)
 8008f80:	429c      	cmp	r4, r3
 8008f82:	d12e      	bne.n	8008fe2 <__swbuf_r+0x7a>
 8008f84:	686c      	ldr	r4, [r5, #4]
 8008f86:	69a3      	ldr	r3, [r4, #24]
 8008f88:	60a3      	str	r3, [r4, #8]
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	071b      	lsls	r3, r3, #28
 8008f8e:	d532      	bpl.n	8008ff6 <__swbuf_r+0x8e>
 8008f90:	6923      	ldr	r3, [r4, #16]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d02f      	beq.n	8008ff6 <__swbuf_r+0x8e>
 8008f96:	6823      	ldr	r3, [r4, #0]
 8008f98:	6922      	ldr	r2, [r4, #16]
 8008f9a:	b2f7      	uxtb	r7, r6
 8008f9c:	1a98      	subs	r0, r3, r2
 8008f9e:	6963      	ldr	r3, [r4, #20]
 8008fa0:	b2f6      	uxtb	r6, r6
 8008fa2:	4283      	cmp	r3, r0
 8008fa4:	dc05      	bgt.n	8008fb2 <__swbuf_r+0x4a>
 8008fa6:	0021      	movs	r1, r4
 8008fa8:	0028      	movs	r0, r5
 8008faa:	f000 f93f 	bl	800922c <_fflush_r>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	d127      	bne.n	8009002 <__swbuf_r+0x9a>
 8008fb2:	68a3      	ldr	r3, [r4, #8]
 8008fb4:	3001      	adds	r0, #1
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	60a3      	str	r3, [r4, #8]
 8008fba:	6823      	ldr	r3, [r4, #0]
 8008fbc:	1c5a      	adds	r2, r3, #1
 8008fbe:	6022      	str	r2, [r4, #0]
 8008fc0:	701f      	strb	r7, [r3, #0]
 8008fc2:	6963      	ldr	r3, [r4, #20]
 8008fc4:	4283      	cmp	r3, r0
 8008fc6:	d004      	beq.n	8008fd2 <__swbuf_r+0x6a>
 8008fc8:	89a3      	ldrh	r3, [r4, #12]
 8008fca:	07db      	lsls	r3, r3, #31
 8008fcc:	d507      	bpl.n	8008fde <__swbuf_r+0x76>
 8008fce:	2e0a      	cmp	r6, #10
 8008fd0:	d105      	bne.n	8008fde <__swbuf_r+0x76>
 8008fd2:	0021      	movs	r1, r4
 8008fd4:	0028      	movs	r0, r5
 8008fd6:	f000 f929 	bl	800922c <_fflush_r>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	d111      	bne.n	8009002 <__swbuf_r+0x9a>
 8008fde:	0030      	movs	r0, r6
 8008fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fe2:	4b0a      	ldr	r3, [pc, #40]	; (800900c <__swbuf_r+0xa4>)
 8008fe4:	429c      	cmp	r4, r3
 8008fe6:	d101      	bne.n	8008fec <__swbuf_r+0x84>
 8008fe8:	68ac      	ldr	r4, [r5, #8]
 8008fea:	e7cc      	b.n	8008f86 <__swbuf_r+0x1e>
 8008fec:	4b08      	ldr	r3, [pc, #32]	; (8009010 <__swbuf_r+0xa8>)
 8008fee:	429c      	cmp	r4, r3
 8008ff0:	d1c9      	bne.n	8008f86 <__swbuf_r+0x1e>
 8008ff2:	68ec      	ldr	r4, [r5, #12]
 8008ff4:	e7c7      	b.n	8008f86 <__swbuf_r+0x1e>
 8008ff6:	0021      	movs	r1, r4
 8008ff8:	0028      	movs	r0, r5
 8008ffa:	f000 f80b 	bl	8009014 <__swsetup_r>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	d0c9      	beq.n	8008f96 <__swbuf_r+0x2e>
 8009002:	2601      	movs	r6, #1
 8009004:	4276      	negs	r6, r6
 8009006:	e7ea      	b.n	8008fde <__swbuf_r+0x76>
 8009008:	0800a9f8 	.word	0x0800a9f8
 800900c:	0800aa18 	.word	0x0800aa18
 8009010:	0800a9d8 	.word	0x0800a9d8

08009014 <__swsetup_r>:
 8009014:	4b37      	ldr	r3, [pc, #220]	; (80090f4 <__swsetup_r+0xe0>)
 8009016:	b570      	push	{r4, r5, r6, lr}
 8009018:	681d      	ldr	r5, [r3, #0]
 800901a:	0006      	movs	r6, r0
 800901c:	000c      	movs	r4, r1
 800901e:	2d00      	cmp	r5, #0
 8009020:	d005      	beq.n	800902e <__swsetup_r+0x1a>
 8009022:	69ab      	ldr	r3, [r5, #24]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d102      	bne.n	800902e <__swsetup_r+0x1a>
 8009028:	0028      	movs	r0, r5
 800902a:	f000 f9a1 	bl	8009370 <__sinit>
 800902e:	4b32      	ldr	r3, [pc, #200]	; (80090f8 <__swsetup_r+0xe4>)
 8009030:	429c      	cmp	r4, r3
 8009032:	d10f      	bne.n	8009054 <__swsetup_r+0x40>
 8009034:	686c      	ldr	r4, [r5, #4]
 8009036:	230c      	movs	r3, #12
 8009038:	5ee2      	ldrsh	r2, [r4, r3]
 800903a:	b293      	uxth	r3, r2
 800903c:	0711      	lsls	r1, r2, #28
 800903e:	d42d      	bmi.n	800909c <__swsetup_r+0x88>
 8009040:	06d9      	lsls	r1, r3, #27
 8009042:	d411      	bmi.n	8009068 <__swsetup_r+0x54>
 8009044:	2309      	movs	r3, #9
 8009046:	2001      	movs	r0, #1
 8009048:	6033      	str	r3, [r6, #0]
 800904a:	3337      	adds	r3, #55	; 0x37
 800904c:	4313      	orrs	r3, r2
 800904e:	81a3      	strh	r3, [r4, #12]
 8009050:	4240      	negs	r0, r0
 8009052:	bd70      	pop	{r4, r5, r6, pc}
 8009054:	4b29      	ldr	r3, [pc, #164]	; (80090fc <__swsetup_r+0xe8>)
 8009056:	429c      	cmp	r4, r3
 8009058:	d101      	bne.n	800905e <__swsetup_r+0x4a>
 800905a:	68ac      	ldr	r4, [r5, #8]
 800905c:	e7eb      	b.n	8009036 <__swsetup_r+0x22>
 800905e:	4b28      	ldr	r3, [pc, #160]	; (8009100 <__swsetup_r+0xec>)
 8009060:	429c      	cmp	r4, r3
 8009062:	d1e8      	bne.n	8009036 <__swsetup_r+0x22>
 8009064:	68ec      	ldr	r4, [r5, #12]
 8009066:	e7e6      	b.n	8009036 <__swsetup_r+0x22>
 8009068:	075b      	lsls	r3, r3, #29
 800906a:	d513      	bpl.n	8009094 <__swsetup_r+0x80>
 800906c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800906e:	2900      	cmp	r1, #0
 8009070:	d008      	beq.n	8009084 <__swsetup_r+0x70>
 8009072:	0023      	movs	r3, r4
 8009074:	3344      	adds	r3, #68	; 0x44
 8009076:	4299      	cmp	r1, r3
 8009078:	d002      	beq.n	8009080 <__swsetup_r+0x6c>
 800907a:	0030      	movs	r0, r6
 800907c:	f7ff fdc0 	bl	8008c00 <_free_r>
 8009080:	2300      	movs	r3, #0
 8009082:	6363      	str	r3, [r4, #52]	; 0x34
 8009084:	2224      	movs	r2, #36	; 0x24
 8009086:	89a3      	ldrh	r3, [r4, #12]
 8009088:	4393      	bics	r3, r2
 800908a:	81a3      	strh	r3, [r4, #12]
 800908c:	2300      	movs	r3, #0
 800908e:	6063      	str	r3, [r4, #4]
 8009090:	6923      	ldr	r3, [r4, #16]
 8009092:	6023      	str	r3, [r4, #0]
 8009094:	2308      	movs	r3, #8
 8009096:	89a2      	ldrh	r2, [r4, #12]
 8009098:	4313      	orrs	r3, r2
 800909a:	81a3      	strh	r3, [r4, #12]
 800909c:	6923      	ldr	r3, [r4, #16]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10b      	bne.n	80090ba <__swsetup_r+0xa6>
 80090a2:	21a0      	movs	r1, #160	; 0xa0
 80090a4:	2280      	movs	r2, #128	; 0x80
 80090a6:	89a3      	ldrh	r3, [r4, #12]
 80090a8:	0089      	lsls	r1, r1, #2
 80090aa:	0092      	lsls	r2, r2, #2
 80090ac:	400b      	ands	r3, r1
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d003      	beq.n	80090ba <__swsetup_r+0xa6>
 80090b2:	0021      	movs	r1, r4
 80090b4:	0030      	movs	r0, r6
 80090b6:	f000 fa27 	bl	8009508 <__smakebuf_r>
 80090ba:	220c      	movs	r2, #12
 80090bc:	5ea3      	ldrsh	r3, [r4, r2]
 80090be:	2001      	movs	r0, #1
 80090c0:	001a      	movs	r2, r3
 80090c2:	b299      	uxth	r1, r3
 80090c4:	4002      	ands	r2, r0
 80090c6:	4203      	tst	r3, r0
 80090c8:	d00f      	beq.n	80090ea <__swsetup_r+0xd6>
 80090ca:	2200      	movs	r2, #0
 80090cc:	60a2      	str	r2, [r4, #8]
 80090ce:	6962      	ldr	r2, [r4, #20]
 80090d0:	4252      	negs	r2, r2
 80090d2:	61a2      	str	r2, [r4, #24]
 80090d4:	2000      	movs	r0, #0
 80090d6:	6922      	ldr	r2, [r4, #16]
 80090d8:	4282      	cmp	r2, r0
 80090da:	d1ba      	bne.n	8009052 <__swsetup_r+0x3e>
 80090dc:	060a      	lsls	r2, r1, #24
 80090de:	d5b8      	bpl.n	8009052 <__swsetup_r+0x3e>
 80090e0:	2240      	movs	r2, #64	; 0x40
 80090e2:	4313      	orrs	r3, r2
 80090e4:	81a3      	strh	r3, [r4, #12]
 80090e6:	3801      	subs	r0, #1
 80090e8:	e7b3      	b.n	8009052 <__swsetup_r+0x3e>
 80090ea:	0788      	lsls	r0, r1, #30
 80090ec:	d400      	bmi.n	80090f0 <__swsetup_r+0xdc>
 80090ee:	6962      	ldr	r2, [r4, #20]
 80090f0:	60a2      	str	r2, [r4, #8]
 80090f2:	e7ef      	b.n	80090d4 <__swsetup_r+0xc0>
 80090f4:	20000010 	.word	0x20000010
 80090f8:	0800a9f8 	.word	0x0800a9f8
 80090fc:	0800aa18 	.word	0x0800aa18
 8009100:	0800a9d8 	.word	0x0800a9d8

08009104 <abort>:
 8009104:	2006      	movs	r0, #6
 8009106:	b510      	push	{r4, lr}
 8009108:	f000 fa6c 	bl	80095e4 <raise>
 800910c:	2001      	movs	r0, #1
 800910e:	f7fa f805 	bl	800311c <_exit>
	...

08009114 <__sflush_r>:
 8009114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009116:	898b      	ldrh	r3, [r1, #12]
 8009118:	0005      	movs	r5, r0
 800911a:	000c      	movs	r4, r1
 800911c:	071a      	lsls	r2, r3, #28
 800911e:	d45f      	bmi.n	80091e0 <__sflush_r+0xcc>
 8009120:	684a      	ldr	r2, [r1, #4]
 8009122:	2a00      	cmp	r2, #0
 8009124:	dc04      	bgt.n	8009130 <__sflush_r+0x1c>
 8009126:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009128:	2a00      	cmp	r2, #0
 800912a:	dc01      	bgt.n	8009130 <__sflush_r+0x1c>
 800912c:	2000      	movs	r0, #0
 800912e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009130:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009132:	2f00      	cmp	r7, #0
 8009134:	d0fa      	beq.n	800912c <__sflush_r+0x18>
 8009136:	2200      	movs	r2, #0
 8009138:	2180      	movs	r1, #128	; 0x80
 800913a:	682e      	ldr	r6, [r5, #0]
 800913c:	602a      	str	r2, [r5, #0]
 800913e:	001a      	movs	r2, r3
 8009140:	0149      	lsls	r1, r1, #5
 8009142:	400a      	ands	r2, r1
 8009144:	420b      	tst	r3, r1
 8009146:	d034      	beq.n	80091b2 <__sflush_r+0x9e>
 8009148:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800914a:	89a3      	ldrh	r3, [r4, #12]
 800914c:	075b      	lsls	r3, r3, #29
 800914e:	d506      	bpl.n	800915e <__sflush_r+0x4a>
 8009150:	6863      	ldr	r3, [r4, #4]
 8009152:	1ac0      	subs	r0, r0, r3
 8009154:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009156:	2b00      	cmp	r3, #0
 8009158:	d001      	beq.n	800915e <__sflush_r+0x4a>
 800915a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800915c:	1ac0      	subs	r0, r0, r3
 800915e:	0002      	movs	r2, r0
 8009160:	6a21      	ldr	r1, [r4, #32]
 8009162:	2300      	movs	r3, #0
 8009164:	0028      	movs	r0, r5
 8009166:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009168:	47b8      	blx	r7
 800916a:	89a1      	ldrh	r1, [r4, #12]
 800916c:	1c43      	adds	r3, r0, #1
 800916e:	d106      	bne.n	800917e <__sflush_r+0x6a>
 8009170:	682b      	ldr	r3, [r5, #0]
 8009172:	2b1d      	cmp	r3, #29
 8009174:	d831      	bhi.n	80091da <__sflush_r+0xc6>
 8009176:	4a2c      	ldr	r2, [pc, #176]	; (8009228 <__sflush_r+0x114>)
 8009178:	40da      	lsrs	r2, r3
 800917a:	07d3      	lsls	r3, r2, #31
 800917c:	d52d      	bpl.n	80091da <__sflush_r+0xc6>
 800917e:	2300      	movs	r3, #0
 8009180:	6063      	str	r3, [r4, #4]
 8009182:	6923      	ldr	r3, [r4, #16]
 8009184:	6023      	str	r3, [r4, #0]
 8009186:	04cb      	lsls	r3, r1, #19
 8009188:	d505      	bpl.n	8009196 <__sflush_r+0x82>
 800918a:	1c43      	adds	r3, r0, #1
 800918c:	d102      	bne.n	8009194 <__sflush_r+0x80>
 800918e:	682b      	ldr	r3, [r5, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d100      	bne.n	8009196 <__sflush_r+0x82>
 8009194:	6560      	str	r0, [r4, #84]	; 0x54
 8009196:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009198:	602e      	str	r6, [r5, #0]
 800919a:	2900      	cmp	r1, #0
 800919c:	d0c6      	beq.n	800912c <__sflush_r+0x18>
 800919e:	0023      	movs	r3, r4
 80091a0:	3344      	adds	r3, #68	; 0x44
 80091a2:	4299      	cmp	r1, r3
 80091a4:	d002      	beq.n	80091ac <__sflush_r+0x98>
 80091a6:	0028      	movs	r0, r5
 80091a8:	f7ff fd2a 	bl	8008c00 <_free_r>
 80091ac:	2000      	movs	r0, #0
 80091ae:	6360      	str	r0, [r4, #52]	; 0x34
 80091b0:	e7bd      	b.n	800912e <__sflush_r+0x1a>
 80091b2:	2301      	movs	r3, #1
 80091b4:	0028      	movs	r0, r5
 80091b6:	6a21      	ldr	r1, [r4, #32]
 80091b8:	47b8      	blx	r7
 80091ba:	1c43      	adds	r3, r0, #1
 80091bc:	d1c5      	bne.n	800914a <__sflush_r+0x36>
 80091be:	682b      	ldr	r3, [r5, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d0c2      	beq.n	800914a <__sflush_r+0x36>
 80091c4:	2b1d      	cmp	r3, #29
 80091c6:	d001      	beq.n	80091cc <__sflush_r+0xb8>
 80091c8:	2b16      	cmp	r3, #22
 80091ca:	d101      	bne.n	80091d0 <__sflush_r+0xbc>
 80091cc:	602e      	str	r6, [r5, #0]
 80091ce:	e7ad      	b.n	800912c <__sflush_r+0x18>
 80091d0:	2340      	movs	r3, #64	; 0x40
 80091d2:	89a2      	ldrh	r2, [r4, #12]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	81a3      	strh	r3, [r4, #12]
 80091d8:	e7a9      	b.n	800912e <__sflush_r+0x1a>
 80091da:	2340      	movs	r3, #64	; 0x40
 80091dc:	430b      	orrs	r3, r1
 80091de:	e7fa      	b.n	80091d6 <__sflush_r+0xc2>
 80091e0:	690f      	ldr	r7, [r1, #16]
 80091e2:	2f00      	cmp	r7, #0
 80091e4:	d0a2      	beq.n	800912c <__sflush_r+0x18>
 80091e6:	680a      	ldr	r2, [r1, #0]
 80091e8:	600f      	str	r7, [r1, #0]
 80091ea:	1bd2      	subs	r2, r2, r7
 80091ec:	9201      	str	r2, [sp, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	079b      	lsls	r3, r3, #30
 80091f2:	d100      	bne.n	80091f6 <__sflush_r+0xe2>
 80091f4:	694a      	ldr	r2, [r1, #20]
 80091f6:	60a2      	str	r2, [r4, #8]
 80091f8:	9b01      	ldr	r3, [sp, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	dc00      	bgt.n	8009200 <__sflush_r+0xec>
 80091fe:	e795      	b.n	800912c <__sflush_r+0x18>
 8009200:	003a      	movs	r2, r7
 8009202:	0028      	movs	r0, r5
 8009204:	9b01      	ldr	r3, [sp, #4]
 8009206:	6a21      	ldr	r1, [r4, #32]
 8009208:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800920a:	47b0      	blx	r6
 800920c:	2800      	cmp	r0, #0
 800920e:	dc06      	bgt.n	800921e <__sflush_r+0x10a>
 8009210:	2340      	movs	r3, #64	; 0x40
 8009212:	2001      	movs	r0, #1
 8009214:	89a2      	ldrh	r2, [r4, #12]
 8009216:	4240      	negs	r0, r0
 8009218:	4313      	orrs	r3, r2
 800921a:	81a3      	strh	r3, [r4, #12]
 800921c:	e787      	b.n	800912e <__sflush_r+0x1a>
 800921e:	9b01      	ldr	r3, [sp, #4]
 8009220:	183f      	adds	r7, r7, r0
 8009222:	1a1b      	subs	r3, r3, r0
 8009224:	9301      	str	r3, [sp, #4]
 8009226:	e7e7      	b.n	80091f8 <__sflush_r+0xe4>
 8009228:	20400001 	.word	0x20400001

0800922c <_fflush_r>:
 800922c:	690b      	ldr	r3, [r1, #16]
 800922e:	b570      	push	{r4, r5, r6, lr}
 8009230:	0005      	movs	r5, r0
 8009232:	000c      	movs	r4, r1
 8009234:	2b00      	cmp	r3, #0
 8009236:	d102      	bne.n	800923e <_fflush_r+0x12>
 8009238:	2500      	movs	r5, #0
 800923a:	0028      	movs	r0, r5
 800923c:	bd70      	pop	{r4, r5, r6, pc}
 800923e:	2800      	cmp	r0, #0
 8009240:	d004      	beq.n	800924c <_fflush_r+0x20>
 8009242:	6983      	ldr	r3, [r0, #24]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d101      	bne.n	800924c <_fflush_r+0x20>
 8009248:	f000 f892 	bl	8009370 <__sinit>
 800924c:	4b14      	ldr	r3, [pc, #80]	; (80092a0 <_fflush_r+0x74>)
 800924e:	429c      	cmp	r4, r3
 8009250:	d11b      	bne.n	800928a <_fflush_r+0x5e>
 8009252:	686c      	ldr	r4, [r5, #4]
 8009254:	220c      	movs	r2, #12
 8009256:	5ea3      	ldrsh	r3, [r4, r2]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d0ed      	beq.n	8009238 <_fflush_r+0xc>
 800925c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800925e:	07d2      	lsls	r2, r2, #31
 8009260:	d404      	bmi.n	800926c <_fflush_r+0x40>
 8009262:	059b      	lsls	r3, r3, #22
 8009264:	d402      	bmi.n	800926c <_fflush_r+0x40>
 8009266:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009268:	f000 f923 	bl	80094b2 <__retarget_lock_acquire_recursive>
 800926c:	0028      	movs	r0, r5
 800926e:	0021      	movs	r1, r4
 8009270:	f7ff ff50 	bl	8009114 <__sflush_r>
 8009274:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009276:	0005      	movs	r5, r0
 8009278:	07db      	lsls	r3, r3, #31
 800927a:	d4de      	bmi.n	800923a <_fflush_r+0xe>
 800927c:	89a3      	ldrh	r3, [r4, #12]
 800927e:	059b      	lsls	r3, r3, #22
 8009280:	d4db      	bmi.n	800923a <_fflush_r+0xe>
 8009282:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009284:	f000 f916 	bl	80094b4 <__retarget_lock_release_recursive>
 8009288:	e7d7      	b.n	800923a <_fflush_r+0xe>
 800928a:	4b06      	ldr	r3, [pc, #24]	; (80092a4 <_fflush_r+0x78>)
 800928c:	429c      	cmp	r4, r3
 800928e:	d101      	bne.n	8009294 <_fflush_r+0x68>
 8009290:	68ac      	ldr	r4, [r5, #8]
 8009292:	e7df      	b.n	8009254 <_fflush_r+0x28>
 8009294:	4b04      	ldr	r3, [pc, #16]	; (80092a8 <_fflush_r+0x7c>)
 8009296:	429c      	cmp	r4, r3
 8009298:	d1dc      	bne.n	8009254 <_fflush_r+0x28>
 800929a:	68ec      	ldr	r4, [r5, #12]
 800929c:	e7da      	b.n	8009254 <_fflush_r+0x28>
 800929e:	46c0      	nop			; (mov r8, r8)
 80092a0:	0800a9f8 	.word	0x0800a9f8
 80092a4:	0800aa18 	.word	0x0800aa18
 80092a8:	0800a9d8 	.word	0x0800a9d8

080092ac <std>:
 80092ac:	2300      	movs	r3, #0
 80092ae:	b510      	push	{r4, lr}
 80092b0:	0004      	movs	r4, r0
 80092b2:	6003      	str	r3, [r0, #0]
 80092b4:	6043      	str	r3, [r0, #4]
 80092b6:	6083      	str	r3, [r0, #8]
 80092b8:	8181      	strh	r1, [r0, #12]
 80092ba:	6643      	str	r3, [r0, #100]	; 0x64
 80092bc:	0019      	movs	r1, r3
 80092be:	81c2      	strh	r2, [r0, #14]
 80092c0:	6103      	str	r3, [r0, #16]
 80092c2:	6143      	str	r3, [r0, #20]
 80092c4:	6183      	str	r3, [r0, #24]
 80092c6:	2208      	movs	r2, #8
 80092c8:	305c      	adds	r0, #92	; 0x5c
 80092ca:	f7fd fc61 	bl	8006b90 <memset>
 80092ce:	4b05      	ldr	r3, [pc, #20]	; (80092e4 <std+0x38>)
 80092d0:	6224      	str	r4, [r4, #32]
 80092d2:	6263      	str	r3, [r4, #36]	; 0x24
 80092d4:	4b04      	ldr	r3, [pc, #16]	; (80092e8 <std+0x3c>)
 80092d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80092d8:	4b04      	ldr	r3, [pc, #16]	; (80092ec <std+0x40>)
 80092da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092dc:	4b04      	ldr	r3, [pc, #16]	; (80092f0 <std+0x44>)
 80092de:	6323      	str	r3, [r4, #48]	; 0x30
 80092e0:	bd10      	pop	{r4, pc}
 80092e2:	46c0      	nop			; (mov r8, r8)
 80092e4:	08009625 	.word	0x08009625
 80092e8:	0800964d 	.word	0x0800964d
 80092ec:	08009685 	.word	0x08009685
 80092f0:	080096b1 	.word	0x080096b1

080092f4 <_cleanup_r>:
 80092f4:	b510      	push	{r4, lr}
 80092f6:	4902      	ldr	r1, [pc, #8]	; (8009300 <_cleanup_r+0xc>)
 80092f8:	f000 f8ba 	bl	8009470 <_fwalk_reent>
 80092fc:	bd10      	pop	{r4, pc}
 80092fe:	46c0      	nop			; (mov r8, r8)
 8009300:	0800922d 	.word	0x0800922d

08009304 <__sfmoreglue>:
 8009304:	b570      	push	{r4, r5, r6, lr}
 8009306:	2568      	movs	r5, #104	; 0x68
 8009308:	1e4a      	subs	r2, r1, #1
 800930a:	4355      	muls	r5, r2
 800930c:	000e      	movs	r6, r1
 800930e:	0029      	movs	r1, r5
 8009310:	3174      	adds	r1, #116	; 0x74
 8009312:	f7fe f9bb 	bl	800768c <_malloc_r>
 8009316:	1e04      	subs	r4, r0, #0
 8009318:	d008      	beq.n	800932c <__sfmoreglue+0x28>
 800931a:	2100      	movs	r1, #0
 800931c:	002a      	movs	r2, r5
 800931e:	6001      	str	r1, [r0, #0]
 8009320:	6046      	str	r6, [r0, #4]
 8009322:	300c      	adds	r0, #12
 8009324:	60a0      	str	r0, [r4, #8]
 8009326:	3268      	adds	r2, #104	; 0x68
 8009328:	f7fd fc32 	bl	8006b90 <memset>
 800932c:	0020      	movs	r0, r4
 800932e:	bd70      	pop	{r4, r5, r6, pc}

08009330 <__sfp_lock_acquire>:
 8009330:	b510      	push	{r4, lr}
 8009332:	4802      	ldr	r0, [pc, #8]	; (800933c <__sfp_lock_acquire+0xc>)
 8009334:	f000 f8bd 	bl	80094b2 <__retarget_lock_acquire_recursive>
 8009338:	bd10      	pop	{r4, pc}
 800933a:	46c0      	nop			; (mov r8, r8)
 800933c:	200002d9 	.word	0x200002d9

08009340 <__sfp_lock_release>:
 8009340:	b510      	push	{r4, lr}
 8009342:	4802      	ldr	r0, [pc, #8]	; (800934c <__sfp_lock_release+0xc>)
 8009344:	f000 f8b6 	bl	80094b4 <__retarget_lock_release_recursive>
 8009348:	bd10      	pop	{r4, pc}
 800934a:	46c0      	nop			; (mov r8, r8)
 800934c:	200002d9 	.word	0x200002d9

08009350 <__sinit_lock_acquire>:
 8009350:	b510      	push	{r4, lr}
 8009352:	4802      	ldr	r0, [pc, #8]	; (800935c <__sinit_lock_acquire+0xc>)
 8009354:	f000 f8ad 	bl	80094b2 <__retarget_lock_acquire_recursive>
 8009358:	bd10      	pop	{r4, pc}
 800935a:	46c0      	nop			; (mov r8, r8)
 800935c:	200002da 	.word	0x200002da

08009360 <__sinit_lock_release>:
 8009360:	b510      	push	{r4, lr}
 8009362:	4802      	ldr	r0, [pc, #8]	; (800936c <__sinit_lock_release+0xc>)
 8009364:	f000 f8a6 	bl	80094b4 <__retarget_lock_release_recursive>
 8009368:	bd10      	pop	{r4, pc}
 800936a:	46c0      	nop			; (mov r8, r8)
 800936c:	200002da 	.word	0x200002da

08009370 <__sinit>:
 8009370:	b513      	push	{r0, r1, r4, lr}
 8009372:	0004      	movs	r4, r0
 8009374:	f7ff ffec 	bl	8009350 <__sinit_lock_acquire>
 8009378:	69a3      	ldr	r3, [r4, #24]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d002      	beq.n	8009384 <__sinit+0x14>
 800937e:	f7ff ffef 	bl	8009360 <__sinit_lock_release>
 8009382:	bd13      	pop	{r0, r1, r4, pc}
 8009384:	64a3      	str	r3, [r4, #72]	; 0x48
 8009386:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009388:	6523      	str	r3, [r4, #80]	; 0x50
 800938a:	4b13      	ldr	r3, [pc, #76]	; (80093d8 <__sinit+0x68>)
 800938c:	4a13      	ldr	r2, [pc, #76]	; (80093dc <__sinit+0x6c>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	62a2      	str	r2, [r4, #40]	; 0x28
 8009392:	9301      	str	r3, [sp, #4]
 8009394:	42a3      	cmp	r3, r4
 8009396:	d101      	bne.n	800939c <__sinit+0x2c>
 8009398:	2301      	movs	r3, #1
 800939a:	61a3      	str	r3, [r4, #24]
 800939c:	0020      	movs	r0, r4
 800939e:	f000 f81f 	bl	80093e0 <__sfp>
 80093a2:	6060      	str	r0, [r4, #4]
 80093a4:	0020      	movs	r0, r4
 80093a6:	f000 f81b 	bl	80093e0 <__sfp>
 80093aa:	60a0      	str	r0, [r4, #8]
 80093ac:	0020      	movs	r0, r4
 80093ae:	f000 f817 	bl	80093e0 <__sfp>
 80093b2:	2200      	movs	r2, #0
 80093b4:	2104      	movs	r1, #4
 80093b6:	60e0      	str	r0, [r4, #12]
 80093b8:	6860      	ldr	r0, [r4, #4]
 80093ba:	f7ff ff77 	bl	80092ac <std>
 80093be:	2201      	movs	r2, #1
 80093c0:	2109      	movs	r1, #9
 80093c2:	68a0      	ldr	r0, [r4, #8]
 80093c4:	f7ff ff72 	bl	80092ac <std>
 80093c8:	2202      	movs	r2, #2
 80093ca:	2112      	movs	r1, #18
 80093cc:	68e0      	ldr	r0, [r4, #12]
 80093ce:	f7ff ff6d 	bl	80092ac <std>
 80093d2:	2301      	movs	r3, #1
 80093d4:	61a3      	str	r3, [r4, #24]
 80093d6:	e7d2      	b.n	800937e <__sinit+0xe>
 80093d8:	0800a778 	.word	0x0800a778
 80093dc:	080092f5 	.word	0x080092f5

080093e0 <__sfp>:
 80093e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e2:	0007      	movs	r7, r0
 80093e4:	f7ff ffa4 	bl	8009330 <__sfp_lock_acquire>
 80093e8:	4b1f      	ldr	r3, [pc, #124]	; (8009468 <__sfp+0x88>)
 80093ea:	681e      	ldr	r6, [r3, #0]
 80093ec:	69b3      	ldr	r3, [r6, #24]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d102      	bne.n	80093f8 <__sfp+0x18>
 80093f2:	0030      	movs	r0, r6
 80093f4:	f7ff ffbc 	bl	8009370 <__sinit>
 80093f8:	3648      	adds	r6, #72	; 0x48
 80093fa:	68b4      	ldr	r4, [r6, #8]
 80093fc:	6873      	ldr	r3, [r6, #4]
 80093fe:	3b01      	subs	r3, #1
 8009400:	d504      	bpl.n	800940c <__sfp+0x2c>
 8009402:	6833      	ldr	r3, [r6, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d022      	beq.n	800944e <__sfp+0x6e>
 8009408:	6836      	ldr	r6, [r6, #0]
 800940a:	e7f6      	b.n	80093fa <__sfp+0x1a>
 800940c:	220c      	movs	r2, #12
 800940e:	5ea5      	ldrsh	r5, [r4, r2]
 8009410:	2d00      	cmp	r5, #0
 8009412:	d11a      	bne.n	800944a <__sfp+0x6a>
 8009414:	0020      	movs	r0, r4
 8009416:	4b15      	ldr	r3, [pc, #84]	; (800946c <__sfp+0x8c>)
 8009418:	3058      	adds	r0, #88	; 0x58
 800941a:	60e3      	str	r3, [r4, #12]
 800941c:	6665      	str	r5, [r4, #100]	; 0x64
 800941e:	f000 f847 	bl	80094b0 <__retarget_lock_init_recursive>
 8009422:	f7ff ff8d 	bl	8009340 <__sfp_lock_release>
 8009426:	0020      	movs	r0, r4
 8009428:	2208      	movs	r2, #8
 800942a:	0029      	movs	r1, r5
 800942c:	6025      	str	r5, [r4, #0]
 800942e:	60a5      	str	r5, [r4, #8]
 8009430:	6065      	str	r5, [r4, #4]
 8009432:	6125      	str	r5, [r4, #16]
 8009434:	6165      	str	r5, [r4, #20]
 8009436:	61a5      	str	r5, [r4, #24]
 8009438:	305c      	adds	r0, #92	; 0x5c
 800943a:	f7fd fba9 	bl	8006b90 <memset>
 800943e:	6365      	str	r5, [r4, #52]	; 0x34
 8009440:	63a5      	str	r5, [r4, #56]	; 0x38
 8009442:	64a5      	str	r5, [r4, #72]	; 0x48
 8009444:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009446:	0020      	movs	r0, r4
 8009448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800944a:	3468      	adds	r4, #104	; 0x68
 800944c:	e7d7      	b.n	80093fe <__sfp+0x1e>
 800944e:	2104      	movs	r1, #4
 8009450:	0038      	movs	r0, r7
 8009452:	f7ff ff57 	bl	8009304 <__sfmoreglue>
 8009456:	1e04      	subs	r4, r0, #0
 8009458:	6030      	str	r0, [r6, #0]
 800945a:	d1d5      	bne.n	8009408 <__sfp+0x28>
 800945c:	f7ff ff70 	bl	8009340 <__sfp_lock_release>
 8009460:	230c      	movs	r3, #12
 8009462:	603b      	str	r3, [r7, #0]
 8009464:	e7ef      	b.n	8009446 <__sfp+0x66>
 8009466:	46c0      	nop			; (mov r8, r8)
 8009468:	0800a778 	.word	0x0800a778
 800946c:	ffff0001 	.word	0xffff0001

08009470 <_fwalk_reent>:
 8009470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009472:	0004      	movs	r4, r0
 8009474:	0006      	movs	r6, r0
 8009476:	2700      	movs	r7, #0
 8009478:	9101      	str	r1, [sp, #4]
 800947a:	3448      	adds	r4, #72	; 0x48
 800947c:	6863      	ldr	r3, [r4, #4]
 800947e:	68a5      	ldr	r5, [r4, #8]
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	9b00      	ldr	r3, [sp, #0]
 8009484:	3b01      	subs	r3, #1
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	d504      	bpl.n	8009494 <_fwalk_reent+0x24>
 800948a:	6824      	ldr	r4, [r4, #0]
 800948c:	2c00      	cmp	r4, #0
 800948e:	d1f5      	bne.n	800947c <_fwalk_reent+0xc>
 8009490:	0038      	movs	r0, r7
 8009492:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009494:	89ab      	ldrh	r3, [r5, #12]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d908      	bls.n	80094ac <_fwalk_reent+0x3c>
 800949a:	220e      	movs	r2, #14
 800949c:	5eab      	ldrsh	r3, [r5, r2]
 800949e:	3301      	adds	r3, #1
 80094a0:	d004      	beq.n	80094ac <_fwalk_reent+0x3c>
 80094a2:	0029      	movs	r1, r5
 80094a4:	0030      	movs	r0, r6
 80094a6:	9b01      	ldr	r3, [sp, #4]
 80094a8:	4798      	blx	r3
 80094aa:	4307      	orrs	r7, r0
 80094ac:	3568      	adds	r5, #104	; 0x68
 80094ae:	e7e8      	b.n	8009482 <_fwalk_reent+0x12>

080094b0 <__retarget_lock_init_recursive>:
 80094b0:	4770      	bx	lr

080094b2 <__retarget_lock_acquire_recursive>:
 80094b2:	4770      	bx	lr

080094b4 <__retarget_lock_release_recursive>:
 80094b4:	4770      	bx	lr
	...

080094b8 <__swhatbuf_r>:
 80094b8:	b570      	push	{r4, r5, r6, lr}
 80094ba:	000e      	movs	r6, r1
 80094bc:	001d      	movs	r5, r3
 80094be:	230e      	movs	r3, #14
 80094c0:	5ec9      	ldrsh	r1, [r1, r3]
 80094c2:	0014      	movs	r4, r2
 80094c4:	b096      	sub	sp, #88	; 0x58
 80094c6:	2900      	cmp	r1, #0
 80094c8:	da08      	bge.n	80094dc <__swhatbuf_r+0x24>
 80094ca:	220c      	movs	r2, #12
 80094cc:	5eb3      	ldrsh	r3, [r6, r2]
 80094ce:	2200      	movs	r2, #0
 80094d0:	602a      	str	r2, [r5, #0]
 80094d2:	061b      	lsls	r3, r3, #24
 80094d4:	d411      	bmi.n	80094fa <__swhatbuf_r+0x42>
 80094d6:	2380      	movs	r3, #128	; 0x80
 80094d8:	00db      	lsls	r3, r3, #3
 80094da:	e00f      	b.n	80094fc <__swhatbuf_r+0x44>
 80094dc:	466a      	mov	r2, sp
 80094de:	f000 f913 	bl	8009708 <_fstat_r>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	dbf1      	blt.n	80094ca <__swhatbuf_r+0x12>
 80094e6:	23f0      	movs	r3, #240	; 0xf0
 80094e8:	9901      	ldr	r1, [sp, #4]
 80094ea:	021b      	lsls	r3, r3, #8
 80094ec:	4019      	ands	r1, r3
 80094ee:	4b05      	ldr	r3, [pc, #20]	; (8009504 <__swhatbuf_r+0x4c>)
 80094f0:	18c9      	adds	r1, r1, r3
 80094f2:	424b      	negs	r3, r1
 80094f4:	4159      	adcs	r1, r3
 80094f6:	6029      	str	r1, [r5, #0]
 80094f8:	e7ed      	b.n	80094d6 <__swhatbuf_r+0x1e>
 80094fa:	2340      	movs	r3, #64	; 0x40
 80094fc:	2000      	movs	r0, #0
 80094fe:	6023      	str	r3, [r4, #0]
 8009500:	b016      	add	sp, #88	; 0x58
 8009502:	bd70      	pop	{r4, r5, r6, pc}
 8009504:	ffffe000 	.word	0xffffe000

08009508 <__smakebuf_r>:
 8009508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800950a:	2602      	movs	r6, #2
 800950c:	898b      	ldrh	r3, [r1, #12]
 800950e:	0005      	movs	r5, r0
 8009510:	000c      	movs	r4, r1
 8009512:	4233      	tst	r3, r6
 8009514:	d006      	beq.n	8009524 <__smakebuf_r+0x1c>
 8009516:	0023      	movs	r3, r4
 8009518:	3347      	adds	r3, #71	; 0x47
 800951a:	6023      	str	r3, [r4, #0]
 800951c:	6123      	str	r3, [r4, #16]
 800951e:	2301      	movs	r3, #1
 8009520:	6163      	str	r3, [r4, #20]
 8009522:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009524:	466a      	mov	r2, sp
 8009526:	ab01      	add	r3, sp, #4
 8009528:	f7ff ffc6 	bl	80094b8 <__swhatbuf_r>
 800952c:	9900      	ldr	r1, [sp, #0]
 800952e:	0007      	movs	r7, r0
 8009530:	0028      	movs	r0, r5
 8009532:	f7fe f8ab 	bl	800768c <_malloc_r>
 8009536:	2800      	cmp	r0, #0
 8009538:	d108      	bne.n	800954c <__smakebuf_r+0x44>
 800953a:	220c      	movs	r2, #12
 800953c:	5ea3      	ldrsh	r3, [r4, r2]
 800953e:	059a      	lsls	r2, r3, #22
 8009540:	d4ef      	bmi.n	8009522 <__smakebuf_r+0x1a>
 8009542:	2203      	movs	r2, #3
 8009544:	4393      	bics	r3, r2
 8009546:	431e      	orrs	r6, r3
 8009548:	81a6      	strh	r6, [r4, #12]
 800954a:	e7e4      	b.n	8009516 <__smakebuf_r+0xe>
 800954c:	4b0f      	ldr	r3, [pc, #60]	; (800958c <__smakebuf_r+0x84>)
 800954e:	62ab      	str	r3, [r5, #40]	; 0x28
 8009550:	2380      	movs	r3, #128	; 0x80
 8009552:	89a2      	ldrh	r2, [r4, #12]
 8009554:	6020      	str	r0, [r4, #0]
 8009556:	4313      	orrs	r3, r2
 8009558:	81a3      	strh	r3, [r4, #12]
 800955a:	9b00      	ldr	r3, [sp, #0]
 800955c:	6120      	str	r0, [r4, #16]
 800955e:	6163      	str	r3, [r4, #20]
 8009560:	9b01      	ldr	r3, [sp, #4]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00d      	beq.n	8009582 <__smakebuf_r+0x7a>
 8009566:	0028      	movs	r0, r5
 8009568:	230e      	movs	r3, #14
 800956a:	5ee1      	ldrsh	r1, [r4, r3]
 800956c:	f000 f8de 	bl	800972c <_isatty_r>
 8009570:	2800      	cmp	r0, #0
 8009572:	d006      	beq.n	8009582 <__smakebuf_r+0x7a>
 8009574:	2203      	movs	r2, #3
 8009576:	89a3      	ldrh	r3, [r4, #12]
 8009578:	4393      	bics	r3, r2
 800957a:	001a      	movs	r2, r3
 800957c:	2301      	movs	r3, #1
 800957e:	4313      	orrs	r3, r2
 8009580:	81a3      	strh	r3, [r4, #12]
 8009582:	89a0      	ldrh	r0, [r4, #12]
 8009584:	4307      	orrs	r7, r0
 8009586:	81a7      	strh	r7, [r4, #12]
 8009588:	e7cb      	b.n	8009522 <__smakebuf_r+0x1a>
 800958a:	46c0      	nop			; (mov r8, r8)
 800958c:	080092f5 	.word	0x080092f5

08009590 <_raise_r>:
 8009590:	b570      	push	{r4, r5, r6, lr}
 8009592:	0004      	movs	r4, r0
 8009594:	000d      	movs	r5, r1
 8009596:	291f      	cmp	r1, #31
 8009598:	d904      	bls.n	80095a4 <_raise_r+0x14>
 800959a:	2316      	movs	r3, #22
 800959c:	6003      	str	r3, [r0, #0]
 800959e:	2001      	movs	r0, #1
 80095a0:	4240      	negs	r0, r0
 80095a2:	bd70      	pop	{r4, r5, r6, pc}
 80095a4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d004      	beq.n	80095b4 <_raise_r+0x24>
 80095aa:	008a      	lsls	r2, r1, #2
 80095ac:	189b      	adds	r3, r3, r2
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	2a00      	cmp	r2, #0
 80095b2:	d108      	bne.n	80095c6 <_raise_r+0x36>
 80095b4:	0020      	movs	r0, r4
 80095b6:	f000 f831 	bl	800961c <_getpid_r>
 80095ba:	002a      	movs	r2, r5
 80095bc:	0001      	movs	r1, r0
 80095be:	0020      	movs	r0, r4
 80095c0:	f000 f81a 	bl	80095f8 <_kill_r>
 80095c4:	e7ed      	b.n	80095a2 <_raise_r+0x12>
 80095c6:	2000      	movs	r0, #0
 80095c8:	2a01      	cmp	r2, #1
 80095ca:	d0ea      	beq.n	80095a2 <_raise_r+0x12>
 80095cc:	1c51      	adds	r1, r2, #1
 80095ce:	d103      	bne.n	80095d8 <_raise_r+0x48>
 80095d0:	2316      	movs	r3, #22
 80095d2:	3001      	adds	r0, #1
 80095d4:	6023      	str	r3, [r4, #0]
 80095d6:	e7e4      	b.n	80095a2 <_raise_r+0x12>
 80095d8:	2400      	movs	r4, #0
 80095da:	0028      	movs	r0, r5
 80095dc:	601c      	str	r4, [r3, #0]
 80095de:	4790      	blx	r2
 80095e0:	0020      	movs	r0, r4
 80095e2:	e7de      	b.n	80095a2 <_raise_r+0x12>

080095e4 <raise>:
 80095e4:	b510      	push	{r4, lr}
 80095e6:	4b03      	ldr	r3, [pc, #12]	; (80095f4 <raise+0x10>)
 80095e8:	0001      	movs	r1, r0
 80095ea:	6818      	ldr	r0, [r3, #0]
 80095ec:	f7ff ffd0 	bl	8009590 <_raise_r>
 80095f0:	bd10      	pop	{r4, pc}
 80095f2:	46c0      	nop			; (mov r8, r8)
 80095f4:	20000010 	.word	0x20000010

080095f8 <_kill_r>:
 80095f8:	2300      	movs	r3, #0
 80095fa:	b570      	push	{r4, r5, r6, lr}
 80095fc:	4d06      	ldr	r5, [pc, #24]	; (8009618 <_kill_r+0x20>)
 80095fe:	0004      	movs	r4, r0
 8009600:	0008      	movs	r0, r1
 8009602:	0011      	movs	r1, r2
 8009604:	602b      	str	r3, [r5, #0]
 8009606:	f7f9 fd79 	bl	80030fc <_kill>
 800960a:	1c43      	adds	r3, r0, #1
 800960c:	d103      	bne.n	8009616 <_kill_r+0x1e>
 800960e:	682b      	ldr	r3, [r5, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d000      	beq.n	8009616 <_kill_r+0x1e>
 8009614:	6023      	str	r3, [r4, #0]
 8009616:	bd70      	pop	{r4, r5, r6, pc}
 8009618:	200002d4 	.word	0x200002d4

0800961c <_getpid_r>:
 800961c:	b510      	push	{r4, lr}
 800961e:	f7f9 fd67 	bl	80030f0 <_getpid>
 8009622:	bd10      	pop	{r4, pc}

08009624 <__sread>:
 8009624:	b570      	push	{r4, r5, r6, lr}
 8009626:	000c      	movs	r4, r1
 8009628:	250e      	movs	r5, #14
 800962a:	5f49      	ldrsh	r1, [r1, r5]
 800962c:	f000 f8a4 	bl	8009778 <_read_r>
 8009630:	2800      	cmp	r0, #0
 8009632:	db03      	blt.n	800963c <__sread+0x18>
 8009634:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009636:	181b      	adds	r3, r3, r0
 8009638:	6563      	str	r3, [r4, #84]	; 0x54
 800963a:	bd70      	pop	{r4, r5, r6, pc}
 800963c:	89a3      	ldrh	r3, [r4, #12]
 800963e:	4a02      	ldr	r2, [pc, #8]	; (8009648 <__sread+0x24>)
 8009640:	4013      	ands	r3, r2
 8009642:	81a3      	strh	r3, [r4, #12]
 8009644:	e7f9      	b.n	800963a <__sread+0x16>
 8009646:	46c0      	nop			; (mov r8, r8)
 8009648:	ffffefff 	.word	0xffffefff

0800964c <__swrite>:
 800964c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800964e:	001f      	movs	r7, r3
 8009650:	898b      	ldrh	r3, [r1, #12]
 8009652:	0005      	movs	r5, r0
 8009654:	000c      	movs	r4, r1
 8009656:	0016      	movs	r6, r2
 8009658:	05db      	lsls	r3, r3, #23
 800965a:	d505      	bpl.n	8009668 <__swrite+0x1c>
 800965c:	230e      	movs	r3, #14
 800965e:	5ec9      	ldrsh	r1, [r1, r3]
 8009660:	2200      	movs	r2, #0
 8009662:	2302      	movs	r3, #2
 8009664:	f000 f874 	bl	8009750 <_lseek_r>
 8009668:	89a3      	ldrh	r3, [r4, #12]
 800966a:	4a05      	ldr	r2, [pc, #20]	; (8009680 <__swrite+0x34>)
 800966c:	0028      	movs	r0, r5
 800966e:	4013      	ands	r3, r2
 8009670:	81a3      	strh	r3, [r4, #12]
 8009672:	0032      	movs	r2, r6
 8009674:	230e      	movs	r3, #14
 8009676:	5ee1      	ldrsh	r1, [r4, r3]
 8009678:	003b      	movs	r3, r7
 800967a:	f000 f81f 	bl	80096bc <_write_r>
 800967e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009680:	ffffefff 	.word	0xffffefff

08009684 <__sseek>:
 8009684:	b570      	push	{r4, r5, r6, lr}
 8009686:	000c      	movs	r4, r1
 8009688:	250e      	movs	r5, #14
 800968a:	5f49      	ldrsh	r1, [r1, r5]
 800968c:	f000 f860 	bl	8009750 <_lseek_r>
 8009690:	89a3      	ldrh	r3, [r4, #12]
 8009692:	1c42      	adds	r2, r0, #1
 8009694:	d103      	bne.n	800969e <__sseek+0x1a>
 8009696:	4a05      	ldr	r2, [pc, #20]	; (80096ac <__sseek+0x28>)
 8009698:	4013      	ands	r3, r2
 800969a:	81a3      	strh	r3, [r4, #12]
 800969c:	bd70      	pop	{r4, r5, r6, pc}
 800969e:	2280      	movs	r2, #128	; 0x80
 80096a0:	0152      	lsls	r2, r2, #5
 80096a2:	4313      	orrs	r3, r2
 80096a4:	81a3      	strh	r3, [r4, #12]
 80096a6:	6560      	str	r0, [r4, #84]	; 0x54
 80096a8:	e7f8      	b.n	800969c <__sseek+0x18>
 80096aa:	46c0      	nop			; (mov r8, r8)
 80096ac:	ffffefff 	.word	0xffffefff

080096b0 <__sclose>:
 80096b0:	b510      	push	{r4, lr}
 80096b2:	230e      	movs	r3, #14
 80096b4:	5ec9      	ldrsh	r1, [r1, r3]
 80096b6:	f000 f815 	bl	80096e4 <_close_r>
 80096ba:	bd10      	pop	{r4, pc}

080096bc <_write_r>:
 80096bc:	b570      	push	{r4, r5, r6, lr}
 80096be:	0004      	movs	r4, r0
 80096c0:	0008      	movs	r0, r1
 80096c2:	0011      	movs	r1, r2
 80096c4:	001a      	movs	r2, r3
 80096c6:	2300      	movs	r3, #0
 80096c8:	4d05      	ldr	r5, [pc, #20]	; (80096e0 <_write_r+0x24>)
 80096ca:	602b      	str	r3, [r5, #0]
 80096cc:	f7f9 fd4f 	bl	800316e <_write>
 80096d0:	1c43      	adds	r3, r0, #1
 80096d2:	d103      	bne.n	80096dc <_write_r+0x20>
 80096d4:	682b      	ldr	r3, [r5, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d000      	beq.n	80096dc <_write_r+0x20>
 80096da:	6023      	str	r3, [r4, #0]
 80096dc:	bd70      	pop	{r4, r5, r6, pc}
 80096de:	46c0      	nop			; (mov r8, r8)
 80096e0:	200002d4 	.word	0x200002d4

080096e4 <_close_r>:
 80096e4:	2300      	movs	r3, #0
 80096e6:	b570      	push	{r4, r5, r6, lr}
 80096e8:	4d06      	ldr	r5, [pc, #24]	; (8009704 <_close_r+0x20>)
 80096ea:	0004      	movs	r4, r0
 80096ec:	0008      	movs	r0, r1
 80096ee:	602b      	str	r3, [r5, #0]
 80096f0:	f7f9 fd59 	bl	80031a6 <_close>
 80096f4:	1c43      	adds	r3, r0, #1
 80096f6:	d103      	bne.n	8009700 <_close_r+0x1c>
 80096f8:	682b      	ldr	r3, [r5, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d000      	beq.n	8009700 <_close_r+0x1c>
 80096fe:	6023      	str	r3, [r4, #0]
 8009700:	bd70      	pop	{r4, r5, r6, pc}
 8009702:	46c0      	nop			; (mov r8, r8)
 8009704:	200002d4 	.word	0x200002d4

08009708 <_fstat_r>:
 8009708:	2300      	movs	r3, #0
 800970a:	b570      	push	{r4, r5, r6, lr}
 800970c:	4d06      	ldr	r5, [pc, #24]	; (8009728 <_fstat_r+0x20>)
 800970e:	0004      	movs	r4, r0
 8009710:	0008      	movs	r0, r1
 8009712:	0011      	movs	r1, r2
 8009714:	602b      	str	r3, [r5, #0]
 8009716:	f7f9 fd50 	bl	80031ba <_fstat>
 800971a:	1c43      	adds	r3, r0, #1
 800971c:	d103      	bne.n	8009726 <_fstat_r+0x1e>
 800971e:	682b      	ldr	r3, [r5, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d000      	beq.n	8009726 <_fstat_r+0x1e>
 8009724:	6023      	str	r3, [r4, #0]
 8009726:	bd70      	pop	{r4, r5, r6, pc}
 8009728:	200002d4 	.word	0x200002d4

0800972c <_isatty_r>:
 800972c:	2300      	movs	r3, #0
 800972e:	b570      	push	{r4, r5, r6, lr}
 8009730:	4d06      	ldr	r5, [pc, #24]	; (800974c <_isatty_r+0x20>)
 8009732:	0004      	movs	r4, r0
 8009734:	0008      	movs	r0, r1
 8009736:	602b      	str	r3, [r5, #0]
 8009738:	f7f9 fd4d 	bl	80031d6 <_isatty>
 800973c:	1c43      	adds	r3, r0, #1
 800973e:	d103      	bne.n	8009748 <_isatty_r+0x1c>
 8009740:	682b      	ldr	r3, [r5, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d000      	beq.n	8009748 <_isatty_r+0x1c>
 8009746:	6023      	str	r3, [r4, #0]
 8009748:	bd70      	pop	{r4, r5, r6, pc}
 800974a:	46c0      	nop			; (mov r8, r8)
 800974c:	200002d4 	.word	0x200002d4

08009750 <_lseek_r>:
 8009750:	b570      	push	{r4, r5, r6, lr}
 8009752:	0004      	movs	r4, r0
 8009754:	0008      	movs	r0, r1
 8009756:	0011      	movs	r1, r2
 8009758:	001a      	movs	r2, r3
 800975a:	2300      	movs	r3, #0
 800975c:	4d05      	ldr	r5, [pc, #20]	; (8009774 <_lseek_r+0x24>)
 800975e:	602b      	str	r3, [r5, #0]
 8009760:	f7f9 fd42 	bl	80031e8 <_lseek>
 8009764:	1c43      	adds	r3, r0, #1
 8009766:	d103      	bne.n	8009770 <_lseek_r+0x20>
 8009768:	682b      	ldr	r3, [r5, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d000      	beq.n	8009770 <_lseek_r+0x20>
 800976e:	6023      	str	r3, [r4, #0]
 8009770:	bd70      	pop	{r4, r5, r6, pc}
 8009772:	46c0      	nop			; (mov r8, r8)
 8009774:	200002d4 	.word	0x200002d4

08009778 <_read_r>:
 8009778:	b570      	push	{r4, r5, r6, lr}
 800977a:	0004      	movs	r4, r0
 800977c:	0008      	movs	r0, r1
 800977e:	0011      	movs	r1, r2
 8009780:	001a      	movs	r2, r3
 8009782:	2300      	movs	r3, #0
 8009784:	4d05      	ldr	r5, [pc, #20]	; (800979c <_read_r+0x24>)
 8009786:	602b      	str	r3, [r5, #0]
 8009788:	f7f9 fcd4 	bl	8003134 <_read>
 800978c:	1c43      	adds	r3, r0, #1
 800978e:	d103      	bne.n	8009798 <_read_r+0x20>
 8009790:	682b      	ldr	r3, [r5, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d000      	beq.n	8009798 <_read_r+0x20>
 8009796:	6023      	str	r3, [r4, #0]
 8009798:	bd70      	pop	{r4, r5, r6, pc}
 800979a:	46c0      	nop			; (mov r8, r8)
 800979c:	200002d4 	.word	0x200002d4

080097a0 <pow>:
 80097a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097a2:	0014      	movs	r4, r2
 80097a4:	001d      	movs	r5, r3
 80097a6:	9000      	str	r0, [sp, #0]
 80097a8:	9101      	str	r1, [sp, #4]
 80097aa:	f000 f867 	bl	800987c <__ieee754_pow>
 80097ae:	0022      	movs	r2, r4
 80097b0:	0006      	movs	r6, r0
 80097b2:	000f      	movs	r7, r1
 80097b4:	002b      	movs	r3, r5
 80097b6:	0020      	movs	r0, r4
 80097b8:	0029      	movs	r1, r5
 80097ba:	f7f8 fd21 	bl	8002200 <__aeabi_dcmpun>
 80097be:	2800      	cmp	r0, #0
 80097c0:	d13f      	bne.n	8009842 <pow+0xa2>
 80097c2:	9800      	ldr	r0, [sp, #0]
 80097c4:	9901      	ldr	r1, [sp, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	2300      	movs	r3, #0
 80097ca:	f7f6 fe37 	bl	800043c <__aeabi_dcmpeq>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	d019      	beq.n	8009806 <pow+0x66>
 80097d2:	2200      	movs	r2, #0
 80097d4:	2300      	movs	r3, #0
 80097d6:	0020      	movs	r0, r4
 80097d8:	0029      	movs	r1, r5
 80097da:	f7f6 fe2f 	bl	800043c <__aeabi_dcmpeq>
 80097de:	2800      	cmp	r0, #0
 80097e0:	d146      	bne.n	8009870 <pow+0xd0>
 80097e2:	0020      	movs	r0, r4
 80097e4:	0029      	movs	r1, r5
 80097e6:	f000 fe3d 	bl	800a464 <finite>
 80097ea:	2800      	cmp	r0, #0
 80097ec:	d029      	beq.n	8009842 <pow+0xa2>
 80097ee:	2200      	movs	r2, #0
 80097f0:	2300      	movs	r3, #0
 80097f2:	0020      	movs	r0, r4
 80097f4:	0029      	movs	r1, r5
 80097f6:	f7f6 fe27 	bl	8000448 <__aeabi_dcmplt>
 80097fa:	2800      	cmp	r0, #0
 80097fc:	d021      	beq.n	8009842 <pow+0xa2>
 80097fe:	f7fd f99d 	bl	8006b3c <__errno>
 8009802:	2322      	movs	r3, #34	; 0x22
 8009804:	e01c      	b.n	8009840 <pow+0xa0>
 8009806:	0030      	movs	r0, r6
 8009808:	0039      	movs	r1, r7
 800980a:	f000 fe2b 	bl	800a464 <finite>
 800980e:	2800      	cmp	r0, #0
 8009810:	d11b      	bne.n	800984a <pow+0xaa>
 8009812:	9800      	ldr	r0, [sp, #0]
 8009814:	9901      	ldr	r1, [sp, #4]
 8009816:	f000 fe25 	bl	800a464 <finite>
 800981a:	2800      	cmp	r0, #0
 800981c:	d015      	beq.n	800984a <pow+0xaa>
 800981e:	0020      	movs	r0, r4
 8009820:	0029      	movs	r1, r5
 8009822:	f000 fe1f 	bl	800a464 <finite>
 8009826:	2800      	cmp	r0, #0
 8009828:	d00f      	beq.n	800984a <pow+0xaa>
 800982a:	0032      	movs	r2, r6
 800982c:	003b      	movs	r3, r7
 800982e:	0030      	movs	r0, r6
 8009830:	0039      	movs	r1, r7
 8009832:	f7f8 fce5 	bl	8002200 <__aeabi_dcmpun>
 8009836:	2800      	cmp	r0, #0
 8009838:	d0e1      	beq.n	80097fe <pow+0x5e>
 800983a:	f7fd f97f 	bl	8006b3c <__errno>
 800983e:	2321      	movs	r3, #33	; 0x21
 8009840:	6003      	str	r3, [r0, #0]
 8009842:	0030      	movs	r0, r6
 8009844:	0039      	movs	r1, r7
 8009846:	b003      	add	sp, #12
 8009848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800984a:	2200      	movs	r2, #0
 800984c:	2300      	movs	r3, #0
 800984e:	0030      	movs	r0, r6
 8009850:	0039      	movs	r1, r7
 8009852:	f7f6 fdf3 	bl	800043c <__aeabi_dcmpeq>
 8009856:	2800      	cmp	r0, #0
 8009858:	d0f3      	beq.n	8009842 <pow+0xa2>
 800985a:	9800      	ldr	r0, [sp, #0]
 800985c:	9901      	ldr	r1, [sp, #4]
 800985e:	f000 fe01 	bl	800a464 <finite>
 8009862:	2800      	cmp	r0, #0
 8009864:	d0ed      	beq.n	8009842 <pow+0xa2>
 8009866:	0020      	movs	r0, r4
 8009868:	0029      	movs	r1, r5
 800986a:	f000 fdfb 	bl	800a464 <finite>
 800986e:	e7c4      	b.n	80097fa <pow+0x5a>
 8009870:	2600      	movs	r6, #0
 8009872:	4f01      	ldr	r7, [pc, #4]	; (8009878 <pow+0xd8>)
 8009874:	e7e5      	b.n	8009842 <pow+0xa2>
 8009876:	46c0      	nop			; (mov r8, r8)
 8009878:	3ff00000 	.word	0x3ff00000

0800987c <__ieee754_pow>:
 800987c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800987e:	b095      	sub	sp, #84	; 0x54
 8009880:	9202      	str	r2, [sp, #8]
 8009882:	9303      	str	r3, [sp, #12]
 8009884:	9b03      	ldr	r3, [sp, #12]
 8009886:	9a03      	ldr	r2, [sp, #12]
 8009888:	9304      	str	r3, [sp, #16]
 800988a:	9b02      	ldr	r3, [sp, #8]
 800988c:	0056      	lsls	r6, r2, #1
 800988e:	001a      	movs	r2, r3
 8009890:	0876      	lsrs	r6, r6, #1
 8009892:	0007      	movs	r7, r0
 8009894:	000d      	movs	r5, r1
 8009896:	4332      	orrs	r2, r6
 8009898:	d119      	bne.n	80098ce <__ieee754_pow+0x52>
 800989a:	2180      	movs	r1, #128	; 0x80
 800989c:	0309      	lsls	r1, r1, #12
 800989e:	4069      	eors	r1, r5
 80098a0:	0002      	movs	r2, r0
 80098a2:	000b      	movs	r3, r1
 80098a4:	1892      	adds	r2, r2, r2
 80098a6:	415b      	adcs	r3, r3
 80098a8:	4989      	ldr	r1, [pc, #548]	; (8009ad0 <__ieee754_pow+0x254>)
 80098aa:	428b      	cmp	r3, r1
 80098ac:	d806      	bhi.n	80098bc <__ieee754_pow+0x40>
 80098ae:	d001      	beq.n	80098b4 <__ieee754_pow+0x38>
 80098b0:	f000 fcb6 	bl	800a220 <__ieee754_pow+0x9a4>
 80098b4:	2a00      	cmp	r2, #0
 80098b6:	d101      	bne.n	80098bc <__ieee754_pow+0x40>
 80098b8:	f000 fcb2 	bl	800a220 <__ieee754_pow+0x9a4>
 80098bc:	9a02      	ldr	r2, [sp, #8]
 80098be:	9b03      	ldr	r3, [sp, #12]
 80098c0:	0038      	movs	r0, r7
 80098c2:	0029      	movs	r1, r5
 80098c4:	f7f6 ff60 	bl	8000788 <__aeabi_dadd>
 80098c8:	9000      	str	r0, [sp, #0]
 80098ca:	9101      	str	r1, [sp, #4]
 80098cc:	e0ad      	b.n	8009a2a <__ieee754_pow+0x1ae>
 80098ce:	4a81      	ldr	r2, [pc, #516]	; (8009ad4 <__ieee754_pow+0x258>)
 80098d0:	004c      	lsls	r4, r1, #1
 80098d2:	9108      	str	r1, [sp, #32]
 80098d4:	9000      	str	r0, [sp, #0]
 80098d6:	0864      	lsrs	r4, r4, #1
 80098d8:	4294      	cmp	r4, r2
 80098da:	dc08      	bgt.n	80098ee <__ieee754_pow+0x72>
 80098dc:	d101      	bne.n	80098e2 <__ieee754_pow+0x66>
 80098de:	2800      	cmp	r0, #0
 80098e0:	d1ec      	bne.n	80098bc <__ieee754_pow+0x40>
 80098e2:	4a7c      	ldr	r2, [pc, #496]	; (8009ad4 <__ieee754_pow+0x258>)
 80098e4:	4296      	cmp	r6, r2
 80098e6:	dc02      	bgt.n	80098ee <__ieee754_pow+0x72>
 80098e8:	d10c      	bne.n	8009904 <__ieee754_pow+0x88>
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d00a      	beq.n	8009904 <__ieee754_pow+0x88>
 80098ee:	4b7a      	ldr	r3, [pc, #488]	; (8009ad8 <__ieee754_pow+0x25c>)
 80098f0:	18eb      	adds	r3, r5, r3
 80098f2:	433b      	orrs	r3, r7
 80098f4:	d1e2      	bne.n	80098bc <__ieee754_pow+0x40>
 80098f6:	2180      	movs	r1, #128	; 0x80
 80098f8:	9803      	ldr	r0, [sp, #12]
 80098fa:	0309      	lsls	r1, r1, #12
 80098fc:	4048      	eors	r0, r1
 80098fe:	0003      	movs	r3, r0
 8009900:	9a02      	ldr	r2, [sp, #8]
 8009902:	e7cf      	b.n	80098a4 <__ieee754_pow+0x28>
 8009904:	2200      	movs	r2, #0
 8009906:	9206      	str	r2, [sp, #24]
 8009908:	2d00      	cmp	r5, #0
 800990a:	da69      	bge.n	80099e0 <__ieee754_pow+0x164>
 800990c:	4a73      	ldr	r2, [pc, #460]	; (8009adc <__ieee754_pow+0x260>)
 800990e:	4296      	cmp	r6, r2
 8009910:	dc64      	bgt.n	80099dc <__ieee754_pow+0x160>
 8009912:	4a73      	ldr	r2, [pc, #460]	; (8009ae0 <__ieee754_pow+0x264>)
 8009914:	4296      	cmp	r6, r2
 8009916:	dd11      	ble.n	800993c <__ieee754_pow+0xc0>
 8009918:	4972      	ldr	r1, [pc, #456]	; (8009ae4 <__ieee754_pow+0x268>)
 800991a:	1532      	asrs	r2, r6, #20
 800991c:	1852      	adds	r2, r2, r1
 800991e:	2a14      	cmp	r2, #20
 8009920:	dd3c      	ble.n	800999c <__ieee754_pow+0x120>
 8009922:	2134      	movs	r1, #52	; 0x34
 8009924:	1a8a      	subs	r2, r1, r2
 8009926:	9902      	ldr	r1, [sp, #8]
 8009928:	40d1      	lsrs	r1, r2
 800992a:	0008      	movs	r0, r1
 800992c:	4090      	lsls	r0, r2
 800992e:	4298      	cmp	r0, r3
 8009930:	d104      	bne.n	800993c <__ieee754_pow+0xc0>
 8009932:	2201      	movs	r2, #1
 8009934:	4011      	ands	r1, r2
 8009936:	1892      	adds	r2, r2, r2
 8009938:	1a52      	subs	r2, r2, r1
 800993a:	9206      	str	r2, [sp, #24]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d03c      	beq.n	80099ba <__ieee754_pow+0x13e>
 8009940:	0038      	movs	r0, r7
 8009942:	0029      	movs	r1, r5
 8009944:	f000 fd8b 	bl	800a45e <fabs>
 8009948:	9000      	str	r0, [sp, #0]
 800994a:	9101      	str	r1, [sp, #4]
 800994c:	2f00      	cmp	r7, #0
 800994e:	d000      	beq.n	8009952 <__ieee754_pow+0xd6>
 8009950:	e094      	b.n	8009a7c <__ieee754_pow+0x200>
 8009952:	2c00      	cmp	r4, #0
 8009954:	d005      	beq.n	8009962 <__ieee754_pow+0xe6>
 8009956:	4a64      	ldr	r2, [pc, #400]	; (8009ae8 <__ieee754_pow+0x26c>)
 8009958:	00ab      	lsls	r3, r5, #2
 800995a:	089b      	lsrs	r3, r3, #2
 800995c:	4293      	cmp	r3, r2
 800995e:	d000      	beq.n	8009962 <__ieee754_pow+0xe6>
 8009960:	e08c      	b.n	8009a7c <__ieee754_pow+0x200>
 8009962:	9b04      	ldr	r3, [sp, #16]
 8009964:	2b00      	cmp	r3, #0
 8009966:	da07      	bge.n	8009978 <__ieee754_pow+0xfc>
 8009968:	9a00      	ldr	r2, [sp, #0]
 800996a:	9b01      	ldr	r3, [sp, #4]
 800996c:	2000      	movs	r0, #0
 800996e:	495e      	ldr	r1, [pc, #376]	; (8009ae8 <__ieee754_pow+0x26c>)
 8009970:	f7f7 fa46 	bl	8000e00 <__aeabi_ddiv>
 8009974:	9000      	str	r0, [sp, #0]
 8009976:	9101      	str	r1, [sp, #4]
 8009978:	9b08      	ldr	r3, [sp, #32]
 800997a:	2b00      	cmp	r3, #0
 800997c:	da55      	bge.n	8009a2a <__ieee754_pow+0x1ae>
 800997e:	4b56      	ldr	r3, [pc, #344]	; (8009ad8 <__ieee754_pow+0x25c>)
 8009980:	18e4      	adds	r4, r4, r3
 8009982:	9b06      	ldr	r3, [sp, #24]
 8009984:	431c      	orrs	r4, r3
 8009986:	d000      	beq.n	800998a <__ieee754_pow+0x10e>
 8009988:	e06c      	b.n	8009a64 <__ieee754_pow+0x1e8>
 800998a:	9a00      	ldr	r2, [sp, #0]
 800998c:	9b01      	ldr	r3, [sp, #4]
 800998e:	0010      	movs	r0, r2
 8009990:	0019      	movs	r1, r3
 8009992:	f7f8 f8a3 	bl	8001adc <__aeabi_dsub>
 8009996:	0002      	movs	r2, r0
 8009998:	000b      	movs	r3, r1
 800999a:	e01c      	b.n	80099d6 <__ieee754_pow+0x15a>
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1cf      	bne.n	8009940 <__ieee754_pow+0xc4>
 80099a0:	3314      	adds	r3, #20
 80099a2:	1a9a      	subs	r2, r3, r2
 80099a4:	0033      	movs	r3, r6
 80099a6:	4113      	asrs	r3, r2
 80099a8:	0019      	movs	r1, r3
 80099aa:	4091      	lsls	r1, r2
 80099ac:	42b1      	cmp	r1, r6
 80099ae:	d104      	bne.n	80099ba <__ieee754_pow+0x13e>
 80099b0:	2201      	movs	r2, #1
 80099b2:	4013      	ands	r3, r2
 80099b4:	1892      	adds	r2, r2, r2
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	9306      	str	r3, [sp, #24]
 80099ba:	4b4b      	ldr	r3, [pc, #300]	; (8009ae8 <__ieee754_pow+0x26c>)
 80099bc:	429e      	cmp	r6, r3
 80099be:	d138      	bne.n	8009a32 <__ieee754_pow+0x1b6>
 80099c0:	0038      	movs	r0, r7
 80099c2:	0029      	movs	r1, r5
 80099c4:	9b04      	ldr	r3, [sp, #16]
 80099c6:	9000      	str	r0, [sp, #0]
 80099c8:	9101      	str	r1, [sp, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	da2d      	bge.n	8009a2a <__ieee754_pow+0x1ae>
 80099ce:	003a      	movs	r2, r7
 80099d0:	002b      	movs	r3, r5
 80099d2:	2000      	movs	r0, #0
 80099d4:	4944      	ldr	r1, [pc, #272]	; (8009ae8 <__ieee754_pow+0x26c>)
 80099d6:	f7f7 fa13 	bl	8000e00 <__aeabi_ddiv>
 80099da:	e775      	b.n	80098c8 <__ieee754_pow+0x4c>
 80099dc:	2202      	movs	r2, #2
 80099de:	9206      	str	r2, [sp, #24]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d1ad      	bne.n	8009940 <__ieee754_pow+0xc4>
 80099e4:	4b3b      	ldr	r3, [pc, #236]	; (8009ad4 <__ieee754_pow+0x258>)
 80099e6:	429e      	cmp	r6, r3
 80099e8:	d1e7      	bne.n	80099ba <__ieee754_pow+0x13e>
 80099ea:	4b3b      	ldr	r3, [pc, #236]	; (8009ad8 <__ieee754_pow+0x25c>)
 80099ec:	18e3      	adds	r3, r4, r3
 80099ee:	431f      	orrs	r7, r3
 80099f0:	d101      	bne.n	80099f6 <__ieee754_pow+0x17a>
 80099f2:	f000 fc15 	bl	800a220 <__ieee754_pow+0x9a4>
 80099f6:	4b3a      	ldr	r3, [pc, #232]	; (8009ae0 <__ieee754_pow+0x264>)
 80099f8:	429c      	cmp	r4, r3
 80099fa:	dd09      	ble.n	8009a10 <__ieee754_pow+0x194>
 80099fc:	9b04      	ldr	r3, [sp, #16]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	da01      	bge.n	8009a06 <__ieee754_pow+0x18a>
 8009a02:	f000 fc11 	bl	800a228 <__ieee754_pow+0x9ac>
 8009a06:	9b02      	ldr	r3, [sp, #8]
 8009a08:	9c03      	ldr	r4, [sp, #12]
 8009a0a:	9300      	str	r3, [sp, #0]
 8009a0c:	9401      	str	r4, [sp, #4]
 8009a0e:	e00c      	b.n	8009a2a <__ieee754_pow+0x1ae>
 8009a10:	9b04      	ldr	r3, [sp, #16]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	db01      	blt.n	8009a1a <__ieee754_pow+0x19e>
 8009a16:	f000 fc07 	bl	800a228 <__ieee754_pow+0x9ac>
 8009a1a:	2280      	movs	r2, #128	; 0x80
 8009a1c:	0612      	lsls	r2, r2, #24
 8009a1e:	4694      	mov	ip, r2
 8009a20:	9b02      	ldr	r3, [sp, #8]
 8009a22:	9300      	str	r3, [sp, #0]
 8009a24:	9b03      	ldr	r3, [sp, #12]
 8009a26:	4463      	add	r3, ip
 8009a28:	9301      	str	r3, [sp, #4]
 8009a2a:	9800      	ldr	r0, [sp, #0]
 8009a2c:	9901      	ldr	r1, [sp, #4]
 8009a2e:	b015      	add	sp, #84	; 0x54
 8009a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a32:	2380      	movs	r3, #128	; 0x80
 8009a34:	9a04      	ldr	r2, [sp, #16]
 8009a36:	05db      	lsls	r3, r3, #23
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d106      	bne.n	8009a4a <__ieee754_pow+0x1ce>
 8009a3c:	003a      	movs	r2, r7
 8009a3e:	002b      	movs	r3, r5
 8009a40:	0038      	movs	r0, r7
 8009a42:	0029      	movs	r1, r5
 8009a44:	f7f7 fdde 	bl	8001604 <__aeabi_dmul>
 8009a48:	e73e      	b.n	80098c8 <__ieee754_pow+0x4c>
 8009a4a:	4b28      	ldr	r3, [pc, #160]	; (8009aec <__ieee754_pow+0x270>)
 8009a4c:	9a04      	ldr	r2, [sp, #16]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d000      	beq.n	8009a54 <__ieee754_pow+0x1d8>
 8009a52:	e775      	b.n	8009940 <__ieee754_pow+0xc4>
 8009a54:	2d00      	cmp	r5, #0
 8009a56:	da00      	bge.n	8009a5a <__ieee754_pow+0x1de>
 8009a58:	e772      	b.n	8009940 <__ieee754_pow+0xc4>
 8009a5a:	0038      	movs	r0, r7
 8009a5c:	0029      	movs	r1, r5
 8009a5e:	f000 fc17 	bl	800a290 <__ieee754_sqrt>
 8009a62:	e731      	b.n	80098c8 <__ieee754_pow+0x4c>
 8009a64:	9b06      	ldr	r3, [sp, #24]
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d1df      	bne.n	8009a2a <__ieee754_pow+0x1ae>
 8009a6a:	9800      	ldr	r0, [sp, #0]
 8009a6c:	2180      	movs	r1, #128	; 0x80
 8009a6e:	0002      	movs	r2, r0
 8009a70:	9801      	ldr	r0, [sp, #4]
 8009a72:	0609      	lsls	r1, r1, #24
 8009a74:	1843      	adds	r3, r0, r1
 8009a76:	9200      	str	r2, [sp, #0]
 8009a78:	9301      	str	r3, [sp, #4]
 8009a7a:	e7d6      	b.n	8009a2a <__ieee754_pow+0x1ae>
 8009a7c:	0feb      	lsrs	r3, r5, #31
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	930e      	str	r3, [sp, #56]	; 0x38
 8009a82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a84:	9b06      	ldr	r3, [sp, #24]
 8009a86:	4313      	orrs	r3, r2
 8009a88:	d104      	bne.n	8009a94 <__ieee754_pow+0x218>
 8009a8a:	003a      	movs	r2, r7
 8009a8c:	002b      	movs	r3, r5
 8009a8e:	0038      	movs	r0, r7
 8009a90:	0029      	movs	r1, r5
 8009a92:	e77e      	b.n	8009992 <__ieee754_pow+0x116>
 8009a94:	4b16      	ldr	r3, [pc, #88]	; (8009af0 <__ieee754_pow+0x274>)
 8009a96:	429e      	cmp	r6, r3
 8009a98:	dc00      	bgt.n	8009a9c <__ieee754_pow+0x220>
 8009a9a:	e0ef      	b.n	8009c7c <__ieee754_pow+0x400>
 8009a9c:	4b15      	ldr	r3, [pc, #84]	; (8009af4 <__ieee754_pow+0x278>)
 8009a9e:	429e      	cmp	r6, r3
 8009aa0:	dd09      	ble.n	8009ab6 <__ieee754_pow+0x23a>
 8009aa2:	4b0f      	ldr	r3, [pc, #60]	; (8009ae0 <__ieee754_pow+0x264>)
 8009aa4:	429c      	cmp	r4, r3
 8009aa6:	dc0c      	bgt.n	8009ac2 <__ieee754_pow+0x246>
 8009aa8:	9b04      	ldr	r3, [sp, #16]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	da0c      	bge.n	8009ac8 <__ieee754_pow+0x24c>
 8009aae:	2000      	movs	r0, #0
 8009ab0:	f000 fcce 	bl	800a450 <__math_oflow>
 8009ab4:	e708      	b.n	80098c8 <__ieee754_pow+0x4c>
 8009ab6:	4b10      	ldr	r3, [pc, #64]	; (8009af8 <__ieee754_pow+0x27c>)
 8009ab8:	429c      	cmp	r4, r3
 8009aba:	ddf5      	ble.n	8009aa8 <__ieee754_pow+0x22c>
 8009abc:	4b0a      	ldr	r3, [pc, #40]	; (8009ae8 <__ieee754_pow+0x26c>)
 8009abe:	429c      	cmp	r4, r3
 8009ac0:	dd1c      	ble.n	8009afc <__ieee754_pow+0x280>
 8009ac2:	9b04      	ldr	r3, [sp, #16]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	dcf2      	bgt.n	8009aae <__ieee754_pow+0x232>
 8009ac8:	2000      	movs	r0, #0
 8009aca:	f000 fcba 	bl	800a442 <__math_uflow>
 8009ace:	e6fb      	b.n	80098c8 <__ieee754_pow+0x4c>
 8009ad0:	fff00000 	.word	0xfff00000
 8009ad4:	7ff00000 	.word	0x7ff00000
 8009ad8:	c0100000 	.word	0xc0100000
 8009adc:	433fffff 	.word	0x433fffff
 8009ae0:	3fefffff 	.word	0x3fefffff
 8009ae4:	fffffc01 	.word	0xfffffc01
 8009ae8:	3ff00000 	.word	0x3ff00000
 8009aec:	3fe00000 	.word	0x3fe00000
 8009af0:	41e00000 	.word	0x41e00000
 8009af4:	43f00000 	.word	0x43f00000
 8009af8:	3feffffe 	.word	0x3feffffe
 8009afc:	2200      	movs	r2, #0
 8009afe:	9800      	ldr	r0, [sp, #0]
 8009b00:	9901      	ldr	r1, [sp, #4]
 8009b02:	4b52      	ldr	r3, [pc, #328]	; (8009c4c <__ieee754_pow+0x3d0>)
 8009b04:	f7f7 ffea 	bl	8001adc <__aeabi_dsub>
 8009b08:	22c0      	movs	r2, #192	; 0xc0
 8009b0a:	4b51      	ldr	r3, [pc, #324]	; (8009c50 <__ieee754_pow+0x3d4>)
 8009b0c:	05d2      	lsls	r2, r2, #23
 8009b0e:	0004      	movs	r4, r0
 8009b10:	000d      	movs	r5, r1
 8009b12:	f7f7 fd77 	bl	8001604 <__aeabi_dmul>
 8009b16:	4a4f      	ldr	r2, [pc, #316]	; (8009c54 <__ieee754_pow+0x3d8>)
 8009b18:	9000      	str	r0, [sp, #0]
 8009b1a:	9101      	str	r1, [sp, #4]
 8009b1c:	4b4e      	ldr	r3, [pc, #312]	; (8009c58 <__ieee754_pow+0x3dc>)
 8009b1e:	0020      	movs	r0, r4
 8009b20:	0029      	movs	r1, r5
 8009b22:	f7f7 fd6f 	bl	8001604 <__aeabi_dmul>
 8009b26:	2200      	movs	r2, #0
 8009b28:	9004      	str	r0, [sp, #16]
 8009b2a:	9105      	str	r1, [sp, #20]
 8009b2c:	4b4b      	ldr	r3, [pc, #300]	; (8009c5c <__ieee754_pow+0x3e0>)
 8009b2e:	0020      	movs	r0, r4
 8009b30:	0029      	movs	r1, r5
 8009b32:	f7f7 fd67 	bl	8001604 <__aeabi_dmul>
 8009b36:	0002      	movs	r2, r0
 8009b38:	000b      	movs	r3, r1
 8009b3a:	4849      	ldr	r0, [pc, #292]	; (8009c60 <__ieee754_pow+0x3e4>)
 8009b3c:	4949      	ldr	r1, [pc, #292]	; (8009c64 <__ieee754_pow+0x3e8>)
 8009b3e:	f7f7 ffcd 	bl	8001adc <__aeabi_dsub>
 8009b42:	0022      	movs	r2, r4
 8009b44:	002b      	movs	r3, r5
 8009b46:	f7f7 fd5d 	bl	8001604 <__aeabi_dmul>
 8009b4a:	0002      	movs	r2, r0
 8009b4c:	000b      	movs	r3, r1
 8009b4e:	2000      	movs	r0, #0
 8009b50:	4945      	ldr	r1, [pc, #276]	; (8009c68 <__ieee754_pow+0x3ec>)
 8009b52:	f7f7 ffc3 	bl	8001adc <__aeabi_dsub>
 8009b56:	0022      	movs	r2, r4
 8009b58:	0006      	movs	r6, r0
 8009b5a:	000f      	movs	r7, r1
 8009b5c:	002b      	movs	r3, r5
 8009b5e:	0020      	movs	r0, r4
 8009b60:	0029      	movs	r1, r5
 8009b62:	f7f7 fd4f 	bl	8001604 <__aeabi_dmul>
 8009b66:	0002      	movs	r2, r0
 8009b68:	000b      	movs	r3, r1
 8009b6a:	0030      	movs	r0, r6
 8009b6c:	0039      	movs	r1, r7
 8009b6e:	f7f7 fd49 	bl	8001604 <__aeabi_dmul>
 8009b72:	4a3e      	ldr	r2, [pc, #248]	; (8009c6c <__ieee754_pow+0x3f0>)
 8009b74:	4b36      	ldr	r3, [pc, #216]	; (8009c50 <__ieee754_pow+0x3d4>)
 8009b76:	f7f7 fd45 	bl	8001604 <__aeabi_dmul>
 8009b7a:	0002      	movs	r2, r0
 8009b7c:	000b      	movs	r3, r1
 8009b7e:	9804      	ldr	r0, [sp, #16]
 8009b80:	9905      	ldr	r1, [sp, #20]
 8009b82:	f7f7 ffab 	bl	8001adc <__aeabi_dsub>
 8009b86:	0002      	movs	r2, r0
 8009b88:	000b      	movs	r3, r1
 8009b8a:	0004      	movs	r4, r0
 8009b8c:	000d      	movs	r5, r1
 8009b8e:	9800      	ldr	r0, [sp, #0]
 8009b90:	9901      	ldr	r1, [sp, #4]
 8009b92:	f7f6 fdf9 	bl	8000788 <__aeabi_dadd>
 8009b96:	9a00      	ldr	r2, [sp, #0]
 8009b98:	9b01      	ldr	r3, [sp, #4]
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	000f      	movs	r7, r1
 8009b9e:	0006      	movs	r6, r0
 8009ba0:	f7f7 ff9c 	bl	8001adc <__aeabi_dsub>
 8009ba4:	0002      	movs	r2, r0
 8009ba6:	000b      	movs	r3, r1
 8009ba8:	0020      	movs	r0, r4
 8009baa:	0029      	movs	r1, r5
 8009bac:	f7f7 ff96 	bl	8001adc <__aeabi_dsub>
 8009bb0:	9b06      	ldr	r3, [sp, #24]
 8009bb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	9004      	str	r0, [sp, #16]
 8009bb8:	9105      	str	r1, [sp, #20]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	d000      	beq.n	8009bc0 <__ieee754_pow+0x344>
 8009bbe:	e1db      	b.n	8009f78 <__ieee754_pow+0x6fc>
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	4c2b      	ldr	r4, [pc, #172]	; (8009c70 <__ieee754_pow+0x3f4>)
 8009bc4:	9300      	str	r3, [sp, #0]
 8009bc6:	9401      	str	r4, [sp, #4]
 8009bc8:	9c02      	ldr	r4, [sp, #8]
 8009bca:	9d03      	ldr	r5, [sp, #12]
 8009bcc:	9802      	ldr	r0, [sp, #8]
 8009bce:	9903      	ldr	r1, [sp, #12]
 8009bd0:	2400      	movs	r4, #0
 8009bd2:	002b      	movs	r3, r5
 8009bd4:	0022      	movs	r2, r4
 8009bd6:	f7f7 ff81 	bl	8001adc <__aeabi_dsub>
 8009bda:	0032      	movs	r2, r6
 8009bdc:	003b      	movs	r3, r7
 8009bde:	f7f7 fd11 	bl	8001604 <__aeabi_dmul>
 8009be2:	9a02      	ldr	r2, [sp, #8]
 8009be4:	9b03      	ldr	r3, [sp, #12]
 8009be6:	9006      	str	r0, [sp, #24]
 8009be8:	9107      	str	r1, [sp, #28]
 8009bea:	9804      	ldr	r0, [sp, #16]
 8009bec:	9905      	ldr	r1, [sp, #20]
 8009bee:	f7f7 fd09 	bl	8001604 <__aeabi_dmul>
 8009bf2:	0002      	movs	r2, r0
 8009bf4:	000b      	movs	r3, r1
 8009bf6:	9806      	ldr	r0, [sp, #24]
 8009bf8:	9907      	ldr	r1, [sp, #28]
 8009bfa:	f7f6 fdc5 	bl	8000788 <__aeabi_dadd>
 8009bfe:	0022      	movs	r2, r4
 8009c00:	002b      	movs	r3, r5
 8009c02:	9004      	str	r0, [sp, #16]
 8009c04:	9105      	str	r1, [sp, #20]
 8009c06:	0030      	movs	r0, r6
 8009c08:	0039      	movs	r1, r7
 8009c0a:	f7f7 fcfb 	bl	8001604 <__aeabi_dmul>
 8009c0e:	0006      	movs	r6, r0
 8009c10:	000f      	movs	r7, r1
 8009c12:	000b      	movs	r3, r1
 8009c14:	0002      	movs	r2, r0
 8009c16:	9804      	ldr	r0, [sp, #16]
 8009c18:	9905      	ldr	r1, [sp, #20]
 8009c1a:	9606      	str	r6, [sp, #24]
 8009c1c:	9707      	str	r7, [sp, #28]
 8009c1e:	f7f6 fdb3 	bl	8000788 <__aeabi_dadd>
 8009c22:	4b14      	ldr	r3, [pc, #80]	; (8009c74 <__ieee754_pow+0x3f8>)
 8009c24:	0005      	movs	r5, r0
 8009c26:	000c      	movs	r4, r1
 8009c28:	9108      	str	r1, [sp, #32]
 8009c2a:	4299      	cmp	r1, r3
 8009c2c:	dc00      	bgt.n	8009c30 <__ieee754_pow+0x3b4>
 8009c2e:	e2d6      	b.n	800a1de <__ieee754_pow+0x962>
 8009c30:	4b11      	ldr	r3, [pc, #68]	; (8009c78 <__ieee754_pow+0x3fc>)
 8009c32:	18cb      	adds	r3, r1, r3
 8009c34:	4303      	orrs	r3, r0
 8009c36:	d100      	bne.n	8009c3a <__ieee754_pow+0x3be>
 8009c38:	e1d8      	b.n	8009fec <__ieee754_pow+0x770>
 8009c3a:	9800      	ldr	r0, [sp, #0]
 8009c3c:	9901      	ldr	r1, [sp, #4]
 8009c3e:	2300      	movs	r3, #0
 8009c40:	2200      	movs	r2, #0
 8009c42:	f7f6 fc01 	bl	8000448 <__aeabi_dcmplt>
 8009c46:	1e43      	subs	r3, r0, #1
 8009c48:	4198      	sbcs	r0, r3
 8009c4a:	e731      	b.n	8009ab0 <__ieee754_pow+0x234>
 8009c4c:	3ff00000 	.word	0x3ff00000
 8009c50:	3ff71547 	.word	0x3ff71547
 8009c54:	f85ddf44 	.word	0xf85ddf44
 8009c58:	3e54ae0b 	.word	0x3e54ae0b
 8009c5c:	3fd00000 	.word	0x3fd00000
 8009c60:	55555555 	.word	0x55555555
 8009c64:	3fd55555 	.word	0x3fd55555
 8009c68:	3fe00000 	.word	0x3fe00000
 8009c6c:	652b82fe 	.word	0x652b82fe
 8009c70:	bff00000 	.word	0xbff00000
 8009c74:	408fffff 	.word	0x408fffff
 8009c78:	bf700000 	.word	0xbf700000
 8009c7c:	4bc0      	ldr	r3, [pc, #768]	; (8009f80 <__ieee754_pow+0x704>)
 8009c7e:	2200      	movs	r2, #0
 8009c80:	422b      	tst	r3, r5
 8009c82:	d10a      	bne.n	8009c9a <__ieee754_pow+0x41e>
 8009c84:	9800      	ldr	r0, [sp, #0]
 8009c86:	9901      	ldr	r1, [sp, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	4bbe      	ldr	r3, [pc, #760]	; (8009f84 <__ieee754_pow+0x708>)
 8009c8c:	f7f7 fcba 	bl	8001604 <__aeabi_dmul>
 8009c90:	2235      	movs	r2, #53	; 0x35
 8009c92:	9000      	str	r0, [sp, #0]
 8009c94:	9101      	str	r1, [sp, #4]
 8009c96:	9c01      	ldr	r4, [sp, #4]
 8009c98:	4252      	negs	r2, r2
 8009c9a:	49bb      	ldr	r1, [pc, #748]	; (8009f88 <__ieee754_pow+0x70c>)
 8009c9c:	1523      	asrs	r3, r4, #20
 8009c9e:	185b      	adds	r3, r3, r1
 8009ca0:	189b      	adds	r3, r3, r2
 8009ca2:	0324      	lsls	r4, r4, #12
 8009ca4:	4db9      	ldr	r5, [pc, #740]	; (8009f8c <__ieee754_pow+0x710>)
 8009ca6:	930d      	str	r3, [sp, #52]	; 0x34
 8009ca8:	4bb9      	ldr	r3, [pc, #740]	; (8009f90 <__ieee754_pow+0x714>)
 8009caa:	0b22      	lsrs	r2, r4, #12
 8009cac:	4315      	orrs	r5, r2
 8009cae:	2400      	movs	r4, #0
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	dd09      	ble.n	8009cc8 <__ieee754_pow+0x44c>
 8009cb4:	4bb7      	ldr	r3, [pc, #732]	; (8009f94 <__ieee754_pow+0x718>)
 8009cb6:	3401      	adds	r4, #1
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	dd05      	ble.n	8009cc8 <__ieee754_pow+0x44c>
 8009cbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cbe:	191b      	adds	r3, r3, r4
 8009cc0:	2400      	movs	r4, #0
 8009cc2:	930d      	str	r3, [sp, #52]	; 0x34
 8009cc4:	4bb4      	ldr	r3, [pc, #720]	; (8009f98 <__ieee754_pow+0x71c>)
 8009cc6:	18ed      	adds	r5, r5, r3
 8009cc8:	00e3      	lsls	r3, r4, #3
 8009cca:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ccc:	4bb3      	ldr	r3, [pc, #716]	; (8009f9c <__ieee754_pow+0x720>)
 8009cce:	00e2      	lsls	r2, r4, #3
 8009cd0:	189b      	adds	r3, r3, r2
 8009cd2:	9800      	ldr	r0, [sp, #0]
 8009cd4:	9901      	ldr	r1, [sp, #4]
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	0029      	movs	r1, r5
 8009cdc:	0006      	movs	r6, r0
 8009cde:	920a      	str	r2, [sp, #40]	; 0x28
 8009ce0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ce2:	f7f7 fefb 	bl	8001adc <__aeabi_dsub>
 8009ce6:	0032      	movs	r2, r6
 8009ce8:	002b      	movs	r3, r5
 8009cea:	9010      	str	r0, [sp, #64]	; 0x40
 8009cec:	9111      	str	r1, [sp, #68]	; 0x44
 8009cee:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009cf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009cf2:	f7f6 fd49 	bl	8000788 <__aeabi_dadd>
 8009cf6:	0002      	movs	r2, r0
 8009cf8:	000b      	movs	r3, r1
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	49a3      	ldr	r1, [pc, #652]	; (8009f8c <__ieee754_pow+0x710>)
 8009cfe:	f7f7 f87f 	bl	8000e00 <__aeabi_ddiv>
 8009d02:	0002      	movs	r2, r0
 8009d04:	000b      	movs	r3, r1
 8009d06:	9012      	str	r0, [sp, #72]	; 0x48
 8009d08:	9113      	str	r1, [sp, #76]	; 0x4c
 8009d0a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009d0c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d0e:	f7f7 fc79 	bl	8001604 <__aeabi_dmul>
 8009d12:	9008      	str	r0, [sp, #32]
 8009d14:	9109      	str	r1, [sp, #36]	; 0x24
 8009d16:	9a08      	ldr	r2, [sp, #32]
 8009d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d1a:	2180      	movs	r1, #128	; 0x80
 8009d1c:	9204      	str	r2, [sp, #16]
 8009d1e:	9305      	str	r3, [sp, #20]
 8009d20:	2300      	movs	r3, #0
 8009d22:	002f      	movs	r7, r5
 8009d24:	0589      	lsls	r1, r1, #22
 8009d26:	106d      	asrs	r5, r5, #1
 8009d28:	430d      	orrs	r5, r1
 8009d2a:	2180      	movs	r1, #128	; 0x80
 8009d2c:	9304      	str	r3, [sp, #16]
 8009d2e:	9a04      	ldr	r2, [sp, #16]
 8009d30:	9b05      	ldr	r3, [sp, #20]
 8009d32:	9200      	str	r2, [sp, #0]
 8009d34:	9301      	str	r3, [sp, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	0309      	lsls	r1, r1, #12
 8009d3a:	186d      	adds	r5, r5, r1
 8009d3c:	04a1      	lsls	r1, r4, #18
 8009d3e:	186b      	adds	r3, r5, r1
 8009d40:	9800      	ldr	r0, [sp, #0]
 8009d42:	9901      	ldr	r1, [sp, #4]
 8009d44:	0014      	movs	r4, r2
 8009d46:	001d      	movs	r5, r3
 8009d48:	f7f7 fc5c 	bl	8001604 <__aeabi_dmul>
 8009d4c:	0002      	movs	r2, r0
 8009d4e:	000b      	movs	r3, r1
 8009d50:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009d52:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d54:	f7f7 fec2 	bl	8001adc <__aeabi_dsub>
 8009d58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d5c:	9010      	str	r0, [sp, #64]	; 0x40
 8009d5e:	9111      	str	r1, [sp, #68]	; 0x44
 8009d60:	0020      	movs	r0, r4
 8009d62:	0029      	movs	r1, r5
 8009d64:	f7f7 feba 	bl	8001adc <__aeabi_dsub>
 8009d68:	0002      	movs	r2, r0
 8009d6a:	000b      	movs	r3, r1
 8009d6c:	0030      	movs	r0, r6
 8009d6e:	0039      	movs	r1, r7
 8009d70:	f7f7 feb4 	bl	8001adc <__aeabi_dsub>
 8009d74:	9a00      	ldr	r2, [sp, #0]
 8009d76:	9b01      	ldr	r3, [sp, #4]
 8009d78:	f7f7 fc44 	bl	8001604 <__aeabi_dmul>
 8009d7c:	0002      	movs	r2, r0
 8009d7e:	000b      	movs	r3, r1
 8009d80:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009d82:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d84:	f7f7 feaa 	bl	8001adc <__aeabi_dsub>
 8009d88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d8c:	f7f7 fc3a 	bl	8001604 <__aeabi_dmul>
 8009d90:	9a08      	ldr	r2, [sp, #32]
 8009d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d94:	900a      	str	r0, [sp, #40]	; 0x28
 8009d96:	910b      	str	r1, [sp, #44]	; 0x2c
 8009d98:	0010      	movs	r0, r2
 8009d9a:	0019      	movs	r1, r3
 8009d9c:	f7f7 fc32 	bl	8001604 <__aeabi_dmul>
 8009da0:	0006      	movs	r6, r0
 8009da2:	000f      	movs	r7, r1
 8009da4:	4a7e      	ldr	r2, [pc, #504]	; (8009fa0 <__ieee754_pow+0x724>)
 8009da6:	4b7f      	ldr	r3, [pc, #508]	; (8009fa4 <__ieee754_pow+0x728>)
 8009da8:	f7f7 fc2c 	bl	8001604 <__aeabi_dmul>
 8009dac:	4a7e      	ldr	r2, [pc, #504]	; (8009fa8 <__ieee754_pow+0x72c>)
 8009dae:	4b7f      	ldr	r3, [pc, #508]	; (8009fac <__ieee754_pow+0x730>)
 8009db0:	f7f6 fcea 	bl	8000788 <__aeabi_dadd>
 8009db4:	0032      	movs	r2, r6
 8009db6:	003b      	movs	r3, r7
 8009db8:	f7f7 fc24 	bl	8001604 <__aeabi_dmul>
 8009dbc:	4a7c      	ldr	r2, [pc, #496]	; (8009fb0 <__ieee754_pow+0x734>)
 8009dbe:	4b7d      	ldr	r3, [pc, #500]	; (8009fb4 <__ieee754_pow+0x738>)
 8009dc0:	f7f6 fce2 	bl	8000788 <__aeabi_dadd>
 8009dc4:	0032      	movs	r2, r6
 8009dc6:	003b      	movs	r3, r7
 8009dc8:	f7f7 fc1c 	bl	8001604 <__aeabi_dmul>
 8009dcc:	4a7a      	ldr	r2, [pc, #488]	; (8009fb8 <__ieee754_pow+0x73c>)
 8009dce:	4b7b      	ldr	r3, [pc, #492]	; (8009fbc <__ieee754_pow+0x740>)
 8009dd0:	f7f6 fcda 	bl	8000788 <__aeabi_dadd>
 8009dd4:	0032      	movs	r2, r6
 8009dd6:	003b      	movs	r3, r7
 8009dd8:	f7f7 fc14 	bl	8001604 <__aeabi_dmul>
 8009ddc:	4a78      	ldr	r2, [pc, #480]	; (8009fc0 <__ieee754_pow+0x744>)
 8009dde:	4b79      	ldr	r3, [pc, #484]	; (8009fc4 <__ieee754_pow+0x748>)
 8009de0:	f7f6 fcd2 	bl	8000788 <__aeabi_dadd>
 8009de4:	0032      	movs	r2, r6
 8009de6:	003b      	movs	r3, r7
 8009de8:	f7f7 fc0c 	bl	8001604 <__aeabi_dmul>
 8009dec:	4a76      	ldr	r2, [pc, #472]	; (8009fc8 <__ieee754_pow+0x74c>)
 8009dee:	4b77      	ldr	r3, [pc, #476]	; (8009fcc <__ieee754_pow+0x750>)
 8009df0:	f7f6 fcca 	bl	8000788 <__aeabi_dadd>
 8009df4:	0032      	movs	r2, r6
 8009df6:	0004      	movs	r4, r0
 8009df8:	000d      	movs	r5, r1
 8009dfa:	003b      	movs	r3, r7
 8009dfc:	0030      	movs	r0, r6
 8009dfe:	0039      	movs	r1, r7
 8009e00:	f7f7 fc00 	bl	8001604 <__aeabi_dmul>
 8009e04:	0002      	movs	r2, r0
 8009e06:	000b      	movs	r3, r1
 8009e08:	0020      	movs	r0, r4
 8009e0a:	0029      	movs	r1, r5
 8009e0c:	f7f7 fbfa 	bl	8001604 <__aeabi_dmul>
 8009e10:	9a00      	ldr	r2, [sp, #0]
 8009e12:	9b01      	ldr	r3, [sp, #4]
 8009e14:	0004      	movs	r4, r0
 8009e16:	000d      	movs	r5, r1
 8009e18:	9808      	ldr	r0, [sp, #32]
 8009e1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e1c:	f7f6 fcb4 	bl	8000788 <__aeabi_dadd>
 8009e20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e24:	f7f7 fbee 	bl	8001604 <__aeabi_dmul>
 8009e28:	0022      	movs	r2, r4
 8009e2a:	002b      	movs	r3, r5
 8009e2c:	f7f6 fcac 	bl	8000788 <__aeabi_dadd>
 8009e30:	9a00      	ldr	r2, [sp, #0]
 8009e32:	9b01      	ldr	r3, [sp, #4]
 8009e34:	9010      	str	r0, [sp, #64]	; 0x40
 8009e36:	9111      	str	r1, [sp, #68]	; 0x44
 8009e38:	0010      	movs	r0, r2
 8009e3a:	0019      	movs	r1, r3
 8009e3c:	f7f7 fbe2 	bl	8001604 <__aeabi_dmul>
 8009e40:	2200      	movs	r2, #0
 8009e42:	4b63      	ldr	r3, [pc, #396]	; (8009fd0 <__ieee754_pow+0x754>)
 8009e44:	0004      	movs	r4, r0
 8009e46:	000d      	movs	r5, r1
 8009e48:	f7f6 fc9e 	bl	8000788 <__aeabi_dadd>
 8009e4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e50:	f7f6 fc9a 	bl	8000788 <__aeabi_dadd>
 8009e54:	2600      	movs	r6, #0
 8009e56:	000f      	movs	r7, r1
 8009e58:	0032      	movs	r2, r6
 8009e5a:	000b      	movs	r3, r1
 8009e5c:	9800      	ldr	r0, [sp, #0]
 8009e5e:	9901      	ldr	r1, [sp, #4]
 8009e60:	f7f7 fbd0 	bl	8001604 <__aeabi_dmul>
 8009e64:	2200      	movs	r2, #0
 8009e66:	9000      	str	r0, [sp, #0]
 8009e68:	9101      	str	r1, [sp, #4]
 8009e6a:	4b59      	ldr	r3, [pc, #356]	; (8009fd0 <__ieee754_pow+0x754>)
 8009e6c:	0030      	movs	r0, r6
 8009e6e:	0039      	movs	r1, r7
 8009e70:	f7f7 fe34 	bl	8001adc <__aeabi_dsub>
 8009e74:	0022      	movs	r2, r4
 8009e76:	002b      	movs	r3, r5
 8009e78:	f7f7 fe30 	bl	8001adc <__aeabi_dsub>
 8009e7c:	0002      	movs	r2, r0
 8009e7e:	000b      	movs	r3, r1
 8009e80:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009e82:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009e84:	f7f7 fe2a 	bl	8001adc <__aeabi_dsub>
 8009e88:	9a08      	ldr	r2, [sp, #32]
 8009e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e8c:	f7f7 fbba 	bl	8001604 <__aeabi_dmul>
 8009e90:	0032      	movs	r2, r6
 8009e92:	0004      	movs	r4, r0
 8009e94:	000d      	movs	r5, r1
 8009e96:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009e98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e9a:	003b      	movs	r3, r7
 8009e9c:	f7f7 fbb2 	bl	8001604 <__aeabi_dmul>
 8009ea0:	0002      	movs	r2, r0
 8009ea2:	000b      	movs	r3, r1
 8009ea4:	0020      	movs	r0, r4
 8009ea6:	0029      	movs	r1, r5
 8009ea8:	f7f6 fc6e 	bl	8000788 <__aeabi_dadd>
 8009eac:	0004      	movs	r4, r0
 8009eae:	000d      	movs	r5, r1
 8009eb0:	0002      	movs	r2, r0
 8009eb2:	000b      	movs	r3, r1
 8009eb4:	9800      	ldr	r0, [sp, #0]
 8009eb6:	9901      	ldr	r1, [sp, #4]
 8009eb8:	f7f6 fc66 	bl	8000788 <__aeabi_dadd>
 8009ebc:	2600      	movs	r6, #0
 8009ebe:	22e0      	movs	r2, #224	; 0xe0
 8009ec0:	4b44      	ldr	r3, [pc, #272]	; (8009fd4 <__ieee754_pow+0x758>)
 8009ec2:	0612      	lsls	r2, r2, #24
 8009ec4:	0030      	movs	r0, r6
 8009ec6:	000f      	movs	r7, r1
 8009ec8:	f7f7 fb9c 	bl	8001604 <__aeabi_dmul>
 8009ecc:	9008      	str	r0, [sp, #32]
 8009ece:	9109      	str	r1, [sp, #36]	; 0x24
 8009ed0:	9a00      	ldr	r2, [sp, #0]
 8009ed2:	9b01      	ldr	r3, [sp, #4]
 8009ed4:	0039      	movs	r1, r7
 8009ed6:	0030      	movs	r0, r6
 8009ed8:	f7f7 fe00 	bl	8001adc <__aeabi_dsub>
 8009edc:	0002      	movs	r2, r0
 8009ede:	000b      	movs	r3, r1
 8009ee0:	0020      	movs	r0, r4
 8009ee2:	0029      	movs	r1, r5
 8009ee4:	f7f7 fdfa 	bl	8001adc <__aeabi_dsub>
 8009ee8:	4a3b      	ldr	r2, [pc, #236]	; (8009fd8 <__ieee754_pow+0x75c>)
 8009eea:	4b3a      	ldr	r3, [pc, #232]	; (8009fd4 <__ieee754_pow+0x758>)
 8009eec:	f7f7 fb8a 	bl	8001604 <__aeabi_dmul>
 8009ef0:	4a3a      	ldr	r2, [pc, #232]	; (8009fdc <__ieee754_pow+0x760>)
 8009ef2:	0004      	movs	r4, r0
 8009ef4:	000d      	movs	r5, r1
 8009ef6:	4b3a      	ldr	r3, [pc, #232]	; (8009fe0 <__ieee754_pow+0x764>)
 8009ef8:	0039      	movs	r1, r7
 8009efa:	0030      	movs	r0, r6
 8009efc:	f7f7 fb82 	bl	8001604 <__aeabi_dmul>
 8009f00:	0002      	movs	r2, r0
 8009f02:	000b      	movs	r3, r1
 8009f04:	0020      	movs	r0, r4
 8009f06:	0029      	movs	r1, r5
 8009f08:	f7f6 fc3e 	bl	8000788 <__aeabi_dadd>
 8009f0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f0e:	4b35      	ldr	r3, [pc, #212]	; (8009fe4 <__ieee754_pow+0x768>)
 8009f10:	189b      	adds	r3, r3, r2
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	f7f6 fc37 	bl	8000788 <__aeabi_dadd>
 8009f1a:	900a      	str	r0, [sp, #40]	; 0x28
 8009f1c:	910b      	str	r1, [sp, #44]	; 0x2c
 8009f1e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009f20:	f7f8 f9c2 	bl	80022a8 <__aeabi_i2d>
 8009f24:	0004      	movs	r4, r0
 8009f26:	000d      	movs	r5, r1
 8009f28:	9808      	ldr	r0, [sp, #32]
 8009f2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f2e:	4b2e      	ldr	r3, [pc, #184]	; (8009fe8 <__ieee754_pow+0x76c>)
 8009f30:	189b      	adds	r3, r3, r2
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	9200      	str	r2, [sp, #0]
 8009f38:	9301      	str	r3, [sp, #4]
 8009f3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f3e:	f7f6 fc23 	bl	8000788 <__aeabi_dadd>
 8009f42:	9a00      	ldr	r2, [sp, #0]
 8009f44:	9b01      	ldr	r3, [sp, #4]
 8009f46:	f7f6 fc1f 	bl	8000788 <__aeabi_dadd>
 8009f4a:	0022      	movs	r2, r4
 8009f4c:	002b      	movs	r3, r5
 8009f4e:	f7f6 fc1b 	bl	8000788 <__aeabi_dadd>
 8009f52:	0022      	movs	r2, r4
 8009f54:	002b      	movs	r3, r5
 8009f56:	0030      	movs	r0, r6
 8009f58:	000f      	movs	r7, r1
 8009f5a:	f7f7 fdbf 	bl	8001adc <__aeabi_dsub>
 8009f5e:	9a00      	ldr	r2, [sp, #0]
 8009f60:	9b01      	ldr	r3, [sp, #4]
 8009f62:	f7f7 fdbb 	bl	8001adc <__aeabi_dsub>
 8009f66:	9a08      	ldr	r2, [sp, #32]
 8009f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f6a:	f7f7 fdb7 	bl	8001adc <__aeabi_dsub>
 8009f6e:	0002      	movs	r2, r0
 8009f70:	000b      	movs	r3, r1
 8009f72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009f74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f76:	e619      	b.n	8009bac <__ieee754_pow+0x330>
 8009f78:	2300      	movs	r3, #0
 8009f7a:	4c04      	ldr	r4, [pc, #16]	; (8009f8c <__ieee754_pow+0x710>)
 8009f7c:	e622      	b.n	8009bc4 <__ieee754_pow+0x348>
 8009f7e:	46c0      	nop			; (mov r8, r8)
 8009f80:	7ff00000 	.word	0x7ff00000
 8009f84:	43400000 	.word	0x43400000
 8009f88:	fffffc01 	.word	0xfffffc01
 8009f8c:	3ff00000 	.word	0x3ff00000
 8009f90:	0003988e 	.word	0x0003988e
 8009f94:	000bb679 	.word	0x000bb679
 8009f98:	fff00000 	.word	0xfff00000
 8009f9c:	0800aa38 	.word	0x0800aa38
 8009fa0:	4a454eef 	.word	0x4a454eef
 8009fa4:	3fca7e28 	.word	0x3fca7e28
 8009fa8:	93c9db65 	.word	0x93c9db65
 8009fac:	3fcd864a 	.word	0x3fcd864a
 8009fb0:	a91d4101 	.word	0xa91d4101
 8009fb4:	3fd17460 	.word	0x3fd17460
 8009fb8:	518f264d 	.word	0x518f264d
 8009fbc:	3fd55555 	.word	0x3fd55555
 8009fc0:	db6fabff 	.word	0xdb6fabff
 8009fc4:	3fdb6db6 	.word	0x3fdb6db6
 8009fc8:	33333303 	.word	0x33333303
 8009fcc:	3fe33333 	.word	0x3fe33333
 8009fd0:	40080000 	.word	0x40080000
 8009fd4:	3feec709 	.word	0x3feec709
 8009fd8:	dc3a03fd 	.word	0xdc3a03fd
 8009fdc:	145b01f5 	.word	0x145b01f5
 8009fe0:	be3e2fe0 	.word	0xbe3e2fe0
 8009fe4:	0800aa58 	.word	0x0800aa58
 8009fe8:	0800aa48 	.word	0x0800aa48
 8009fec:	4a90      	ldr	r2, [pc, #576]	; (800a230 <__ieee754_pow+0x9b4>)
 8009fee:	4b91      	ldr	r3, [pc, #580]	; (800a234 <__ieee754_pow+0x9b8>)
 8009ff0:	9804      	ldr	r0, [sp, #16]
 8009ff2:	9905      	ldr	r1, [sp, #20]
 8009ff4:	f7f6 fbc8 	bl	8000788 <__aeabi_dadd>
 8009ff8:	0032      	movs	r2, r6
 8009ffa:	9002      	str	r0, [sp, #8]
 8009ffc:	9103      	str	r1, [sp, #12]
 8009ffe:	003b      	movs	r3, r7
 800a000:	0028      	movs	r0, r5
 800a002:	0021      	movs	r1, r4
 800a004:	f7f7 fd6a 	bl	8001adc <__aeabi_dsub>
 800a008:	0002      	movs	r2, r0
 800a00a:	000b      	movs	r3, r1
 800a00c:	9802      	ldr	r0, [sp, #8]
 800a00e:	9903      	ldr	r1, [sp, #12]
 800a010:	f7f6 fa2e 	bl	8000470 <__aeabi_dcmpgt>
 800a014:	2800      	cmp	r0, #0
 800a016:	d000      	beq.n	800a01a <__ieee754_pow+0x79e>
 800a018:	e60f      	b.n	8009c3a <__ieee754_pow+0x3be>
 800a01a:	2100      	movs	r1, #0
 800a01c:	4a86      	ldr	r2, [pc, #536]	; (800a238 <__ieee754_pow+0x9bc>)
 800a01e:	0063      	lsls	r3, r4, #1
 800a020:	085b      	lsrs	r3, r3, #1
 800a022:	9102      	str	r1, [sp, #8]
 800a024:	4293      	cmp	r3, r2
 800a026:	dd25      	ble.n	800a074 <__ieee754_pow+0x7f8>
 800a028:	4a84      	ldr	r2, [pc, #528]	; (800a23c <__ieee754_pow+0x9c0>)
 800a02a:	151b      	asrs	r3, r3, #20
 800a02c:	189b      	adds	r3, r3, r2
 800a02e:	2280      	movs	r2, #128	; 0x80
 800a030:	0352      	lsls	r2, r2, #13
 800a032:	4694      	mov	ip, r2
 800a034:	411a      	asrs	r2, r3
 800a036:	1914      	adds	r4, r2, r4
 800a038:	4b81      	ldr	r3, [pc, #516]	; (800a240 <__ieee754_pow+0x9c4>)
 800a03a:	0060      	lsls	r0, r4, #1
 800a03c:	4d81      	ldr	r5, [pc, #516]	; (800a244 <__ieee754_pow+0x9c8>)
 800a03e:	0d40      	lsrs	r0, r0, #21
 800a040:	18c0      	adds	r0, r0, r3
 800a042:	4105      	asrs	r5, r0
 800a044:	0021      	movs	r1, r4
 800a046:	43a9      	bics	r1, r5
 800a048:	000b      	movs	r3, r1
 800a04a:	4661      	mov	r1, ip
 800a04c:	0324      	lsls	r4, r4, #12
 800a04e:	0b24      	lsrs	r4, r4, #12
 800a050:	4321      	orrs	r1, r4
 800a052:	2414      	movs	r4, #20
 800a054:	1a20      	subs	r0, r4, r0
 800a056:	4101      	asrs	r1, r0
 800a058:	9102      	str	r1, [sp, #8]
 800a05a:	9908      	ldr	r1, [sp, #32]
 800a05c:	2200      	movs	r2, #0
 800a05e:	2900      	cmp	r1, #0
 800a060:	da02      	bge.n	800a068 <__ieee754_pow+0x7ec>
 800a062:	9902      	ldr	r1, [sp, #8]
 800a064:	4249      	negs	r1, r1
 800a066:	9102      	str	r1, [sp, #8]
 800a068:	0030      	movs	r0, r6
 800a06a:	0039      	movs	r1, r7
 800a06c:	f7f7 fd36 	bl	8001adc <__aeabi_dsub>
 800a070:	9006      	str	r0, [sp, #24]
 800a072:	9107      	str	r1, [sp, #28]
 800a074:	9a04      	ldr	r2, [sp, #16]
 800a076:	9b05      	ldr	r3, [sp, #20]
 800a078:	9806      	ldr	r0, [sp, #24]
 800a07a:	9907      	ldr	r1, [sp, #28]
 800a07c:	2600      	movs	r6, #0
 800a07e:	f7f6 fb83 	bl	8000788 <__aeabi_dadd>
 800a082:	2200      	movs	r2, #0
 800a084:	0030      	movs	r0, r6
 800a086:	4b70      	ldr	r3, [pc, #448]	; (800a248 <__ieee754_pow+0x9cc>)
 800a088:	000f      	movs	r7, r1
 800a08a:	f7f7 fabb 	bl	8001604 <__aeabi_dmul>
 800a08e:	9a06      	ldr	r2, [sp, #24]
 800a090:	9b07      	ldr	r3, [sp, #28]
 800a092:	9008      	str	r0, [sp, #32]
 800a094:	9109      	str	r1, [sp, #36]	; 0x24
 800a096:	0030      	movs	r0, r6
 800a098:	0039      	movs	r1, r7
 800a09a:	f7f7 fd1f 	bl	8001adc <__aeabi_dsub>
 800a09e:	0002      	movs	r2, r0
 800a0a0:	000b      	movs	r3, r1
 800a0a2:	9804      	ldr	r0, [sp, #16]
 800a0a4:	9905      	ldr	r1, [sp, #20]
 800a0a6:	f7f7 fd19 	bl	8001adc <__aeabi_dsub>
 800a0aa:	4a68      	ldr	r2, [pc, #416]	; (800a24c <__ieee754_pow+0x9d0>)
 800a0ac:	4b68      	ldr	r3, [pc, #416]	; (800a250 <__ieee754_pow+0x9d4>)
 800a0ae:	f7f7 faa9 	bl	8001604 <__aeabi_dmul>
 800a0b2:	4a68      	ldr	r2, [pc, #416]	; (800a254 <__ieee754_pow+0x9d8>)
 800a0b4:	0004      	movs	r4, r0
 800a0b6:	000d      	movs	r5, r1
 800a0b8:	0030      	movs	r0, r6
 800a0ba:	0039      	movs	r1, r7
 800a0bc:	4b66      	ldr	r3, [pc, #408]	; (800a258 <__ieee754_pow+0x9dc>)
 800a0be:	f7f7 faa1 	bl	8001604 <__aeabi_dmul>
 800a0c2:	0002      	movs	r2, r0
 800a0c4:	000b      	movs	r3, r1
 800a0c6:	0020      	movs	r0, r4
 800a0c8:	0029      	movs	r1, r5
 800a0ca:	f7f6 fb5d 	bl	8000788 <__aeabi_dadd>
 800a0ce:	0004      	movs	r4, r0
 800a0d0:	000d      	movs	r5, r1
 800a0d2:	0002      	movs	r2, r0
 800a0d4:	000b      	movs	r3, r1
 800a0d6:	9808      	ldr	r0, [sp, #32]
 800a0d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0da:	f7f6 fb55 	bl	8000788 <__aeabi_dadd>
 800a0de:	9a08      	ldr	r2, [sp, #32]
 800a0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0e2:	0006      	movs	r6, r0
 800a0e4:	000f      	movs	r7, r1
 800a0e6:	f7f7 fcf9 	bl	8001adc <__aeabi_dsub>
 800a0ea:	0002      	movs	r2, r0
 800a0ec:	000b      	movs	r3, r1
 800a0ee:	0020      	movs	r0, r4
 800a0f0:	0029      	movs	r1, r5
 800a0f2:	f7f7 fcf3 	bl	8001adc <__aeabi_dsub>
 800a0f6:	0032      	movs	r2, r6
 800a0f8:	9004      	str	r0, [sp, #16]
 800a0fa:	9105      	str	r1, [sp, #20]
 800a0fc:	003b      	movs	r3, r7
 800a0fe:	0030      	movs	r0, r6
 800a100:	0039      	movs	r1, r7
 800a102:	f7f7 fa7f 	bl	8001604 <__aeabi_dmul>
 800a106:	0004      	movs	r4, r0
 800a108:	000d      	movs	r5, r1
 800a10a:	4a54      	ldr	r2, [pc, #336]	; (800a25c <__ieee754_pow+0x9e0>)
 800a10c:	4b54      	ldr	r3, [pc, #336]	; (800a260 <__ieee754_pow+0x9e4>)
 800a10e:	f7f7 fa79 	bl	8001604 <__aeabi_dmul>
 800a112:	4a54      	ldr	r2, [pc, #336]	; (800a264 <__ieee754_pow+0x9e8>)
 800a114:	4b54      	ldr	r3, [pc, #336]	; (800a268 <__ieee754_pow+0x9ec>)
 800a116:	f7f7 fce1 	bl	8001adc <__aeabi_dsub>
 800a11a:	0022      	movs	r2, r4
 800a11c:	002b      	movs	r3, r5
 800a11e:	f7f7 fa71 	bl	8001604 <__aeabi_dmul>
 800a122:	4a52      	ldr	r2, [pc, #328]	; (800a26c <__ieee754_pow+0x9f0>)
 800a124:	4b52      	ldr	r3, [pc, #328]	; (800a270 <__ieee754_pow+0x9f4>)
 800a126:	f7f6 fb2f 	bl	8000788 <__aeabi_dadd>
 800a12a:	0022      	movs	r2, r4
 800a12c:	002b      	movs	r3, r5
 800a12e:	f7f7 fa69 	bl	8001604 <__aeabi_dmul>
 800a132:	4a50      	ldr	r2, [pc, #320]	; (800a274 <__ieee754_pow+0x9f8>)
 800a134:	4b50      	ldr	r3, [pc, #320]	; (800a278 <__ieee754_pow+0x9fc>)
 800a136:	f7f7 fcd1 	bl	8001adc <__aeabi_dsub>
 800a13a:	0022      	movs	r2, r4
 800a13c:	002b      	movs	r3, r5
 800a13e:	f7f7 fa61 	bl	8001604 <__aeabi_dmul>
 800a142:	4a4e      	ldr	r2, [pc, #312]	; (800a27c <__ieee754_pow+0xa00>)
 800a144:	4b4e      	ldr	r3, [pc, #312]	; (800a280 <__ieee754_pow+0xa04>)
 800a146:	f7f6 fb1f 	bl	8000788 <__aeabi_dadd>
 800a14a:	0022      	movs	r2, r4
 800a14c:	002b      	movs	r3, r5
 800a14e:	f7f7 fa59 	bl	8001604 <__aeabi_dmul>
 800a152:	0002      	movs	r2, r0
 800a154:	000b      	movs	r3, r1
 800a156:	0030      	movs	r0, r6
 800a158:	0039      	movs	r1, r7
 800a15a:	f7f7 fcbf 	bl	8001adc <__aeabi_dsub>
 800a15e:	0004      	movs	r4, r0
 800a160:	000d      	movs	r5, r1
 800a162:	0002      	movs	r2, r0
 800a164:	000b      	movs	r3, r1
 800a166:	0030      	movs	r0, r6
 800a168:	0039      	movs	r1, r7
 800a16a:	f7f7 fa4b 	bl	8001604 <__aeabi_dmul>
 800a16e:	2380      	movs	r3, #128	; 0x80
 800a170:	9006      	str	r0, [sp, #24]
 800a172:	9107      	str	r1, [sp, #28]
 800a174:	2200      	movs	r2, #0
 800a176:	0020      	movs	r0, r4
 800a178:	0029      	movs	r1, r5
 800a17a:	05db      	lsls	r3, r3, #23
 800a17c:	f7f7 fcae 	bl	8001adc <__aeabi_dsub>
 800a180:	0002      	movs	r2, r0
 800a182:	000b      	movs	r3, r1
 800a184:	9806      	ldr	r0, [sp, #24]
 800a186:	9907      	ldr	r1, [sp, #28]
 800a188:	f7f6 fe3a 	bl	8000e00 <__aeabi_ddiv>
 800a18c:	9a04      	ldr	r2, [sp, #16]
 800a18e:	9b05      	ldr	r3, [sp, #20]
 800a190:	0004      	movs	r4, r0
 800a192:	000d      	movs	r5, r1
 800a194:	0030      	movs	r0, r6
 800a196:	0039      	movs	r1, r7
 800a198:	f7f7 fa34 	bl	8001604 <__aeabi_dmul>
 800a19c:	9a04      	ldr	r2, [sp, #16]
 800a19e:	9b05      	ldr	r3, [sp, #20]
 800a1a0:	f7f6 faf2 	bl	8000788 <__aeabi_dadd>
 800a1a4:	0002      	movs	r2, r0
 800a1a6:	000b      	movs	r3, r1
 800a1a8:	0020      	movs	r0, r4
 800a1aa:	0029      	movs	r1, r5
 800a1ac:	f7f7 fc96 	bl	8001adc <__aeabi_dsub>
 800a1b0:	0032      	movs	r2, r6
 800a1b2:	003b      	movs	r3, r7
 800a1b4:	f7f7 fc92 	bl	8001adc <__aeabi_dsub>
 800a1b8:	0002      	movs	r2, r0
 800a1ba:	000b      	movs	r3, r1
 800a1bc:	2000      	movs	r0, #0
 800a1be:	4931      	ldr	r1, [pc, #196]	; (800a284 <__ieee754_pow+0xa08>)
 800a1c0:	f7f7 fc8c 	bl	8001adc <__aeabi_dsub>
 800a1c4:	9b02      	ldr	r3, [sp, #8]
 800a1c6:	051b      	lsls	r3, r3, #20
 800a1c8:	185b      	adds	r3, r3, r1
 800a1ca:	151a      	asrs	r2, r3, #20
 800a1cc:	2a00      	cmp	r2, #0
 800a1ce:	dc25      	bgt.n	800a21c <__ieee754_pow+0x9a0>
 800a1d0:	9a02      	ldr	r2, [sp, #8]
 800a1d2:	f000 f94f 	bl	800a474 <scalbn>
 800a1d6:	9a00      	ldr	r2, [sp, #0]
 800a1d8:	9b01      	ldr	r3, [sp, #4]
 800a1da:	f7ff fc33 	bl	8009a44 <__ieee754_pow+0x1c8>
 800a1de:	4a2a      	ldr	r2, [pc, #168]	; (800a288 <__ieee754_pow+0xa0c>)
 800a1e0:	004b      	lsls	r3, r1, #1
 800a1e2:	085b      	lsrs	r3, r3, #1
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	dc00      	bgt.n	800a1ea <__ieee754_pow+0x96e>
 800a1e8:	e717      	b.n	800a01a <__ieee754_pow+0x79e>
 800a1ea:	4b28      	ldr	r3, [pc, #160]	; (800a28c <__ieee754_pow+0xa10>)
 800a1ec:	18cb      	adds	r3, r1, r3
 800a1ee:	4303      	orrs	r3, r0
 800a1f0:	d008      	beq.n	800a204 <__ieee754_pow+0x988>
 800a1f2:	9800      	ldr	r0, [sp, #0]
 800a1f4:	9901      	ldr	r1, [sp, #4]
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f7f6 f925 	bl	8000448 <__aeabi_dcmplt>
 800a1fe:	1e43      	subs	r3, r0, #1
 800a200:	4198      	sbcs	r0, r3
 800a202:	e462      	b.n	8009aca <__ieee754_pow+0x24e>
 800a204:	0032      	movs	r2, r6
 800a206:	003b      	movs	r3, r7
 800a208:	f7f7 fc68 	bl	8001adc <__aeabi_dsub>
 800a20c:	9a04      	ldr	r2, [sp, #16]
 800a20e:	9b05      	ldr	r3, [sp, #20]
 800a210:	f7f6 f938 	bl	8000484 <__aeabi_dcmpge>
 800a214:	2800      	cmp	r0, #0
 800a216:	d100      	bne.n	800a21a <__ieee754_pow+0x99e>
 800a218:	e6ff      	b.n	800a01a <__ieee754_pow+0x79e>
 800a21a:	e7ea      	b.n	800a1f2 <__ieee754_pow+0x976>
 800a21c:	0019      	movs	r1, r3
 800a21e:	e7da      	b.n	800a1d6 <__ieee754_pow+0x95a>
 800a220:	2300      	movs	r3, #0
 800a222:	4c18      	ldr	r4, [pc, #96]	; (800a284 <__ieee754_pow+0xa08>)
 800a224:	f7ff fbf1 	bl	8009a0a <__ieee754_pow+0x18e>
 800a228:	2300      	movs	r3, #0
 800a22a:	2400      	movs	r4, #0
 800a22c:	f7ff fbed 	bl	8009a0a <__ieee754_pow+0x18e>
 800a230:	652b82fe 	.word	0x652b82fe
 800a234:	3c971547 	.word	0x3c971547
 800a238:	3fe00000 	.word	0x3fe00000
 800a23c:	fffffc02 	.word	0xfffffc02
 800a240:	fffffc01 	.word	0xfffffc01
 800a244:	000fffff 	.word	0x000fffff
 800a248:	3fe62e43 	.word	0x3fe62e43
 800a24c:	fefa39ef 	.word	0xfefa39ef
 800a250:	3fe62e42 	.word	0x3fe62e42
 800a254:	0ca86c39 	.word	0x0ca86c39
 800a258:	be205c61 	.word	0xbe205c61
 800a25c:	72bea4d0 	.word	0x72bea4d0
 800a260:	3e663769 	.word	0x3e663769
 800a264:	c5d26bf1 	.word	0xc5d26bf1
 800a268:	3ebbbd41 	.word	0x3ebbbd41
 800a26c:	af25de2c 	.word	0xaf25de2c
 800a270:	3f11566a 	.word	0x3f11566a
 800a274:	16bebd93 	.word	0x16bebd93
 800a278:	3f66c16c 	.word	0x3f66c16c
 800a27c:	5555553e 	.word	0x5555553e
 800a280:	3fc55555 	.word	0x3fc55555
 800a284:	3ff00000 	.word	0x3ff00000
 800a288:	4090cbff 	.word	0x4090cbff
 800a28c:	3f6f3400 	.word	0x3f6f3400

0800a290 <__ieee754_sqrt>:
 800a290:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a292:	000b      	movs	r3, r1
 800a294:	000c      	movs	r4, r1
 800a296:	4956      	ldr	r1, [pc, #344]	; (800a3f0 <__ieee754_sqrt+0x160>)
 800a298:	0005      	movs	r5, r0
 800a29a:	0002      	movs	r2, r0
 800a29c:	0008      	movs	r0, r1
 800a29e:	b085      	sub	sp, #20
 800a2a0:	4020      	ands	r0, r4
 800a2a2:	4288      	cmp	r0, r1
 800a2a4:	d10f      	bne.n	800a2c6 <__ieee754_sqrt+0x36>
 800a2a6:	0028      	movs	r0, r5
 800a2a8:	0021      	movs	r1, r4
 800a2aa:	f7f7 f9ab 	bl	8001604 <__aeabi_dmul>
 800a2ae:	0002      	movs	r2, r0
 800a2b0:	000b      	movs	r3, r1
 800a2b2:	0028      	movs	r0, r5
 800a2b4:	0021      	movs	r1, r4
 800a2b6:	f7f6 fa67 	bl	8000788 <__aeabi_dadd>
 800a2ba:	0005      	movs	r5, r0
 800a2bc:	000c      	movs	r4, r1
 800a2be:	0028      	movs	r0, r5
 800a2c0:	0021      	movs	r1, r4
 800a2c2:	b005      	add	sp, #20
 800a2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2c6:	2c00      	cmp	r4, #0
 800a2c8:	dc10      	bgt.n	800a2ec <__ieee754_sqrt+0x5c>
 800a2ca:	0061      	lsls	r1, r4, #1
 800a2cc:	0849      	lsrs	r1, r1, #1
 800a2ce:	4329      	orrs	r1, r5
 800a2d0:	d0f5      	beq.n	800a2be <__ieee754_sqrt+0x2e>
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	428c      	cmp	r4, r1
 800a2d6:	d100      	bne.n	800a2da <__ieee754_sqrt+0x4a>
 800a2d8:	e080      	b.n	800a3dc <__ieee754_sqrt+0x14c>
 800a2da:	0028      	movs	r0, r5
 800a2dc:	0021      	movs	r1, r4
 800a2de:	f7f7 fbfd 	bl	8001adc <__aeabi_dsub>
 800a2e2:	0002      	movs	r2, r0
 800a2e4:	000b      	movs	r3, r1
 800a2e6:	f7f6 fd8b 	bl	8000e00 <__aeabi_ddiv>
 800a2ea:	e7e6      	b.n	800a2ba <__ieee754_sqrt+0x2a>
 800a2ec:	1521      	asrs	r1, r4, #20
 800a2ee:	d075      	beq.n	800a3dc <__ieee754_sqrt+0x14c>
 800a2f0:	4840      	ldr	r0, [pc, #256]	; (800a3f4 <__ieee754_sqrt+0x164>)
 800a2f2:	031b      	lsls	r3, r3, #12
 800a2f4:	180c      	adds	r4, r1, r0
 800a2f6:	2080      	movs	r0, #128	; 0x80
 800a2f8:	0b1b      	lsrs	r3, r3, #12
 800a2fa:	0340      	lsls	r0, r0, #13
 800a2fc:	4303      	orrs	r3, r0
 800a2fe:	07c9      	lsls	r1, r1, #31
 800a300:	d403      	bmi.n	800a30a <__ieee754_sqrt+0x7a>
 800a302:	0fd1      	lsrs	r1, r2, #31
 800a304:	005b      	lsls	r3, r3, #1
 800a306:	185b      	adds	r3, r3, r1
 800a308:	0052      	lsls	r2, r2, #1
 800a30a:	1061      	asrs	r1, r4, #1
 800a30c:	2400      	movs	r4, #0
 800a30e:	9103      	str	r1, [sp, #12]
 800a310:	005b      	lsls	r3, r3, #1
 800a312:	0fd1      	lsrs	r1, r2, #31
 800a314:	185b      	adds	r3, r3, r1
 800a316:	2180      	movs	r1, #128	; 0x80
 800a318:	2516      	movs	r5, #22
 800a31a:	0020      	movs	r0, r4
 800a31c:	0052      	lsls	r2, r2, #1
 800a31e:	0389      	lsls	r1, r1, #14
 800a320:	1846      	adds	r6, r0, r1
 800a322:	429e      	cmp	r6, r3
 800a324:	dc02      	bgt.n	800a32c <__ieee754_sqrt+0x9c>
 800a326:	1870      	adds	r0, r6, r1
 800a328:	1b9b      	subs	r3, r3, r6
 800a32a:	1864      	adds	r4, r4, r1
 800a32c:	0fd6      	lsrs	r6, r2, #31
 800a32e:	005b      	lsls	r3, r3, #1
 800a330:	3d01      	subs	r5, #1
 800a332:	18f3      	adds	r3, r6, r3
 800a334:	0052      	lsls	r2, r2, #1
 800a336:	0849      	lsrs	r1, r1, #1
 800a338:	2d00      	cmp	r5, #0
 800a33a:	d1f1      	bne.n	800a320 <__ieee754_sqrt+0x90>
 800a33c:	2620      	movs	r6, #32
 800a33e:	2780      	movs	r7, #128	; 0x80
 800a340:	0029      	movs	r1, r5
 800a342:	9601      	str	r6, [sp, #4]
 800a344:	063f      	lsls	r7, r7, #24
 800a346:	197e      	adds	r6, r7, r5
 800a348:	46b4      	mov	ip, r6
 800a34a:	4283      	cmp	r3, r0
 800a34c:	dc02      	bgt.n	800a354 <__ieee754_sqrt+0xc4>
 800a34e:	d114      	bne.n	800a37a <__ieee754_sqrt+0xea>
 800a350:	4296      	cmp	r6, r2
 800a352:	d812      	bhi.n	800a37a <__ieee754_sqrt+0xea>
 800a354:	4665      	mov	r5, ip
 800a356:	4666      	mov	r6, ip
 800a358:	19ed      	adds	r5, r5, r7
 800a35a:	9002      	str	r0, [sp, #8]
 800a35c:	2e00      	cmp	r6, #0
 800a35e:	da03      	bge.n	800a368 <__ieee754_sqrt+0xd8>
 800a360:	43ee      	mvns	r6, r5
 800a362:	0ff6      	lsrs	r6, r6, #31
 800a364:	1986      	adds	r6, r0, r6
 800a366:	9602      	str	r6, [sp, #8]
 800a368:	1a1b      	subs	r3, r3, r0
 800a36a:	4562      	cmp	r2, ip
 800a36c:	4180      	sbcs	r0, r0
 800a36e:	4240      	negs	r0, r0
 800a370:	1a1b      	subs	r3, r3, r0
 800a372:	4660      	mov	r0, ip
 800a374:	1a12      	subs	r2, r2, r0
 800a376:	9802      	ldr	r0, [sp, #8]
 800a378:	19c9      	adds	r1, r1, r7
 800a37a:	0fd6      	lsrs	r6, r2, #31
 800a37c:	005b      	lsls	r3, r3, #1
 800a37e:	199b      	adds	r3, r3, r6
 800a380:	9e01      	ldr	r6, [sp, #4]
 800a382:	0052      	lsls	r2, r2, #1
 800a384:	3e01      	subs	r6, #1
 800a386:	087f      	lsrs	r7, r7, #1
 800a388:	9601      	str	r6, [sp, #4]
 800a38a:	2e00      	cmp	r6, #0
 800a38c:	d1db      	bne.n	800a346 <__ieee754_sqrt+0xb6>
 800a38e:	4313      	orrs	r3, r2
 800a390:	d003      	beq.n	800a39a <__ieee754_sqrt+0x10a>
 800a392:	1c4b      	adds	r3, r1, #1
 800a394:	d127      	bne.n	800a3e6 <__ieee754_sqrt+0x156>
 800a396:	0031      	movs	r1, r6
 800a398:	3401      	adds	r4, #1
 800a39a:	4b17      	ldr	r3, [pc, #92]	; (800a3f8 <__ieee754_sqrt+0x168>)
 800a39c:	1060      	asrs	r0, r4, #1
 800a39e:	18c0      	adds	r0, r0, r3
 800a3a0:	0849      	lsrs	r1, r1, #1
 800a3a2:	07e3      	lsls	r3, r4, #31
 800a3a4:	d502      	bpl.n	800a3ac <__ieee754_sqrt+0x11c>
 800a3a6:	2380      	movs	r3, #128	; 0x80
 800a3a8:	061b      	lsls	r3, r3, #24
 800a3aa:	4319      	orrs	r1, r3
 800a3ac:	9b03      	ldr	r3, [sp, #12]
 800a3ae:	000d      	movs	r5, r1
 800a3b0:	051c      	lsls	r4, r3, #20
 800a3b2:	1823      	adds	r3, r4, r0
 800a3b4:	001c      	movs	r4, r3
 800a3b6:	e782      	b.n	800a2be <__ieee754_sqrt+0x2e>
 800a3b8:	0ad3      	lsrs	r3, r2, #11
 800a3ba:	3815      	subs	r0, #21
 800a3bc:	0552      	lsls	r2, r2, #21
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d0fa      	beq.n	800a3b8 <__ieee754_sqrt+0x128>
 800a3c2:	2480      	movs	r4, #128	; 0x80
 800a3c4:	0364      	lsls	r4, r4, #13
 800a3c6:	4223      	tst	r3, r4
 800a3c8:	d00a      	beq.n	800a3e0 <__ieee754_sqrt+0x150>
 800a3ca:	2420      	movs	r4, #32
 800a3cc:	0016      	movs	r6, r2
 800a3ce:	1a64      	subs	r4, r4, r1
 800a3d0:	40e6      	lsrs	r6, r4
 800a3d2:	1e4d      	subs	r5, r1, #1
 800a3d4:	408a      	lsls	r2, r1
 800a3d6:	4333      	orrs	r3, r6
 800a3d8:	1b41      	subs	r1, r0, r5
 800a3da:	e789      	b.n	800a2f0 <__ieee754_sqrt+0x60>
 800a3dc:	2000      	movs	r0, #0
 800a3de:	e7ee      	b.n	800a3be <__ieee754_sqrt+0x12e>
 800a3e0:	005b      	lsls	r3, r3, #1
 800a3e2:	3101      	adds	r1, #1
 800a3e4:	e7ef      	b.n	800a3c6 <__ieee754_sqrt+0x136>
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	3101      	adds	r1, #1
 800a3ea:	4399      	bics	r1, r3
 800a3ec:	e7d5      	b.n	800a39a <__ieee754_sqrt+0x10a>
 800a3ee:	46c0      	nop			; (mov r8, r8)
 800a3f0:	7ff00000 	.word	0x7ff00000
 800a3f4:	fffffc01 	.word	0xfffffc01
 800a3f8:	3fe00000 	.word	0x3fe00000

0800a3fc <with_errno>:
 800a3fc:	b570      	push	{r4, r5, r6, lr}
 800a3fe:	000d      	movs	r5, r1
 800a400:	0016      	movs	r6, r2
 800a402:	0004      	movs	r4, r0
 800a404:	f7fc fb9a 	bl	8006b3c <__errno>
 800a408:	0029      	movs	r1, r5
 800a40a:	6006      	str	r6, [r0, #0]
 800a40c:	0020      	movs	r0, r4
 800a40e:	bd70      	pop	{r4, r5, r6, pc}

0800a410 <xflow>:
 800a410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a412:	0015      	movs	r5, r2
 800a414:	001c      	movs	r4, r3
 800a416:	2800      	cmp	r0, #0
 800a418:	d010      	beq.n	800a43c <xflow+0x2c>
 800a41a:	2380      	movs	r3, #128	; 0x80
 800a41c:	0010      	movs	r0, r2
 800a41e:	061b      	lsls	r3, r3, #24
 800a420:	18e1      	adds	r1, r4, r3
 800a422:	9000      	str	r0, [sp, #0]
 800a424:	9101      	str	r1, [sp, #4]
 800a426:	9a00      	ldr	r2, [sp, #0]
 800a428:	9b01      	ldr	r3, [sp, #4]
 800a42a:	0028      	movs	r0, r5
 800a42c:	0021      	movs	r1, r4
 800a42e:	f7f7 f8e9 	bl	8001604 <__aeabi_dmul>
 800a432:	2222      	movs	r2, #34	; 0x22
 800a434:	f7ff ffe2 	bl	800a3fc <with_errno>
 800a438:	b003      	add	sp, #12
 800a43a:	bd30      	pop	{r4, r5, pc}
 800a43c:	0010      	movs	r0, r2
 800a43e:	0019      	movs	r1, r3
 800a440:	e7ef      	b.n	800a422 <xflow+0x12>

0800a442 <__math_uflow>:
 800a442:	2380      	movs	r3, #128	; 0x80
 800a444:	b510      	push	{r4, lr}
 800a446:	2200      	movs	r2, #0
 800a448:	055b      	lsls	r3, r3, #21
 800a44a:	f7ff ffe1 	bl	800a410 <xflow>
 800a44e:	bd10      	pop	{r4, pc}

0800a450 <__math_oflow>:
 800a450:	23e0      	movs	r3, #224	; 0xe0
 800a452:	b510      	push	{r4, lr}
 800a454:	2200      	movs	r2, #0
 800a456:	05db      	lsls	r3, r3, #23
 800a458:	f7ff ffda 	bl	800a410 <xflow>
 800a45c:	bd10      	pop	{r4, pc}

0800a45e <fabs>:
 800a45e:	004b      	lsls	r3, r1, #1
 800a460:	0859      	lsrs	r1, r3, #1
 800a462:	4770      	bx	lr

0800a464 <finite>:
 800a464:	4b02      	ldr	r3, [pc, #8]	; (800a470 <finite+0xc>)
 800a466:	0048      	lsls	r0, r1, #1
 800a468:	0840      	lsrs	r0, r0, #1
 800a46a:	18c0      	adds	r0, r0, r3
 800a46c:	0fc0      	lsrs	r0, r0, #31
 800a46e:	4770      	bx	lr
 800a470:	80100000 	.word	0x80100000

0800a474 <scalbn>:
 800a474:	004b      	lsls	r3, r1, #1
 800a476:	b570      	push	{r4, r5, r6, lr}
 800a478:	0d5b      	lsrs	r3, r3, #21
 800a47a:	0014      	movs	r4, r2
 800a47c:	000a      	movs	r2, r1
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d10d      	bne.n	800a49e <scalbn+0x2a>
 800a482:	004b      	lsls	r3, r1, #1
 800a484:	085b      	lsrs	r3, r3, #1
 800a486:	4303      	orrs	r3, r0
 800a488:	d010      	beq.n	800a4ac <scalbn+0x38>
 800a48a:	4b27      	ldr	r3, [pc, #156]	; (800a528 <scalbn+0xb4>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	f7f7 f8b9 	bl	8001604 <__aeabi_dmul>
 800a492:	4b26      	ldr	r3, [pc, #152]	; (800a52c <scalbn+0xb8>)
 800a494:	429c      	cmp	r4, r3
 800a496:	da0a      	bge.n	800a4ae <scalbn+0x3a>
 800a498:	4a25      	ldr	r2, [pc, #148]	; (800a530 <scalbn+0xbc>)
 800a49a:	4b26      	ldr	r3, [pc, #152]	; (800a534 <scalbn+0xc0>)
 800a49c:	e019      	b.n	800a4d2 <scalbn+0x5e>
 800a49e:	4d26      	ldr	r5, [pc, #152]	; (800a538 <scalbn+0xc4>)
 800a4a0:	42ab      	cmp	r3, r5
 800a4a2:	d108      	bne.n	800a4b6 <scalbn+0x42>
 800a4a4:	0002      	movs	r2, r0
 800a4a6:	000b      	movs	r3, r1
 800a4a8:	f7f6 f96e 	bl	8000788 <__aeabi_dadd>
 800a4ac:	bd70      	pop	{r4, r5, r6, pc}
 800a4ae:	000a      	movs	r2, r1
 800a4b0:	004b      	lsls	r3, r1, #1
 800a4b2:	0d5b      	lsrs	r3, r3, #21
 800a4b4:	3b36      	subs	r3, #54	; 0x36
 800a4b6:	4d21      	ldr	r5, [pc, #132]	; (800a53c <scalbn+0xc8>)
 800a4b8:	18e3      	adds	r3, r4, r3
 800a4ba:	42ab      	cmp	r3, r5
 800a4bc:	dd0c      	ble.n	800a4d8 <scalbn+0x64>
 800a4be:	4c20      	ldr	r4, [pc, #128]	; (800a540 <scalbn+0xcc>)
 800a4c0:	4d20      	ldr	r5, [pc, #128]	; (800a544 <scalbn+0xd0>)
 800a4c2:	2900      	cmp	r1, #0
 800a4c4:	da01      	bge.n	800a4ca <scalbn+0x56>
 800a4c6:	4c1e      	ldr	r4, [pc, #120]	; (800a540 <scalbn+0xcc>)
 800a4c8:	4d1f      	ldr	r5, [pc, #124]	; (800a548 <scalbn+0xd4>)
 800a4ca:	0020      	movs	r0, r4
 800a4cc:	0029      	movs	r1, r5
 800a4ce:	4a1c      	ldr	r2, [pc, #112]	; (800a540 <scalbn+0xcc>)
 800a4d0:	4b1c      	ldr	r3, [pc, #112]	; (800a544 <scalbn+0xd0>)
 800a4d2:	f7f7 f897 	bl	8001604 <__aeabi_dmul>
 800a4d6:	e7e9      	b.n	800a4ac <scalbn+0x38>
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	dd05      	ble.n	800a4e8 <scalbn+0x74>
 800a4dc:	4c1b      	ldr	r4, [pc, #108]	; (800a54c <scalbn+0xd8>)
 800a4de:	051b      	lsls	r3, r3, #20
 800a4e0:	4022      	ands	r2, r4
 800a4e2:	431a      	orrs	r2, r3
 800a4e4:	0011      	movs	r1, r2
 800a4e6:	e7e1      	b.n	800a4ac <scalbn+0x38>
 800a4e8:	001d      	movs	r5, r3
 800a4ea:	3535      	adds	r5, #53	; 0x35
 800a4ec:	da13      	bge.n	800a516 <scalbn+0xa2>
 800a4ee:	4a18      	ldr	r2, [pc, #96]	; (800a550 <scalbn+0xdc>)
 800a4f0:	0fcb      	lsrs	r3, r1, #31
 800a4f2:	4294      	cmp	r4, r2
 800a4f4:	dd08      	ble.n	800a508 <scalbn+0x94>
 800a4f6:	4812      	ldr	r0, [pc, #72]	; (800a540 <scalbn+0xcc>)
 800a4f8:	4912      	ldr	r1, [pc, #72]	; (800a544 <scalbn+0xd0>)
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d001      	beq.n	800a502 <scalbn+0x8e>
 800a4fe:	4810      	ldr	r0, [pc, #64]	; (800a540 <scalbn+0xcc>)
 800a500:	4911      	ldr	r1, [pc, #68]	; (800a548 <scalbn+0xd4>)
 800a502:	4a0f      	ldr	r2, [pc, #60]	; (800a540 <scalbn+0xcc>)
 800a504:	4b0f      	ldr	r3, [pc, #60]	; (800a544 <scalbn+0xd0>)
 800a506:	e7e4      	b.n	800a4d2 <scalbn+0x5e>
 800a508:	4809      	ldr	r0, [pc, #36]	; (800a530 <scalbn+0xbc>)
 800a50a:	490a      	ldr	r1, [pc, #40]	; (800a534 <scalbn+0xc0>)
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d0c3      	beq.n	800a498 <scalbn+0x24>
 800a510:	4807      	ldr	r0, [pc, #28]	; (800a530 <scalbn+0xbc>)
 800a512:	4910      	ldr	r1, [pc, #64]	; (800a554 <scalbn+0xe0>)
 800a514:	e7c0      	b.n	800a498 <scalbn+0x24>
 800a516:	4c0d      	ldr	r4, [pc, #52]	; (800a54c <scalbn+0xd8>)
 800a518:	3336      	adds	r3, #54	; 0x36
 800a51a:	4022      	ands	r2, r4
 800a51c:	051b      	lsls	r3, r3, #20
 800a51e:	4313      	orrs	r3, r2
 800a520:	0019      	movs	r1, r3
 800a522:	2200      	movs	r2, #0
 800a524:	4b0c      	ldr	r3, [pc, #48]	; (800a558 <scalbn+0xe4>)
 800a526:	e7d4      	b.n	800a4d2 <scalbn+0x5e>
 800a528:	43500000 	.word	0x43500000
 800a52c:	ffff3cb0 	.word	0xffff3cb0
 800a530:	c2f8f359 	.word	0xc2f8f359
 800a534:	01a56e1f 	.word	0x01a56e1f
 800a538:	000007ff 	.word	0x000007ff
 800a53c:	000007fe 	.word	0x000007fe
 800a540:	8800759c 	.word	0x8800759c
 800a544:	7e37e43c 	.word	0x7e37e43c
 800a548:	fe37e43c 	.word	0xfe37e43c
 800a54c:	800fffff 	.word	0x800fffff
 800a550:	0000c350 	.word	0x0000c350
 800a554:	81a56e1f 	.word	0x81a56e1f
 800a558:	3c900000 	.word	0x3c900000

0800a55c <_init>:
 800a55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55e:	46c0      	nop			; (mov r8, r8)
 800a560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a562:	bc08      	pop	{r3}
 800a564:	469e      	mov	lr, r3
 800a566:	4770      	bx	lr

0800a568 <_fini>:
 800a568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a56a:	46c0      	nop			; (mov r8, r8)
 800a56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a56e:	bc08      	pop	{r3}
 800a570:	469e      	mov	lr, r3
 800a572:	4770      	bx	lr
